/*! modernizr 3.3.1 (Custom Build) | MIT *
 * https://modernizr.com/download/?-video-setclasses !*/
!function (e, n, a) {
  function o(e, n) {
    return typeof e === n;
  }function s() {
    var e, n, a, s, t, c, r;for (var p in l) if (l.hasOwnProperty(p)) {
      if (e = [], n = l[p], n.name && (e.push(n.name.toLowerCase()), n.options && n.options.aliases && n.options.aliases.length)) for (a = 0; a < n.options.aliases.length; a++) e.push(n.options.aliases[a].toLowerCase());for (s = o(n.fn, "function") ? n.fn() : n.fn, t = 0; t < e.length; t++) c = e[t], r = c.split("."), 1 === r.length ? Modernizr[r[0]] = s : (!Modernizr[r[0]] || Modernizr[r[0]] instanceof Boolean || (Modernizr[r[0]] = new Boolean(Modernizr[r[0]])), Modernizr[r[0]][r[1]] = s), i.push((s ? "" : "no-") + r.join("-"));
    }
  }function t(e) {
    var n = p.className,
        a = Modernizr._config.classPrefix || "";if (f && (n = n.baseVal), Modernizr._config.enableJSClass) {
      var o = new RegExp("(^|\\s)" + a + "no-js(\\s|$)");n = n.replace(o, "$1" + a + "js$2");
    }Modernizr._config.enableClasses && (n += " " + a + e.join(" " + a), f ? p.className.baseVal = n : p.className = n);
  }function c() {
    return "function" != typeof n.createElement ? n.createElement(arguments[0]) : f ? n.createElementNS.call(n, "http://www.w3.org/2000/svg", arguments[0]) : n.createElement.apply(n, arguments);
  }var i = [],
      l = [],
      r = { _version: "3.3.1", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function (e, n) {
      var a = this;setTimeout(function () {
        n(a[e]);
      }, 0);
    }, addTest: function (e, n, a) {
      l.push({ name: e, fn: n, options: a });
    }, addAsyncTest: function (e) {
      l.push({ name: null, fn: e });
    } },
      Modernizr = function () {};Modernizr.prototype = r, Modernizr = new Modernizr();var p = n.documentElement,
      f = "svg" === p.nodeName.toLowerCase();Modernizr.addTest("video", function () {
    var e = c("video"),
        n = !1;try {
      (n = !!e.canPlayType) && (n = new Boolean(n), n.ogg = e.canPlayType('video/ogg; codecs="theora"').replace(/^no$/, ""), n.h264 = e.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/, ""), n.webm = e.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, ""), n.vp9 = e.canPlayType('video/webm; codecs="vp9"').replace(/^no$/, ""), n.hls = e.canPlayType('application/x-mpegURL; codecs="avc1.42E01E"').replace(/^no$/, ""));
    } catch (a) {}return n;
  }), s(), t(i), delete r.addTest, delete r.addAsyncTest;for (var d = 0; d < Modernizr._q.length; d++) Modernizr._q[d]();e.Modernizr = Modernizr;
}(window, document);
;/*! jQuery v3.1.1 | (c) jQuery Foundation | jquery.org/license */
!function (a, b) {
  "use strict";
  "object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function (a) {
    if (!a.document) throw new Error("jQuery requires a window with a document");return b(a);
  } : b(a);
}("undefined" != typeof window ? window : this, function (a, b) {
  "use strict";
  var c = [],
      d = a.document,
      e = Object.getPrototypeOf,
      f = c.slice,
      g = c.concat,
      h = c.push,
      i = c.indexOf,
      j = {},
      k = j.toString,
      l = j.hasOwnProperty,
      m = l.toString,
      n = m.call(Object),
      o = {};function p(a, b) {
    b = b || d;var c = b.createElement("script");c.text = a, b.head.appendChild(c).parentNode.removeChild(c);
  }var q = "3.1.1",
      r = function (a, b) {
    return new r.fn.init(a, b);
  },
      s = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
      t = /^-ms-/,
      u = /-([a-z])/g,
      v = function (a, b) {
    return b.toUpperCase();
  };r.fn = r.prototype = { jquery: q, constructor: r, length: 0, toArray: function () {
      return f.call(this);
    }, get: function (a) {
      return null == a ? f.call(this) : a < 0 ? this[a + this.length] : this[a];
    }, pushStack: function (a) {
      var b = r.merge(this.constructor(), a);return b.prevObject = this, b;
    }, each: function (a) {
      return r.each(this, a);
    }, map: function (a) {
      return this.pushStack(r.map(this, function (b, c) {
        return a.call(b, c, b);
      }));
    }, slice: function () {
      return this.pushStack(f.apply(this, arguments));
    }, first: function () {
      return this.eq(0);
    }, last: function () {
      return this.eq(-1);
    }, eq: function (a) {
      var b = this.length,
          c = +a + (a < 0 ? b : 0);return this.pushStack(c >= 0 && c < b ? [this[c]] : []);
    }, end: function () {
      return this.prevObject || this.constructor();
    }, push: h, sort: c.sort, splice: c.splice }, r.extend = r.fn.extend = function () {
    var a,
        b,
        c,
        d,
        e,
        f,
        g = arguments[0] || {},
        h = 1,
        i = arguments.length,
        j = !1;for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || r.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++) if (null != (a = arguments[h])) for (b in a) c = g[b], d = a[b], g !== d && (j && d && (r.isPlainObject(d) || (e = r.isArray(d))) ? (e ? (e = !1, f = c && r.isArray(c) ? c : []) : f = c && r.isPlainObject(c) ? c : {}, g[b] = r.extend(j, f, d)) : void 0 !== d && (g[b] = d));return g;
  }, r.extend({ expando: "jQuery" + (q + Math.random()).replace(/\D/g, ""), isReady: !0, error: function (a) {
      throw new Error(a);
    }, noop: function () {}, isFunction: function (a) {
      return "function" === r.type(a);
    }, isArray: Array.isArray, isWindow: function (a) {
      return null != a && a === a.window;
    }, isNumeric: function (a) {
      var b = r.type(a);return ("number" === b || "string" === b) && !isNaN(a - parseFloat(a));
    }, isPlainObject: function (a) {
      var b, c;return !(!a || "[object Object]" !== k.call(a)) && (!(b = e(a)) || (c = l.call(b, "constructor") && b.constructor, "function" == typeof c && m.call(c) === n));
    }, isEmptyObject: function (a) {
      var b;for (b in a) return !1;return !0;
    }, type: function (a) {
      return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? j[k.call(a)] || "object" : typeof a;
    }, globalEval: function (a) {
      p(a);
    }, camelCase: function (a) {
      return a.replace(t, "ms-").replace(u, v);
    }, nodeName: function (a, b) {
      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
    }, each: function (a, b) {
      var c,
          d = 0;if (w(a)) {
        for (c = a.length; d < c; d++) if (b.call(a[d], d, a[d]) === !1) break;
      } else for (d in a) if (b.call(a[d], d, a[d]) === !1) break;return a;
    }, trim: function (a) {
      return null == a ? "" : (a + "").replace(s, "");
    }, makeArray: function (a, b) {
      var c = b || [];return null != a && (w(Object(a)) ? r.merge(c, "string" == typeof a ? [a] : a) : h.call(c, a)), c;
    }, inArray: function (a, b, c) {
      return null == b ? -1 : i.call(b, a, c);
    }, merge: function (a, b) {
      for (var c = +b.length, d = 0, e = a.length; d < c; d++) a[e++] = b[d];return a.length = e, a;
    }, grep: function (a, b, c) {
      for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) d = !b(a[f], f), d !== h && e.push(a[f]);return e;
    }, map: function (a, b, c) {
      var d,
          e,
          f = 0,
          h = [];if (w(a)) for (d = a.length; f < d; f++) e = b(a[f], f, c), null != e && h.push(e);else for (f in a) e = b(a[f], f, c), null != e && h.push(e);return g.apply([], h);
    }, guid: 1, proxy: function (a, b) {
      var c, d, e;if ("string" == typeof b && (c = a[b], b = a, a = c), r.isFunction(a)) return d = f.call(arguments, 2), e = function () {
        return a.apply(b || this, d.concat(f.call(arguments)));
      }, e.guid = a.guid = a.guid || r.guid++, e;
    }, now: Date.now, support: o }), "function" == typeof Symbol && (r.fn[Symbol.iterator] = c[Symbol.iterator]), r.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (a, b) {
    j["[object " + b + "]"] = b.toLowerCase();
  });function w(a) {
    var b = !!a && "length" in a && a.length,
        c = r.type(a);return "function" !== c && !r.isWindow(a) && ("array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a);
  }var x = function (a) {
    var b,
        c,
        d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l,
        m,
        n,
        o,
        p,
        q,
        r,
        s,
        t,
        u = "sizzle" + 1 * new Date(),
        v = a.document,
        w = 0,
        x = 0,
        y = ha(),
        z = ha(),
        A = ha(),
        B = function (a, b) {
      return a === b && (l = !0), 0;
    },
        C = {}.hasOwnProperty,
        D = [],
        E = D.pop,
        F = D.push,
        G = D.push,
        H = D.slice,
        I = function (a, b) {
      for (var c = 0, d = a.length; c < d; c++) if (a[c] === b) return c;return -1;
    },
        J = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        K = "[\\x20\\t\\r\\n\\f]",
        L = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
        M = "\\[" + K + "*(" + L + ")(?:" + K + "*([*^$|!~]?=)" + K + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + L + "))|)" + K + "*\\]",
        N = ":(" + L + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + M + ")*)|.*)\\)|)",
        O = new RegExp(K + "+", "g"),
        P = new RegExp("^" + K + "+|((?:^|[^\\\\])(?:\\\\.)*)" + K + "+$", "g"),
        Q = new RegExp("^" + K + "*," + K + "*"),
        R = new RegExp("^" + K + "*([>+~]|" + K + ")" + K + "*"),
        S = new RegExp("=" + K + "*([^\\]'\"]*?)" + K + "*\\]", "g"),
        T = new RegExp(N),
        U = new RegExp("^" + L + "$"),
        V = { ID: new RegExp("^#(" + L + ")"), CLASS: new RegExp("^\\.(" + L + ")"), TAG: new RegExp("^(" + L + "|[*])"), ATTR: new RegExp("^" + M), PSEUDO: new RegExp("^" + N), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + K + "*(even|odd|(([+-]|)(\\d*)n|)" + K + "*(?:([+-]|)" + K + "*(\\d+)|))" + K + "*\\)|)", "i"), bool: new RegExp("^(?:" + J + ")$", "i"), needsContext: new RegExp("^" + K + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + K + "*((?:-\\d)?\\d*)" + K + "*\\)|)(?=[^-]|$)", "i") },
        W = /^(?:input|select|textarea|button)$/i,
        X = /^h\d$/i,
        Y = /^[^{]+\{\s*\[native \w/,
        Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        $ = /[+~]/,
        _ = new RegExp("\\\\([\\da-f]{1,6}" + K + "?|(" + K + ")|.)", "ig"),
        aa = function (a, b, c) {
      var d = "0x" + b - 65536;return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
    },
        ba = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        ca = function (a, b) {
      return b ? "\0" === a ? "\ufffd" : a.slice(0, -1) + "\\" + a.charCodeAt(a.length - 1).toString(16) + " " : "\\" + a;
    },
        da = function () {
      m();
    },
        ea = ta(function (a) {
      return a.disabled === !0 && ("form" in a || "label" in a);
    }, { dir: "parentNode", next: "legend" });try {
      G.apply(D = H.call(v.childNodes), v.childNodes), D[v.childNodes.length].nodeType;
    } catch (fa) {
      G = { apply: D.length ? function (a, b) {
          F.apply(a, H.call(b));
        } : function (a, b) {
          var c = a.length,
              d = 0;while (a[c++] = b[d++]);a.length = c - 1;
        } };
    }function ga(a, b, d, e) {
      var f,
          h,
          j,
          k,
          l,
          o,
          r,
          s = b && b.ownerDocument,
          w = b ? b.nodeType : 9;if (d = d || [], "string" != typeof a || !a || 1 !== w && 9 !== w && 11 !== w) return d;if (!e && ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, p)) {
        if (11 !== w && (l = Z.exec(a))) if (f = l[1]) {
          if (9 === w) {
            if (!(j = b.getElementById(f))) return d;if (j.id === f) return d.push(j), d;
          } else if (s && (j = s.getElementById(f)) && t(b, j) && j.id === f) return d.push(j), d;
        } else {
          if (l[2]) return G.apply(d, b.getElementsByTagName(a)), d;if ((f = l[3]) && c.getElementsByClassName && b.getElementsByClassName) return G.apply(d, b.getElementsByClassName(f)), d;
        }if (c.qsa && !A[a + " "] && (!q || !q.test(a))) {
          if (1 !== w) s = b, r = a;else if ("object" !== b.nodeName.toLowerCase()) {
            (k = b.getAttribute("id")) ? k = k.replace(ba, ca) : b.setAttribute("id", k = u), o = g(a), h = o.length;while (h--) o[h] = "#" + k + " " + sa(o[h]);r = o.join(","), s = $.test(a) && qa(b.parentNode) || b;
          }if (r) try {
            return G.apply(d, s.querySelectorAll(r)), d;
          } catch (x) {} finally {
            k === u && b.removeAttribute("id");
          }
        }
      }return i(a.replace(P, "$1"), b, d, e);
    }function ha() {
      var a = [];function b(c, e) {
        return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
      }return b;
    }function ia(a) {
      return a[u] = !0, a;
    }function ja(a) {
      var b = n.createElement("fieldset");try {
        return !!a(b);
      } catch (c) {
        return !1;
      } finally {
        b.parentNode && b.parentNode.removeChild(b), b = null;
      }
    }function ka(a, b) {
      var c = a.split("|"),
          e = c.length;while (e--) d.attrHandle[c[e]] = b;
    }function la(a, b) {
      var c = b && a,
          d = c && 1 === a.nodeType && 1 === b.nodeType && a.sourceIndex - b.sourceIndex;if (d) return d;if (c) while (c = c.nextSibling) if (c === b) return -1;return a ? 1 : -1;
    }function ma(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();return "input" === c && b.type === a;
      };
    }function na(a) {
      return function (b) {
        var c = b.nodeName.toLowerCase();return ("input" === c || "button" === c) && b.type === a;
      };
    }function oa(a) {
      return function (b) {
        return "form" in b ? b.parentNode && b.disabled === !1 ? "label" in b ? "label" in b.parentNode ? b.parentNode.disabled === a : b.disabled === a : b.isDisabled === a || b.isDisabled !== !a && ea(b) === a : b.disabled === a : "label" in b && b.disabled === a;
      };
    }function pa(a) {
      return ia(function (b) {
        return b = +b, ia(function (c, d) {
          var e,
              f = a([], c.length, b),
              g = f.length;while (g--) c[e = f[g]] && (c[e] = !(d[e] = c[e]));
        });
      });
    }function qa(a) {
      return a && "undefined" != typeof a.getElementsByTagName && a;
    }c = ga.support = {}, f = ga.isXML = function (a) {
      var b = a && (a.ownerDocument || a).documentElement;return !!b && "HTML" !== b.nodeName;
    }, m = ga.setDocument = function (a) {
      var b,
          e,
          g = a ? a.ownerDocument || a : v;return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = n.documentElement, p = !f(n), v !== n && (e = n.defaultView) && e.top !== e && (e.addEventListener ? e.addEventListener("unload", da, !1) : e.attachEvent && e.attachEvent("onunload", da)), c.attributes = ja(function (a) {
        return a.className = "i", !a.getAttribute("className");
      }), c.getElementsByTagName = ja(function (a) {
        return a.appendChild(n.createComment("")), !a.getElementsByTagName("*").length;
      }), c.getElementsByClassName = Y.test(n.getElementsByClassName), c.getById = ja(function (a) {
        return o.appendChild(a).id = u, !n.getElementsByName || !n.getElementsByName(u).length;
      }), c.getById ? (d.filter.ID = function (a) {
        var b = a.replace(_, aa);return function (a) {
          return a.getAttribute("id") === b;
        };
      }, d.find.ID = function (a, b) {
        if ("undefined" != typeof b.getElementById && p) {
          var c = b.getElementById(a);return c ? [c] : [];
        }
      }) : (d.filter.ID = function (a) {
        var b = a.replace(_, aa);return function (a) {
          var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");return c && c.value === b;
        };
      }, d.find.ID = function (a, b) {
        if ("undefined" != typeof b.getElementById && p) {
          var c,
              d,
              e,
              f = b.getElementById(a);if (f) {
            if (c = f.getAttributeNode("id"), c && c.value === a) return [f];e = b.getElementsByName(a), d = 0;while (f = e[d++]) if (c = f.getAttributeNode("id"), c && c.value === a) return [f];
          }return [];
        }
      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
        return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
      } : function (a, b) {
        var c,
            d = [],
            e = 0,
            f = b.getElementsByTagName(a);if ("*" === a) {
          while (c = f[e++]) 1 === c.nodeType && d.push(c);return d;
        }return f;
      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
        if ("undefined" != typeof b.getElementsByClassName && p) return b.getElementsByClassName(a);
      }, r = [], q = [], (c.qsa = Y.test(n.querySelectorAll)) && (ja(function (a) {
        o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\r\\' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + K + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + K + "*(?:value|" + J + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
      }), ja(function (a) {
        a.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var b = n.createElement("input");b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + K + "*[*^$|!~]?="), 2 !== a.querySelectorAll(":enabled").length && q.push(":enabled", ":disabled"), o.appendChild(a).disabled = !0, 2 !== a.querySelectorAll(":disabled").length && q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
      })), (c.matchesSelector = Y.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {
        c.disconnectedMatch = s.call(a, "*"), s.call(a, "[s!='']:x"), r.push("!=", N);
      }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = Y.test(o.compareDocumentPosition), t = b || Y.test(o.contains) ? function (a, b) {
        var c = 9 === a.nodeType ? a.documentElement : a,
            d = b && b.parentNode;return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
      } : function (a, b) {
        if (b) while (b = b.parentNode) if (b === a) return !0;return !1;
      }, B = b ? function (a, b) {
        if (a === b) return l = !0, 0;var d = !a.compareDocumentPosition - !b.compareDocumentPosition;return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === n || a.ownerDocument === v && t(v, a) ? -1 : b === n || b.ownerDocument === v && t(v, b) ? 1 : k ? I(k, a) - I(k, b) : 0 : 4 & d ? -1 : 1);
      } : function (a, b) {
        if (a === b) return l = !0, 0;var c,
            d = 0,
            e = a.parentNode,
            f = b.parentNode,
            g = [a],
            h = [b];if (!e || !f) return a === n ? -1 : b === n ? 1 : e ? -1 : f ? 1 : k ? I(k, a) - I(k, b) : 0;if (e === f) return la(a, b);c = a;while (c = c.parentNode) g.unshift(c);c = b;while (c = c.parentNode) h.unshift(c);while (g[d] === h[d]) d++;return d ? la(g[d], h[d]) : g[d] === v ? -1 : h[d] === v ? 1 : 0;
      }, n) : n;
    }, ga.matches = function (a, b) {
      return ga(a, null, null, b);
    }, ga.matchesSelector = function (a, b) {
      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(S, "='$1']"), c.matchesSelector && p && !A[b + " "] && (!r || !r.test(b)) && (!q || !q.test(b))) try {
        var d = s.call(a, b);if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
      } catch (e) {}return ga(b, n, null, [a]).length > 0;
    }, ga.contains = function (a, b) {
      return (a.ownerDocument || a) !== n && m(a), t(a, b);
    }, ga.attr = function (a, b) {
      (a.ownerDocument || a) !== n && m(a);var e = d.attrHandle[b.toLowerCase()],
          f = e && C.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
    }, ga.escape = function (a) {
      return (a + "").replace(ba, ca);
    }, ga.error = function (a) {
      throw new Error("Syntax error, unrecognized expression: " + a);
    }, ga.uniqueSort = function (a) {
      var b,
          d = [],
          e = 0,
          f = 0;if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
        while (b = a[f++]) b === a[f] && (e = d.push(f));while (e--) a.splice(d[e], 1);
      }return k = null, a;
    }, e = ga.getText = function (a) {
      var b,
          c = "",
          d = 0,
          f = a.nodeType;if (f) {
        if (1 === f || 9 === f || 11 === f) {
          if ("string" == typeof a.textContent) return a.textContent;for (a = a.firstChild; a; a = a.nextSibling) c += e(a);
        } else if (3 === f || 4 === f) return a.nodeValue;
      } else while (b = a[d++]) c += e(b);return c;
    }, d = ga.selectors = { cacheLength: 50, createPseudo: ia, match: V, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function (a) {
          return a[1] = a[1].replace(_, aa), a[3] = (a[3] || a[4] || a[5] || "").replace(_, aa), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
        }, CHILD: function (a) {
          return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), a;
        }, PSEUDO: function (a) {
          var b,
              c = !a[6] && a[2];return V.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && T.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
        } }, filter: { TAG: function (a) {
          var b = a.replace(_, aa).toLowerCase();return "*" === a ? function () {
            return !0;
          } : function (a) {
            return a.nodeName && a.nodeName.toLowerCase() === b;
          };
        }, CLASS: function (a) {
          var b = y[a + " "];return b || (b = new RegExp("(^|" + K + ")" + a + "(" + K + "|$)")) && y(a, function (a) {
            return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "");
          });
        }, ATTR: function (a, b, c) {
          return function (d) {
            var e = ga.attr(d, a);return null == e ? "!=" === b : !b || (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(O, " ") + " ").indexOf(c) > -1 : "|=" === b && (e === c || e.slice(0, c.length + 1) === c + "-"));
          };
        }, CHILD: function (a, b, c, d, e) {
          var f = "nth" !== a.slice(0, 3),
              g = "last" !== a.slice(-4),
              h = "of-type" === b;return 1 === d && 0 === e ? function (a) {
            return !!a.parentNode;
          } : function (b, c, i) {
            var j,
                k,
                l,
                m,
                n,
                o,
                p = f !== g ? "nextSibling" : "previousSibling",
                q = b.parentNode,
                r = h && b.nodeName.toLowerCase(),
                s = !i && !h,
                t = !1;if (q) {
              if (f) {
                while (p) {
                  m = b;while (m = m[p]) if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1;o = p = "only" === a && !o && "nextSibling";
                }return !0;
              }if (o = [g ? q.firstChild : q.lastChild], g && s) {
                m = q, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n && j[2], m = n && q.childNodes[n];while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) if (1 === m.nodeType && ++t && m === b) {
                  k[a] = [w, n, t];break;
                }
              } else if (s && (m = b, l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === w && j[1], t = n), t === !1) while (m = ++n && m && m[p] || (t = n = 0) || o.pop()) if ((h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) && ++t && (s && (l = m[u] || (m[u] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [w, t]), m === b)) break;return t -= e, t === d || t % d === 0 && t / d >= 0;
            }
          };
        }, PSEUDO: function (a, b) {
          var c,
              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {
            var d,
                f = e(a, b),
                g = f.length;while (g--) d = I(a, f[g]), a[d] = !(c[d] = f[g]);
          }) : function (a) {
            return e(a, 0, c);
          }) : e;
        } }, pseudos: { not: ia(function (a) {
          var b = [],
              c = [],
              d = h(a.replace(P, "$1"));return d[u] ? ia(function (a, b, c, e) {
            var f,
                g = d(a, null, e, []),
                h = a.length;while (h--) (f = g[h]) && (a[h] = !(b[h] = f));
          }) : function (a, e, f) {
            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
          };
        }), has: ia(function (a) {
          return function (b) {
            return ga(a, b).length > 0;
          };
        }), contains: ia(function (a) {
          return a = a.replace(_, aa), function (b) {
            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
          };
        }), lang: ia(function (a) {
          return U.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(_, aa).toLowerCase(), function (b) {
            var c;do if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-"); while ((b = b.parentNode) && 1 === b.nodeType);return !1;
          };
        }), target: function (b) {
          var c = a.location && a.location.hash;return c && c.slice(1) === b.id;
        }, root: function (a) {
          return a === o;
        }, focus: function (a) {
          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
        }, enabled: oa(!1), disabled: oa(!0), checked: function (a) {
          var b = a.nodeName.toLowerCase();return "input" === b && !!a.checked || "option" === b && !!a.selected;
        }, selected: function (a) {
          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
        }, empty: function (a) {
          for (a = a.firstChild; a; a = a.nextSibling) if (a.nodeType < 6) return !1;return !0;
        }, parent: function (a) {
          return !d.pseudos.empty(a);
        }, header: function (a) {
          return X.test(a.nodeName);
        }, input: function (a) {
          return W.test(a.nodeName);
        }, button: function (a) {
          var b = a.nodeName.toLowerCase();return "input" === b && "button" === a.type || "button" === b;
        }, text: function (a) {
          var b;return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
        }, first: pa(function () {
          return [0];
        }), last: pa(function (a, b) {
          return [b - 1];
        }), eq: pa(function (a, b, c) {
          return [c < 0 ? c + b : c];
        }), even: pa(function (a, b) {
          for (var c = 0; c < b; c += 2) a.push(c);return a;
        }), odd: pa(function (a, b) {
          for (var c = 1; c < b; c += 2) a.push(c);return a;
        }), lt: pa(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; --d >= 0;) a.push(d);return a;
        }), gt: pa(function (a, b, c) {
          for (var d = c < 0 ? c + b : c; ++d < b;) a.push(d);return a;
        }) } }, d.pseudos.nth = d.pseudos.eq;for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) d.pseudos[b] = ma(b);for (b in { submit: !0, reset: !0 }) d.pseudos[b] = na(b);function ra() {}ra.prototype = d.filters = d.pseudos, d.setFilters = new ra(), g = ga.tokenize = function (a, b) {
      var c,
          e,
          f,
          g,
          h,
          i,
          j,
          k = z[a + " "];if (k) return b ? 0 : k.slice(0);h = a, i = [], j = d.preFilter;while (h) {
        c && !(e = Q.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = R.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(P, " ") }), h = h.slice(c.length));for (g in d.filter) !(e = V[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length));if (!c) break;
      }return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);
    };function sa(a) {
      for (var b = 0, c = a.length, d = ""; b < c; b++) d += a[b].value;return d;
    }function ta(a, b, c) {
      var d = b.dir,
          e = b.next,
          f = e || d,
          g = c && "parentNode" === f,
          h = x++;return b.first ? function (b, c, e) {
        while (b = b[d]) if (1 === b.nodeType || g) return a(b, c, e);return !1;
      } : function (b, c, i) {
        var j,
            k,
            l,
            m = [w, h];if (i) {
          while (b = b[d]) if ((1 === b.nodeType || g) && a(b, c, i)) return !0;
        } else while (b = b[d]) if (1 === b.nodeType || g) if (l = b[u] || (b[u] = {}), k = l[b.uniqueID] || (l[b.uniqueID] = {}), e && e === b.nodeName.toLowerCase()) b = b[d] || b;else {
          if ((j = k[f]) && j[0] === w && j[1] === h) return m[2] = j[2];if (k[f] = m, m[2] = a(b, c, i)) return !0;
        }return !1;
      };
    }function ua(a) {
      return a.length > 1 ? function (b, c, d) {
        var e = a.length;while (e--) if (!a[e](b, c, d)) return !1;return !0;
      } : a[0];
    }function va(a, b, c) {
      for (var d = 0, e = b.length; d < e; d++) ga(a, b[d], c);return c;
    }function wa(a, b, c, d, e) {
      for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++) (f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));return g;
    }function xa(a, b, c, d, e, f) {
      return d && !d[u] && (d = xa(d)), e && !e[u] && (e = xa(e, f)), ia(function (f, g, h, i) {
        var j,
            k,
            l,
            m = [],
            n = [],
            o = g.length,
            p = f || va(b || "*", h.nodeType ? [h] : h, []),
            q = !a || !f && b ? p : wa(p, m, a, h, i),
            r = c ? e || (f ? a : o || d) ? [] : g : q;if (c && c(q, r, h, i), d) {
          j = wa(r, n), d(j, [], h, i), k = j.length;while (k--) (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
        }if (f) {
          if (e || a) {
            if (e) {
              j = [], k = r.length;while (k--) (l = r[k]) && j.push(q[k] = l);e(null, r = [], j, i);
            }k = r.length;while (k--) (l = r[k]) && (j = e ? I(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
          }
        } else r = wa(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : G.apply(g, r);
      });
    }function ya(a) {
      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = ta(function (a) {
        return a === b;
      }, h, !0), l = ta(function (a) {
        return I(b, a) > -1;
      }, h, !0), m = [function (a, c, d) {
        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));return b = null, e;
      }]; i < f; i++) if (c = d.relative[a[i].type]) m = [ta(ua(m), c)];else {
        if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
          for (e = ++i; e < f; e++) if (d.relative[a[e].type]) break;return xa(i > 1 && ua(m), i > 1 && sa(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(P, "$1"), c, i < e && ya(a.slice(i, e)), e < f && ya(a = a.slice(e)), e < f && sa(a));
        }m.push(c);
      }return ua(m);
    }function za(a, b) {
      var c = b.length > 0,
          e = a.length > 0,
          f = function (f, g, h, i, k) {
        var l,
            o,
            q,
            r = 0,
            s = "0",
            t = f && [],
            u = [],
            v = j,
            x = f || e && d.find.TAG("*", k),
            y = w += null == v ? 1 : Math.random() || .1,
            z = x.length;for (k && (j = g === n || g || k); s !== z && null != (l = x[s]); s++) {
          if (e && l) {
            o = 0, g || l.ownerDocument === n || (m(l), h = !p);while (q = a[o++]) if (q(l, g || n, h)) {
              i.push(l);break;
            }k && (w = y);
          }c && ((l = !q && l) && r--, f && t.push(l));
        }if (r += s, c && s !== r) {
          o = 0;while (q = b[o++]) q(t, u, g, h);if (f) {
            if (r > 0) while (s--) t[s] || u[s] || (u[s] = E.call(i));u = wa(u);
          }G.apply(i, u), k && !f && u.length > 0 && r + b.length > 1 && ga.uniqueSort(i);
        }return k && (w = y, j = v), t;
      };return c ? ia(f) : f;
    }return h = ga.compile = function (a, b) {
      var c,
          d = [],
          e = [],
          f = A[a + " "];if (!f) {
        b || (b = g(a)), c = b.length;while (c--) f = ya(b[c]), f[u] ? d.push(f) : e.push(f);f = A(a, za(e, d)), f.selector = a;
      }return f;
    }, i = ga.select = function (a, b, c, e) {
      var f,
          i,
          j,
          k,
          l,
          m = "function" == typeof a && a,
          n = !e && g(a = m.selector || a);if (c = c || [], 1 === n.length) {
        if (i = n[0] = n[0].slice(0), i.length > 2 && "ID" === (j = i[0]).type && 9 === b.nodeType && p && d.relative[i[1].type]) {
          if (b = (d.find.ID(j.matches[0].replace(_, aa), b) || [])[0], !b) return c;m && (b = b.parentNode), a = a.slice(i.shift().value.length);
        }f = V.needsContext.test(a) ? 0 : i.length;while (f--) {
          if (j = i[f], d.relative[k = j.type]) break;if ((l = d.find[k]) && (e = l(j.matches[0].replace(_, aa), $.test(i[0].type) && qa(b.parentNode) || b))) {
            if (i.splice(f, 1), a = e.length && sa(i), !a) return G.apply(c, e), c;break;
          }
        }
      }return (m || h(a, n))(e, b, !p, c, !b || $.test(a) && qa(b.parentNode) || b), c;
    }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {
      return 1 & a.compareDocumentPosition(n.createElement("fieldset"));
    }), ja(function (a) {
      return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
    }) || ka("type|href|height|width", function (a, b, c) {
      if (!c) return a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
    }), c.attributes && ja(function (a) {
      return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
    }) || ka("value", function (a, b, c) {
      if (!c && "input" === a.nodeName.toLowerCase()) return a.defaultValue;
    }), ja(function (a) {
      return null == a.getAttribute("disabled");
    }) || ka(J, function (a, b, c) {
      var d;if (!c) return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
    }), ga;
  }(a);r.find = x, r.expr = x.selectors, r.expr[":"] = r.expr.pseudos, r.uniqueSort = r.unique = x.uniqueSort, r.text = x.getText, r.isXMLDoc = x.isXML, r.contains = x.contains, r.escapeSelector = x.escape;var y = function (a, b, c) {
    var d = [],
        e = void 0 !== c;while ((a = a[b]) && 9 !== a.nodeType) if (1 === a.nodeType) {
      if (e && r(a).is(c)) break;d.push(a);
    }return d;
  },
      z = function (a, b) {
    for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);return c;
  },
      A = r.expr.match.needsContext,
      B = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,
      C = /^.[^:#\[\.,]*$/;function D(a, b, c) {
    return r.isFunction(b) ? r.grep(a, function (a, d) {
      return !!b.call(a, d, a) !== c;
    }) : b.nodeType ? r.grep(a, function (a) {
      return a === b !== c;
    }) : "string" != typeof b ? r.grep(a, function (a) {
      return i.call(b, a) > -1 !== c;
    }) : C.test(b) ? r.filter(b, a, c) : (b = r.filter(b, a), r.grep(a, function (a) {
      return i.call(b, a) > -1 !== c && 1 === a.nodeType;
    }));
  }r.filter = function (a, b, c) {
    var d = b[0];return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? r.find.matchesSelector(d, a) ? [d] : [] : r.find.matches(a, r.grep(b, function (a) {
      return 1 === a.nodeType;
    }));
  }, r.fn.extend({ find: function (a) {
      var b,
          c,
          d = this.length,
          e = this;if ("string" != typeof a) return this.pushStack(r(a).filter(function () {
        for (b = 0; b < d; b++) if (r.contains(e[b], this)) return !0;
      }));for (c = this.pushStack([]), b = 0; b < d; b++) r.find(a, e[b], c);return d > 1 ? r.uniqueSort(c) : c;
    }, filter: function (a) {
      return this.pushStack(D(this, a || [], !1));
    }, not: function (a) {
      return this.pushStack(D(this, a || [], !0));
    }, is: function (a) {
      return !!D(this, "string" == typeof a && A.test(a) ? r(a) : a || [], !1).length;
    } });var E,
      F = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      G = r.fn.init = function (a, b, c) {
    var e, f;if (!a) return this;if (c = c || E, "string" == typeof a) {
      if (e = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : F.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);if (e[1]) {
        if (b = b instanceof r ? b[0] : b, r.merge(this, r.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : d, !0)), B.test(e[1]) && r.isPlainObject(b)) for (e in b) r.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);return this;
      }return f = d.getElementById(e[2]), f && (this[0] = f, this.length = 1), this;
    }return a.nodeType ? (this[0] = a, this.length = 1, this) : r.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(r) : r.makeArray(a, this);
  };G.prototype = r.fn, E = r(d);var H = /^(?:parents|prev(?:Until|All))/,
      I = { children: !0, contents: !0, next: !0, prev: !0 };r.fn.extend({ has: function (a) {
      var b = r(a, this),
          c = b.length;return this.filter(function () {
        for (var a = 0; a < c; a++) if (r.contains(this, b[a])) return !0;
      });
    }, closest: function (a, b) {
      var c,
          d = 0,
          e = this.length,
          f = [],
          g = "string" != typeof a && r(a);if (!A.test(a)) for (; d < e; d++) for (c = this[d]; c && c !== b; c = c.parentNode) if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && r.find.matchesSelector(c, a))) {
        f.push(c);break;
      }return this.pushStack(f.length > 1 ? r.uniqueSort(f) : f);
    }, index: function (a) {
      return a ? "string" == typeof a ? i.call(r(a), this[0]) : i.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    }, add: function (a, b) {
      return this.pushStack(r.uniqueSort(r.merge(this.get(), r(a, b))));
    }, addBack: function (a) {
      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
    } });function J(a, b) {
    while ((a = a[b]) && 1 !== a.nodeType);return a;
  }r.each({ parent: function (a) {
      var b = a.parentNode;return b && 11 !== b.nodeType ? b : null;
    }, parents: function (a) {
      return y(a, "parentNode");
    }, parentsUntil: function (a, b, c) {
      return y(a, "parentNode", c);
    }, next: function (a) {
      return J(a, "nextSibling");
    }, prev: function (a) {
      return J(a, "previousSibling");
    }, nextAll: function (a) {
      return y(a, "nextSibling");
    }, prevAll: function (a) {
      return y(a, "previousSibling");
    }, nextUntil: function (a, b, c) {
      return y(a, "nextSibling", c);
    }, prevUntil: function (a, b, c) {
      return y(a, "previousSibling", c);
    }, siblings: function (a) {
      return z((a.parentNode || {}).firstChild, a);
    }, children: function (a) {
      return z(a.firstChild);
    }, contents: function (a) {
      return a.contentDocument || r.merge([], a.childNodes);
    } }, function (a, b) {
    r.fn[a] = function (c, d) {
      var e = r.map(this, b, c);return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = r.filter(d, e)), this.length > 1 && (I[a] || r.uniqueSort(e), H.test(a) && e.reverse()), this.pushStack(e);
    };
  });var K = /[^\x20\t\r\n\f]+/g;function L(a) {
    var b = {};return r.each(a.match(K) || [], function (a, c) {
      b[c] = !0;
    }), b;
  }r.Callbacks = function (a) {
    a = "string" == typeof a ? L(a) : r.extend({}, a);var b,
        c,
        d,
        e,
        f = [],
        g = [],
        h = -1,
        i = function () {
      for (e = a.once, d = b = !0; g.length; h = -1) {
        c = g.shift();while (++h < f.length) f[h].apply(c[0], c[1]) === !1 && a.stopOnFalse && (h = f.length, c = !1);
      }a.memory || (c = !1), b = !1, e && (f = c ? [] : "");
    },
        j = { add: function () {
        return f && (c && !b && (h = f.length - 1, g.push(c)), function d(b) {
          r.each(b, function (b, c) {
            r.isFunction(c) ? a.unique && j.has(c) || f.push(c) : c && c.length && "string" !== r.type(c) && d(c);
          });
        }(arguments), c && !b && i()), this;
      }, remove: function () {
        return r.each(arguments, function (a, b) {
          var c;while ((c = r.inArray(b, f, c)) > -1) f.splice(c, 1), c <= h && h--;
        }), this;
      }, has: function (a) {
        return a ? r.inArray(a, f) > -1 : f.length > 0;
      }, empty: function () {
        return f && (f = []), this;
      }, disable: function () {
        return e = g = [], f = c = "", this;
      }, disabled: function () {
        return !f;
      }, lock: function () {
        return e = g = [], c || b || (f = c = ""), this;
      }, locked: function () {
        return !!e;
      }, fireWith: function (a, c) {
        return e || (c = c || [], c = [a, c.slice ? c.slice() : c], g.push(c), b || i()), this;
      }, fire: function () {
        return j.fireWith(this, arguments), this;
      }, fired: function () {
        return !!d;
      } };return j;
  };function M(a) {
    return a;
  }function N(a) {
    throw a;
  }function O(a, b, c) {
    var d;try {
      a && r.isFunction(d = a.promise) ? d.call(a).done(b).fail(c) : a && r.isFunction(d = a.then) ? d.call(a, b, c) : b.call(void 0, a);
    } catch (a) {
      c.call(void 0, a);
    }
  }r.extend({ Deferred: function (b) {
      var c = [["notify", "progress", r.Callbacks("memory"), r.Callbacks("memory"), 2], ["resolve", "done", r.Callbacks("once memory"), r.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", r.Callbacks("once memory"), r.Callbacks("once memory"), 1, "rejected"]],
          d = "pending",
          e = { state: function () {
          return d;
        }, always: function () {
          return f.done(arguments).fail(arguments), this;
        }, "catch": function (a) {
          return e.then(null, a);
        }, pipe: function () {
          var a = arguments;return r.Deferred(function (b) {
            r.each(c, function (c, d) {
              var e = r.isFunction(a[d[4]]) && a[d[4]];f[d[1]](function () {
                var a = e && e.apply(this, arguments);a && r.isFunction(a.promise) ? a.promise().progress(b.notify).done(b.resolve).fail(b.reject) : b[d[0] + "With"](this, e ? [a] : arguments);
              });
            }), a = null;
          }).promise();
        }, then: function (b, d, e) {
          var f = 0;function g(b, c, d, e) {
            return function () {
              var h = this,
                  i = arguments,
                  j = function () {
                var a, j;if (!(b < f)) {
                  if (a = d.apply(h, i), a === c.promise()) throw new TypeError("Thenable self-resolution");j = a && ("object" == typeof a || "function" == typeof a) && a.then, r.isFunction(j) ? e ? j.call(a, g(f, c, M, e), g(f, c, N, e)) : (f++, j.call(a, g(f, c, M, e), g(f, c, N, e), g(f, c, M, c.notifyWith))) : (d !== M && (h = void 0, i = [a]), (e || c.resolveWith)(h, i));
                }
              },
                  k = e ? j : function () {
                try {
                  j();
                } catch (a) {
                  r.Deferred.exceptionHook && r.Deferred.exceptionHook(a, k.stackTrace), b + 1 >= f && (d !== N && (h = void 0, i = [a]), c.rejectWith(h, i));
                }
              };b ? k() : (r.Deferred.getStackHook && (k.stackTrace = r.Deferred.getStackHook()), a.setTimeout(k));
            };
          }return r.Deferred(function (a) {
            c[0][3].add(g(0, a, r.isFunction(e) ? e : M, a.notifyWith)), c[1][3].add(g(0, a, r.isFunction(b) ? b : M)), c[2][3].add(g(0, a, r.isFunction(d) ? d : N));
          }).promise();
        }, promise: function (a) {
          return null != a ? r.extend(a, e) : e;
        } },
          f = {};return r.each(c, function (a, b) {
        var g = b[2],
            h = b[5];e[b[1]] = g.add, h && g.add(function () {
          d = h;
        }, c[3 - a][2].disable, c[0][2].lock), g.add(b[3].fire), f[b[0]] = function () {
          return f[b[0] + "With"](this === f ? void 0 : this, arguments), this;
        }, f[b[0] + "With"] = g.fireWith;
      }), e.promise(f), b && b.call(f, f), f;
    }, when: function (a) {
      var b = arguments.length,
          c = b,
          d = Array(c),
          e = f.call(arguments),
          g = r.Deferred(),
          h = function (a) {
        return function (c) {
          d[a] = this, e[a] = arguments.length > 1 ? f.call(arguments) : c, --b || g.resolveWith(d, e);
        };
      };if (b <= 1 && (O(a, g.done(h(c)).resolve, g.reject), "pending" === g.state() || r.isFunction(e[c] && e[c].then))) return g.then();while (c--) O(e[c], h(c), g.reject);return g.promise();
    } });var P = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;r.Deferred.exceptionHook = function (b, c) {
    a.console && a.console.warn && b && P.test(b.name) && a.console.warn("jQuery.Deferred exception: " + b.message, b.stack, c);
  }, r.readyException = function (b) {
    a.setTimeout(function () {
      throw b;
    });
  };var Q = r.Deferred();r.fn.ready = function (a) {
    return Q.then(a)["catch"](function (a) {
      r.readyException(a);
    }), this;
  }, r.extend({ isReady: !1, readyWait: 1, holdReady: function (a) {
      a ? r.readyWait++ : r.ready(!0);
    }, ready: function (a) {
      (a === !0 ? --r.readyWait : r.isReady) || (r.isReady = !0, a !== !0 && --r.readyWait > 0 || Q.resolveWith(d, [r]));
    } }), r.ready.then = Q.then;function R() {
    d.removeEventListener("DOMContentLoaded", R), a.removeEventListener("load", R), r.ready();
  }"complete" === d.readyState || "loading" !== d.readyState && !d.documentElement.doScroll ? a.setTimeout(r.ready) : (d.addEventListener("DOMContentLoaded", R), a.addEventListener("load", R));var S = function (a, b, c, d, e, f, g) {
    var h = 0,
        i = a.length,
        j = null == c;if ("object" === r.type(c)) {
      e = !0;for (h in c) S(a, b, h, c[h], !0, f, g);
    } else if (void 0 !== d && (e = !0, r.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (a, b, c) {
      return j.call(r(a), c);
    })), b)) for (; h < i; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
  },
      T = function (a) {
    return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType;
  };function U() {
    this.expando = r.expando + U.uid++;
  }U.uid = 1, U.prototype = { cache: function (a) {
      var b = a[this.expando];return b || (b = {}, T(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, { value: b, configurable: !0 }))), b;
    }, set: function (a, b, c) {
      var d,
          e = this.cache(a);if ("string" == typeof b) e[r.camelCase(b)] = c;else for (d in b) e[r.camelCase(d)] = b[d];return e;
    }, get: function (a, b) {
      return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][r.camelCase(b)];
    }, access: function (a, b, c) {
      return void 0 === b || b && "string" == typeof b && void 0 === c ? this.get(a, b) : (this.set(a, b, c), void 0 !== c ? c : b);
    }, remove: function (a, b) {
      var c,
          d = a[this.expando];if (void 0 !== d) {
        if (void 0 !== b) {
          r.isArray(b) ? b = b.map(r.camelCase) : (b = r.camelCase(b), b = b in d ? [b] : b.match(K) || []), c = b.length;while (c--) delete d[b[c]];
        }(void 0 === b || r.isEmptyObject(d)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando]);
      }
    }, hasData: function (a) {
      var b = a[this.expando];return void 0 !== b && !r.isEmptyObject(b);
    } };var V = new U(),
      W = new U(),
      X = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      Y = /[A-Z]/g;function Z(a) {
    return "true" === a || "false" !== a && ("null" === a ? null : a === +a + "" ? +a : X.test(a) ? JSON.parse(a) : a);
  }function $(a, b, c) {
    var d;if (void 0 === c && 1 === a.nodeType) if (d = "data-" + b.replace(Y, "-$&").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
      try {
        c = Z(c);
      } catch (e) {}W.set(a, b, c);
    } else c = void 0;return c;
  }r.extend({ hasData: function (a) {
      return W.hasData(a) || V.hasData(a);
    }, data: function (a, b, c) {
      return W.access(a, b, c);
    }, removeData: function (a, b) {
      W.remove(a, b);
    }, _data: function (a, b, c) {
      return V.access(a, b, c);
    }, _removeData: function (a, b) {
      V.remove(a, b);
    } }), r.fn.extend({ data: function (a, b) {
      var c,
          d,
          e,
          f = this[0],
          g = f && f.attributes;if (void 0 === a) {
        if (this.length && (e = W.get(f), 1 === f.nodeType && !V.get(f, "hasDataAttrs"))) {
          c = g.length;while (c--) g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = r.camelCase(d.slice(5)), $(f, d, e[d])));V.set(f, "hasDataAttrs", !0);
        }return e;
      }return "object" == typeof a ? this.each(function () {
        W.set(this, a);
      }) : S(this, function (b) {
        var c;if (f && void 0 === b) {
          if (c = W.get(f, a), void 0 !== c) return c;if (c = $(f, a), void 0 !== c) return c;
        } else this.each(function () {
          W.set(this, a, b);
        });
      }, null, b, arguments.length > 1, null, !0);
    }, removeData: function (a) {
      return this.each(function () {
        W.remove(this, a);
      });
    } }), r.extend({ queue: function (a, b, c) {
      var d;if (a) return b = (b || "fx") + "queue", d = V.get(a, b), c && (!d || r.isArray(c) ? d = V.access(a, b, r.makeArray(c)) : d.push(c)), d || [];
    }, dequeue: function (a, b) {
      b = b || "fx";var c = r.queue(a, b),
          d = c.length,
          e = c.shift(),
          f = r._queueHooks(a, b),
          g = function () {
        r.dequeue(a, b);
      };"inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
    }, _queueHooks: function (a, b) {
      var c = b + "queueHooks";return V.get(a, c) || V.access(a, c, { empty: r.Callbacks("once memory").add(function () {
          V.remove(a, [b + "queue", c]);
        }) });
    } }), r.fn.extend({ queue: function (a, b) {
      var c = 2;return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? r.queue(this[0], a) : void 0 === b ? this : this.each(function () {
        var c = r.queue(this, a, b);r._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && r.dequeue(this, a);
      });
    }, dequeue: function (a) {
      return this.each(function () {
        r.dequeue(this, a);
      });
    }, clearQueue: function (a) {
      return this.queue(a || "fx", []);
    }, promise: function (a, b) {
      var c,
          d = 1,
          e = r.Deferred(),
          f = this,
          g = this.length,
          h = function () {
        --d || e.resolveWith(f, [f]);
      };"string" != typeof a && (b = a, a = void 0), a = a || "fx";while (g--) c = V.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));return h(), e.promise(b);
    } });var _ = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      aa = new RegExp("^(?:([+-])=|)(" + _ + ")([a-z%]*)$", "i"),
      ba = ["Top", "Right", "Bottom", "Left"],
      ca = function (a, b) {
    return a = b || a, "none" === a.style.display || "" === a.style.display && r.contains(a.ownerDocument, a) && "none" === r.css(a, "display");
  },
      da = function (a, b, c, d) {
    var e,
        f,
        g = {};for (f in b) g[f] = a.style[f], a.style[f] = b[f];e = c.apply(a, d || []);for (f in b) a.style[f] = g[f];return e;
  };function ea(a, b, c, d) {
    var e,
        f = 1,
        g = 20,
        h = d ? function () {
      return d.cur();
    } : function () {
      return r.css(a, b, "");
    },
        i = h(),
        j = c && c[3] || (r.cssNumber[b] ? "" : "px"),
        k = (r.cssNumber[b] || "px" !== j && +i) && aa.exec(r.css(a, b));if (k && k[3] !== j) {
      j = j || k[3], c = c || [], k = +i || 1;do f = f || ".5", k /= f, r.style(a, b, k + j); while (f !== (f = h() / i) && 1 !== f && --g);
    }return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e;
  }var fa = {};function ga(a) {
    var b,
        c = a.ownerDocument,
        d = a.nodeName,
        e = fa[d];return e ? e : (b = c.body.appendChild(c.createElement(d)), e = r.css(b, "display"), b.parentNode.removeChild(b), "none" === e && (e = "block"), fa[d] = e, e);
  }function ha(a, b) {
    for (var c, d, e = [], f = 0, g = a.length; f < g; f++) d = a[f], d.style && (c = d.style.display, b ? ("none" === c && (e[f] = V.get(d, "display") || null, e[f] || (d.style.display = "")), "" === d.style.display && ca(d) && (e[f] = ga(d))) : "none" !== c && (e[f] = "none", V.set(d, "display", c)));for (f = 0; f < g; f++) null != e[f] && (a[f].style.display = e[f]);return a;
  }r.fn.extend({ show: function () {
      return ha(this, !0);
    }, hide: function () {
      return ha(this);
    }, toggle: function (a) {
      return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
        ca(this) ? r(this).show() : r(this).hide();
      });
    } });var ia = /^(?:checkbox|radio)$/i,
      ja = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
      ka = /^$|\/(?:java|ecma)script/i,
      la = { option: [1, "<select multiple='multiple'>", "</select>"], thead: [1, "<table>", "</table>"], col: [2, "<table><colgroup>", "</colgroup></table>"], tr: [2, "<table><tbody>", "</tbody></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: [0, "", ""] };la.optgroup = la.option, la.tbody = la.tfoot = la.colgroup = la.caption = la.thead, la.th = la.td;function ma(a, b) {
    var c;return c = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : [], void 0 === b || b && r.nodeName(a, b) ? r.merge([a], c) : c;
  }function na(a, b) {
    for (var c = 0, d = a.length; c < d; c++) V.set(a[c], "globalEval", !b || V.get(b[c], "globalEval"));
  }var oa = /<|&#?\w+;/;function pa(a, b, c, d, e) {
    for (var f, g, h, i, j, k, l = b.createDocumentFragment(), m = [], n = 0, o = a.length; n < o; n++) if (f = a[n], f || 0 === f) if ("object" === r.type(f)) r.merge(m, f.nodeType ? [f] : f);else if (oa.test(f)) {
      g = g || l.appendChild(b.createElement("div")), h = (ja.exec(f) || ["", ""])[1].toLowerCase(), i = la[h] || la._default, g.innerHTML = i[1] + r.htmlPrefilter(f) + i[2], k = i[0];while (k--) g = g.lastChild;r.merge(m, g.childNodes), g = l.firstChild, g.textContent = "";
    } else m.push(b.createTextNode(f));l.textContent = "", n = 0;while (f = m[n++]) if (d && r.inArray(f, d) > -1) e && e.push(f);else if (j = r.contains(f.ownerDocument, f), g = ma(l.appendChild(f), "script"), j && na(g), c) {
      k = 0;while (f = g[k++]) ka.test(f.type || "") && c.push(f);
    }return l;
  }!function () {
    var a = d.createDocumentFragment(),
        b = a.appendChild(d.createElement("div")),
        c = d.createElement("input");c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), o.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", o.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue;
  }();var qa = d.documentElement,
      ra = /^key/,
      sa = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      ta = /^([^.]*)(?:\.(.+)|)/;function ua() {
    return !0;
  }function va() {
    return !1;
  }function wa() {
    try {
      return d.activeElement;
    } catch (a) {}
  }function xa(a, b, c, d, e, f) {
    var g, h;if ("object" == typeof b) {
      "string" != typeof c && (d = d || c, c = void 0);for (h in b) xa(a, h, c, d, b[h], f);return a;
    }if (null == d && null == e ? (e = c, d = c = void 0) : null == e && ("string" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = va;else if (!e) return a;return 1 === f && (g = e, e = function (a) {
      return r().off(a), g.apply(this, arguments);
    }, e.guid = g.guid || (g.guid = r.guid++)), a.each(function () {
      r.event.add(this, b, e, d, c);
    });
  }r.event = { global: {}, add: function (a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          p,
          q = V.get(a);if (q) {
        c.handler && (f = c, c = f.handler, e = f.selector), e && r.find.matchesSelector(qa, e), c.guid || (c.guid = r.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function (b) {
          return "undefined" != typeof r && r.event.triggered !== b.type ? r.event.dispatch.apply(a, arguments) : void 0;
        }), b = (b || "").match(K) || [""], j = b.length;while (j--) h = ta.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n && (l = r.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = r.event.special[n] || {}, k = r.extend({ type: n, origType: p, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && r.expr.match.needsContext.test(e), namespace: o.join(".") }, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), r.event.global[n] = !0);
      }
    }, remove: function (a, b, c, d, e) {
      var f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o,
          p,
          q = V.hasData(a) && V.get(a);if (q && (i = q.events)) {
        b = (b || "").match(K) || [""], j = b.length;while (j--) if (h = ta.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n) {
          l = r.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length;while (f--) k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1), k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || r.removeEvent(a, n, q.handle), delete i[n]);
        } else for (n in i) r.event.remove(a, n + b[j], c, d, !0);r.isEmptyObject(i) && V.remove(a, "handle events");
      }
    }, dispatch: function (a) {
      var b = r.event.fix(a),
          c,
          d,
          e,
          f,
          g,
          h,
          i = new Array(arguments.length),
          j = (V.get(this, "events") || {})[b.type] || [],
          k = r.event.special[b.type] || {};for (i[0] = b, c = 1; c < arguments.length; c++) i[c] = arguments[c];if (b.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, b) !== !1) {
        h = r.event.handlers.call(this, b, j), c = 0;while ((f = h[c++]) && !b.isPropagationStopped()) {
          b.currentTarget = f.elem, d = 0;while ((g = f.handlers[d++]) && !b.isImmediatePropagationStopped()) b.rnamespace && !b.rnamespace.test(g.namespace) || (b.handleObj = g, b.data = g.data, e = ((r.event.special[g.origType] || {}).handle || g.handler).apply(f.elem, i), void 0 !== e && (b.result = e) === !1 && (b.preventDefault(), b.stopPropagation()));
        }return k.postDispatch && k.postDispatch.call(this, b), b.result;
      }
    }, handlers: function (a, b) {
      var c,
          d,
          e,
          f,
          g,
          h = [],
          i = b.delegateCount,
          j = a.target;if (i && j.nodeType && !("click" === a.type && a.button >= 1)) for (; j !== this; j = j.parentNode || this) if (1 === j.nodeType && ("click" !== a.type || j.disabled !== !0)) {
        for (f = [], g = {}, c = 0; c < i; c++) d = b[c], e = d.selector + " ", void 0 === g[e] && (g[e] = d.needsContext ? r(e, this).index(j) > -1 : r.find(e, this, null, [j]).length), g[e] && f.push(d);f.length && h.push({ elem: j, handlers: f });
      }return j = this, i < b.length && h.push({ elem: j, handlers: b.slice(i) }), h;
    }, addProp: function (a, b) {
      Object.defineProperty(r.Event.prototype, a, { enumerable: !0, configurable: !0, get: r.isFunction(b) ? function () {
          if (this.originalEvent) return b(this.originalEvent);
        } : function () {
          if (this.originalEvent) return this.originalEvent[a];
        }, set: function (b) {
          Object.defineProperty(this, a, { enumerable: !0, configurable: !0, writable: !0, value: b });
        } });
    }, fix: function (a) {
      return a[r.expando] ? a : new r.Event(a);
    }, special: { load: { noBubble: !0 }, focus: { trigger: function () {
          if (this !== wa() && this.focus) return this.focus(), !1;
        }, delegateType: "focusin" }, blur: { trigger: function () {
          if (this === wa() && this.blur) return this.blur(), !1;
        }, delegateType: "focusout" }, click: { trigger: function () {
          if ("checkbox" === this.type && this.click && r.nodeName(this, "input")) return this.click(), !1;
        }, _default: function (a) {
          return r.nodeName(a.target, "a");
        } }, beforeunload: { postDispatch: function (a) {
          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
        } } } }, r.removeEvent = function (a, b, c) {
    a.removeEventListener && a.removeEventListener(b, c);
  }, r.Event = function (a, b) {
    return this instanceof r.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? ua : va, this.target = a.target && 3 === a.target.nodeType ? a.target.parentNode : a.target, this.currentTarget = a.currentTarget, this.relatedTarget = a.relatedTarget) : this.type = a, b && r.extend(this, b), this.timeStamp = a && a.timeStamp || r.now(), void (this[r.expando] = !0)) : new r.Event(a, b);
  }, r.Event.prototype = { constructor: r.Event, isDefaultPrevented: va, isPropagationStopped: va, isImmediatePropagationStopped: va, isSimulated: !1, preventDefault: function () {
      var a = this.originalEvent;this.isDefaultPrevented = ua, a && !this.isSimulated && a.preventDefault();
    }, stopPropagation: function () {
      var a = this.originalEvent;this.isPropagationStopped = ua, a && !this.isSimulated && a.stopPropagation();
    }, stopImmediatePropagation: function () {
      var a = this.originalEvent;this.isImmediatePropagationStopped = ua, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation();
    } }, r.each({ altKey: !0, bubbles: !0, cancelable: !0, changedTouches: !0, ctrlKey: !0, detail: !0, eventPhase: !0, metaKey: !0, pageX: !0, pageY: !0, shiftKey: !0, view: !0, "char": !0, charCode: !0, key: !0, keyCode: !0, button: !0, buttons: !0, clientX: !0, clientY: !0, offsetX: !0, offsetY: !0, pointerId: !0, pointerType: !0, screenX: !0, screenY: !0, targetTouches: !0, toElement: !0, touches: !0, which: function (a) {
      var b = a.button;return null == a.which && ra.test(a.type) ? null != a.charCode ? a.charCode : a.keyCode : !a.which && void 0 !== b && sa.test(a.type) ? 1 & b ? 1 : 2 & b ? 3 : 4 & b ? 2 : 0 : a.which;
    } }, r.event.addProp), r.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {
    r.event.special[a] = { delegateType: b, bindType: b, handle: function (a) {
        var c,
            d = this,
            e = a.relatedTarget,
            f = a.handleObj;return e && (e === d || r.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
      } };
  }), r.fn.extend({ on: function (a, b, c, d) {
      return xa(this, a, b, c, d);
    }, one: function (a, b, c, d) {
      return xa(this, a, b, c, d, 1);
    }, off: function (a, b, c) {
      var d, e;if (a && a.preventDefault && a.handleObj) return d = a.handleObj, r(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;if ("object" == typeof a) {
        for (e in a) this.off(e, b, a[e]);return this;
      }return b !== !1 && "function" != typeof b || (c = b, b = void 0), c === !1 && (c = va), this.each(function () {
        r.event.remove(this, a, c, b);
      });
    } });var ya = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
      za = /<script|<style|<link/i,
      Aa = /checked\s*(?:[^=]|=\s*.checked.)/i,
      Ba = /^true\/(.*)/,
      Ca = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Da(a, b) {
    return r.nodeName(a, "table") && r.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a : a;
  }function Ea(a) {
    return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a;
  }function Fa(a) {
    var b = Ba.exec(a.type);return b ? a.type = b[1] : a.removeAttribute("type"), a;
  }function Ga(a, b) {
    var c, d, e, f, g, h, i, j;if (1 === b.nodeType) {
      if (V.hasData(a) && (f = V.access(a), g = V.set(b, f), j = f.events)) {
        delete g.handle, g.events = {};for (e in j) for (c = 0, d = j[e].length; c < d; c++) r.event.add(b, e, j[e][c]);
      }W.hasData(a) && (h = W.access(a), i = r.extend({}, h), W.set(b, i));
    }
  }function Ha(a, b) {
    var c = b.nodeName.toLowerCase();"input" === c && ia.test(a.type) ? b.checked = a.checked : "input" !== c && "textarea" !== c || (b.defaultValue = a.defaultValue);
  }function Ia(a, b, c, d) {
    b = g.apply([], b);var e,
        f,
        h,
        i,
        j,
        k,
        l = 0,
        m = a.length,
        n = m - 1,
        q = b[0],
        s = r.isFunction(q);if (s || m > 1 && "string" == typeof q && !o.checkClone && Aa.test(q)) return a.each(function (e) {
      var f = a.eq(e);s && (b[0] = q.call(this, e, f.html())), Ia(f, b, c, d);
    });if (m && (e = pa(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {
      for (h = r.map(ma(e, "script"), Ea), i = h.length; l < m; l++) j = e, l !== n && (j = r.clone(j, !0, !0), i && r.merge(h, ma(j, "script"))), c.call(a[l], j, l);if (i) for (k = h[h.length - 1].ownerDocument, r.map(h, Fa), l = 0; l < i; l++) j = h[l], ka.test(j.type || "") && !V.access(j, "globalEval") && r.contains(k, j) && (j.src ? r._evalUrl && r._evalUrl(j.src) : p(j.textContent.replace(Ca, ""), k));
    }return a;
  }function Ja(a, b, c) {
    for (var d, e = b ? r.filter(b, a) : a, f = 0; null != (d = e[f]); f++) c || 1 !== d.nodeType || r.cleanData(ma(d)), d.parentNode && (c && r.contains(d.ownerDocument, d) && na(ma(d, "script")), d.parentNode.removeChild(d));return a;
  }r.extend({ htmlPrefilter: function (a) {
      return a.replace(ya, "<$1></$2>");
    }, clone: function (a, b, c) {
      var d,
          e,
          f,
          g,
          h = a.cloneNode(!0),
          i = r.contains(a.ownerDocument, a);if (!(o.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || r.isXMLDoc(a))) for (g = ma(h), f = ma(a), d = 0, e = f.length; d < e; d++) Ha(f[d], g[d]);if (b) if (c) for (f = f || ma(a), g = g || ma(h), d = 0, e = f.length; d < e; d++) Ga(f[d], g[d]);else Ga(a, h);return g = ma(h, "script"), g.length > 0 && na(g, !i && ma(a, "script")), h;
    }, cleanData: function (a) {
      for (var b, c, d, e = r.event.special, f = 0; void 0 !== (c = a[f]); f++) if (T(c)) {
        if (b = c[V.expando]) {
          if (b.events) for (d in b.events) e[d] ? r.event.remove(c, d) : r.removeEvent(c, d, b.handle);c[V.expando] = void 0;
        }c[W.expando] && (c[W.expando] = void 0);
      }
    } }), r.fn.extend({ detach: function (a) {
      return Ja(this, a, !0);
    }, remove: function (a) {
      return Ja(this, a);
    }, text: function (a) {
      return S(this, function (a) {
        return void 0 === a ? r.text(this) : this.empty().each(function () {
          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a);
        });
      }, null, a, arguments.length);
    }, append: function () {
      return Ia(this, arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = Da(this, a);b.appendChild(a);
        }
      });
    }, prepend: function () {
      return Ia(this, arguments, function (a) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var b = Da(this, a);b.insertBefore(a, b.firstChild);
        }
      });
    }, before: function () {
      return Ia(this, arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this);
      });
    }, after: function () {
      return Ia(this, arguments, function (a) {
        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
      });
    }, empty: function () {
      for (var a, b = 0; null != (a = this[b]); b++) 1 === a.nodeType && (r.cleanData(ma(a, !1)), a.textContent = "");return this;
    }, clone: function (a, b) {
      return a = null != a && a, b = null == b ? a : b, this.map(function () {
        return r.clone(this, a, b);
      });
    }, html: function (a) {
      return S(this, function (a) {
        var b = this[0] || {},
            c = 0,
            d = this.length;if (void 0 === a && 1 === b.nodeType) return b.innerHTML;if ("string" == typeof a && !za.test(a) && !la[(ja.exec(a) || ["", ""])[1].toLowerCase()]) {
          a = r.htmlPrefilter(a);try {
            for (; c < d; c++) b = this[c] || {}, 1 === b.nodeType && (r.cleanData(ma(b, !1)), b.innerHTML = a);b = 0;
          } catch (e) {}
        }b && this.empty().append(a);
      }, null, a, arguments.length);
    }, replaceWith: function () {
      var a = [];return Ia(this, arguments, function (b) {
        var c = this.parentNode;r.inArray(this, a) < 0 && (r.cleanData(ma(this)), c && c.replaceChild(b, this));
      }, a);
    } }), r.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {
    r.fn[a] = function (a) {
      for (var c, d = [], e = r(a), f = e.length - 1, g = 0; g <= f; g++) c = g === f ? this : this.clone(!0), r(e[g])[b](c), h.apply(d, c.get());return this.pushStack(d);
    };
  });var Ka = /^margin/,
      La = new RegExp("^(" + _ + ")(?!px)[a-z%]+$", "i"),
      Ma = function (b) {
    var c = b.ownerDocument.defaultView;return c && c.opener || (c = a), c.getComputedStyle(b);
  };!function () {
    function b() {
      if (i) {
        i.style.cssText = "box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", i.innerHTML = "", qa.appendChild(h);var b = a.getComputedStyle(i);c = "1%" !== b.top, g = "2px" === b.marginLeft, e = "4px" === b.width, i.style.marginRight = "50%", f = "4px" === b.marginRight, qa.removeChild(h), i = null;
      }
    }var c,
        e,
        f,
        g,
        h = d.createElement("div"),
        i = d.createElement("div");i.style && (i.style.backgroundClip = "content-box", i.cloneNode(!0).style.backgroundClip = "", o.clearCloneStyle = "content-box" === i.style.backgroundClip, h.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", h.appendChild(i), r.extend(o, { pixelPosition: function () {
        return b(), c;
      }, boxSizingReliable: function () {
        return b(), e;
      }, pixelMarginRight: function () {
        return b(), f;
      }, reliableMarginLeft: function () {
        return b(), g;
      } }));
  }();function Na(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.style;return c = c || Ma(a), c && (g = c.getPropertyValue(b) || c[b], "" !== g || r.contains(a.ownerDocument, a) || (g = r.style(a, b)), !o.pixelMarginRight() && La.test(g) && Ka.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 !== g ? g + "" : g;
  }function Oa(a, b) {
    return { get: function () {
        return a() ? void delete this.get : (this.get = b).apply(this, arguments);
      } };
  }var Pa = /^(none|table(?!-c[ea]).+)/,
      Qa = { position: "absolute", visibility: "hidden", display: "block" },
      Ra = { letterSpacing: "0", fontWeight: "400" },
      Sa = ["Webkit", "Moz", "ms"],
      Ta = d.createElement("div").style;function Ua(a) {
    if (a in Ta) return a;var b = a[0].toUpperCase() + a.slice(1),
        c = Sa.length;while (c--) if (a = Sa[c] + b, a in Ta) return a;
  }function Va(a, b, c) {
    var d = aa.exec(b);return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || "px") : b;
  }function Wa(a, b, c, d, e) {
    var f,
        g = 0;for (f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0; f < 4; f += 2) "margin" === c && (g += r.css(a, c + ba[f], !0, e)), d ? ("content" === c && (g -= r.css(a, "padding" + ba[f], !0, e)), "margin" !== c && (g -= r.css(a, "border" + ba[f] + "Width", !0, e))) : (g += r.css(a, "padding" + ba[f], !0, e), "padding" !== c && (g += r.css(a, "border" + ba[f] + "Width", !0, e)));return g;
  }function Xa(a, b, c) {
    var d,
        e = !0,
        f = Ma(a),
        g = "border-box" === r.css(a, "boxSizing", !1, f);if (a.getClientRects().length && (d = a.getBoundingClientRect()[b]), d <= 0 || null == d) {
      if (d = Na(a, b, f), (d < 0 || null == d) && (d = a.style[b]), La.test(d)) return d;e = g && (o.boxSizingReliable() || d === a.style[b]), d = parseFloat(d) || 0;
    }return d + Wa(a, b, c || (g ? "border" : "content"), e, f) + "px";
  }r.extend({ cssHooks: { opacity: { get: function (a, b) {
          if (b) {
            var c = Na(a, "opacity");return "" === c ? "1" : c;
          }
        } } }, cssNumber: { animationIterationCount: !0, columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": "cssFloat" }, style: function (a, b, c, d) {
      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
        var e,
            f,
            g,
            h = r.camelCase(b),
            i = a.style;return b = r.cssProps[h] || (r.cssProps[h] = Ua(h) || h), g = r.cssHooks[b] || r.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = typeof c, "string" === f && (e = aa.exec(c)) && e[1] && (c = ea(a, b, e), f = "number"), null != c && c === c && ("number" === f && (c += e && e[3] || (r.cssNumber[h] ? "" : "px")), o.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), void 0);
      }
    }, css: function (a, b, c, d) {
      var e,
          f,
          g,
          h = r.camelCase(b);return b = r.cssProps[h] || (r.cssProps[h] = Ua(h) || h), g = r.cssHooks[b] || r.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = Na(a, b, d)), "normal" === e && b in Ra && (e = Ra[b]), "" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e;
    } }), r.each(["height", "width"], function (a, b) {
    r.cssHooks[b] = { get: function (a, c, d) {
        if (c) return !Pa.test(r.css(a, "display")) || a.getClientRects().length && a.getBoundingClientRect().width ? Xa(a, b, d) : da(a, Qa, function () {
          return Xa(a, b, d);
        });
      }, set: function (a, c, d) {
        var e,
            f = d && Ma(a),
            g = d && Wa(a, b, d, "border-box" === r.css(a, "boxSizing", !1, f), f);return g && (e = aa.exec(c)) && "px" !== (e[3] || "px") && (a.style[b] = c, c = r.css(a, b)), Va(a, c, g);
      } };
  }), r.cssHooks.marginLeft = Oa(o.reliableMarginLeft, function (a, b) {
    if (b) return (parseFloat(Na(a, "marginLeft")) || a.getBoundingClientRect().left - da(a, { marginLeft: 0 }, function () {
      return a.getBoundingClientRect().left;
    })) + "px";
  }), r.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
    r.cssHooks[a + b] = { expand: function (c) {
        for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; d < 4; d++) e[a + ba[d] + b] = f[d] || f[d - 2] || f[0];return e;
      } }, Ka.test(a) || (r.cssHooks[a + b].set = Va);
  }), r.fn.extend({ css: function (a, b) {
      return S(this, function (a, b, c) {
        var d,
            e,
            f = {},
            g = 0;if (r.isArray(b)) {
          for (d = Ma(a), e = b.length; g < e; g++) f[b[g]] = r.css(a, b[g], !1, d);return f;
        }return void 0 !== c ? r.style(a, b, c) : r.css(a, b);
      }, a, b, arguments.length > 1);
    } });function Ya(a, b, c, d, e) {
    return new Ya.prototype.init(a, b, c, d, e);
  }r.Tween = Ya, Ya.prototype = { constructor: Ya, init: function (a, b, c, d, e, f) {
      this.elem = a, this.prop = c, this.easing = e || r.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (r.cssNumber[c] ? "" : "px");
    }, cur: function () {
      var a = Ya.propHooks[this.prop];return a && a.get ? a.get(this) : Ya.propHooks._default.get(this);
    }, run: function (a) {
      var b,
          c = Ya.propHooks[this.prop];return this.options.duration ? this.pos = b = r.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Ya.propHooks._default.set(this), this;
    } }, Ya.prototype.init.prototype = Ya.prototype, Ya.propHooks = { _default: { get: function (a) {
        var b;return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = r.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0);
      }, set: function (a) {
        r.fx.step[a.prop] ? r.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[r.cssProps[a.prop]] && !r.cssHooks[a.prop] ? a.elem[a.prop] = a.now : r.style(a.elem, a.prop, a.now + a.unit);
      } } }, Ya.propHooks.scrollTop = Ya.propHooks.scrollLeft = { set: function (a) {
      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
    } }, r.easing = { linear: function (a) {
      return a;
    }, swing: function (a) {
      return .5 - Math.cos(a * Math.PI) / 2;
    }, _default: "swing" }, r.fx = Ya.prototype.init, r.fx.step = {};var Za,
      $a,
      _a = /^(?:toggle|show|hide)$/,
      ab = /queueHooks$/;function bb() {
    $a && (a.requestAnimationFrame(bb), r.fx.tick());
  }function cb() {
    return a.setTimeout(function () {
      Za = void 0;
    }), Za = r.now();
  }function db(a, b) {
    var c,
        d = 0,
        e = { height: a };for (b = b ? 1 : 0; d < 4; d += 2 - b) c = ba[d], e["margin" + c] = e["padding" + c] = a;return b && (e.opacity = e.width = a), e;
  }function eb(a, b, c) {
    for (var d, e = (hb.tweeners[b] || []).concat(hb.tweeners["*"]), f = 0, g = e.length; f < g; f++) if (d = e[f].call(c, b, a)) return d;
  }function fb(a, b, c) {
    var d,
        e,
        f,
        g,
        h,
        i,
        j,
        k,
        l = "width" in b || "height" in b,
        m = this,
        n = {},
        o = a.style,
        p = a.nodeType && ca(a),
        q = V.get(a, "fxshow");c.queue || (g = r._queueHooks(a, "fx"), null == g.unqueued && (g.unqueued = 0, h = g.empty.fire, g.empty.fire = function () {
      g.unqueued || h();
    }), g.unqueued++, m.always(function () {
      m.always(function () {
        g.unqueued--, r.queue(a, "fx").length || g.empty.fire();
      });
    }));for (d in b) if (e = b[d], _a.test(e)) {
      if (delete b[d], f = f || "toggle" === e, e === (p ? "hide" : "show")) {
        if ("show" !== e || !q || void 0 === q[d]) continue;p = !0;
      }n[d] = q && q[d] || r.style(a, d);
    }if (i = !r.isEmptyObject(b), i || !r.isEmptyObject(n)) {
      l && 1 === a.nodeType && (c.overflow = [o.overflow, o.overflowX, o.overflowY], j = q && q.display, null == j && (j = V.get(a, "display")), k = r.css(a, "display"), "none" === k && (j ? k = j : (ha([a], !0), j = a.style.display || j, k = r.css(a, "display"), ha([a]))), ("inline" === k || "inline-block" === k && null != j) && "none" === r.css(a, "float") && (i || (m.done(function () {
        o.display = j;
      }), null == j && (k = o.display, j = "none" === k ? "" : k)), o.display = "inline-block")), c.overflow && (o.overflow = "hidden", m.always(function () {
        o.overflow = c.overflow[0], o.overflowX = c.overflow[1], o.overflowY = c.overflow[2];
      })), i = !1;for (d in n) i || (q ? "hidden" in q && (p = q.hidden) : q = V.access(a, "fxshow", { display: j }), f && (q.hidden = !p), p && ha([a], !0), m.done(function () {
        p || ha([a]), V.remove(a, "fxshow");for (d in n) r.style(a, d, n[d]);
      })), i = eb(p ? q[d] : 0, d, m), d in q || (q[d] = i.start, p && (i.end = i.start, i.start = 0));
    }
  }function gb(a, b) {
    var c, d, e, f, g;for (c in a) if (d = r.camelCase(c), e = b[d], f = a[c], r.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = r.cssHooks[d], g && "expand" in g) {
      f = g.expand(f), delete a[d];for (c in f) c in a || (a[c] = f[c], b[c] = e);
    } else b[d] = e;
  }function hb(a, b, c) {
    var d,
        e,
        f = 0,
        g = hb.prefilters.length,
        h = r.Deferred().always(function () {
      delete i.elem;
    }),
        i = function () {
      if (e) return !1;for (var b = Za || cb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; g < i; g++) j.tweens[g].run(f);return h.notifyWith(a, [j, f, c]), f < 1 && i ? c : (h.resolveWith(a, [j]), !1);
    },
        j = h.promise({ elem: a, props: r.extend({}, b), opts: r.extend(!0, { specialEasing: {}, easing: r.easing._default }, c), originalProperties: b, originalOptions: c, startTime: Za || cb(), duration: c.duration, tweens: [], createTween: function (b, c) {
        var d = r.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);return j.tweens.push(d), d;
      }, stop: function (b) {
        var c = 0,
            d = b ? j.tweens.length : 0;if (e) return this;for (e = !0; c < d; c++) j.tweens[c].run(1);return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this;
      } }),
        k = j.props;for (gb(k, j.opts.specialEasing); f < g; f++) if (d = hb.prefilters[f].call(j, a, k, j.opts)) return r.isFunction(d.stop) && (r._queueHooks(j.elem, j.opts.queue).stop = r.proxy(d.stop, d)), d;return r.map(k, eb, j), r.isFunction(j.opts.start) && j.opts.start.call(a, j), r.fx.timer(r.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
  }r.Animation = r.extend(hb, { tweeners: { "*": [function (a, b) {
        var c = this.createTween(a, b);return ea(c.elem, a, aa.exec(b), c), c;
      }] }, tweener: function (a, b) {
      r.isFunction(a) ? (b = a, a = ["*"]) : a = a.match(K);for (var c, d = 0, e = a.length; d < e; d++) c = a[d], hb.tweeners[c] = hb.tweeners[c] || [], hb.tweeners[c].unshift(b);
    }, prefilters: [fb], prefilter: function (a, b) {
      b ? hb.prefilters.unshift(a) : hb.prefilters.push(a);
    } }), r.speed = function (a, b, c) {
    var e = a && "object" == typeof a ? r.extend({}, a) : { complete: c || !c && b || r.isFunction(a) && a, duration: a, easing: c && b || b && !r.isFunction(b) && b };return r.fx.off || d.hidden ? e.duration = 0 : "number" != typeof e.duration && (e.duration in r.fx.speeds ? e.duration = r.fx.speeds[e.duration] : e.duration = r.fx.speeds._default), null != e.queue && e.queue !== !0 || (e.queue = "fx"), e.old = e.complete, e.complete = function () {
      r.isFunction(e.old) && e.old.call(this), e.queue && r.dequeue(this, e.queue);
    }, e;
  }, r.fn.extend({ fadeTo: function (a, b, c, d) {
      return this.filter(ca).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);
    }, animate: function (a, b, c, d) {
      var e = r.isEmptyObject(a),
          f = r.speed(b, c, d),
          g = function () {
        var b = hb(this, r.extend({}, a), f);(e || V.get(this, "finish")) && b.stop(!0);
      };return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
    }, stop: function (a, b, c) {
      var d = function (a) {
        var b = a.stop;delete a.stop, b(c);
      };return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
        var b = !0,
            e = null != a && a + "queueHooks",
            f = r.timers,
            g = V.get(this);if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) g[e] && g[e].stop && ab.test(e) && d(g[e]);for (e = f.length; e--;) f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));!b && c || r.dequeue(this, a);
      });
    }, finish: function (a) {
      return a !== !1 && (a = a || "fx"), this.each(function () {
        var b,
            c = V.get(this),
            d = c[a + "queue"],
            e = c[a + "queueHooks"],
            f = r.timers,
            g = d ? d.length : 0;for (c.finish = !0, r.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));for (b = 0; b < g; b++) d[b] && d[b].finish && d[b].finish.call(this);delete c.finish;
      });
    } }), r.each(["toggle", "show", "hide"], function (a, b) {
    var c = r.fn[b];r.fn[b] = function (a, d, e) {
      return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(db(b, !0), a, d, e);
    };
  }), r.each({ slideDown: db("show"), slideUp: db("hide"), slideToggle: db("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {
    r.fn[a] = function (a, c, d) {
      return this.animate(b, a, c, d);
    };
  }), r.timers = [], r.fx.tick = function () {
    var a,
        b = 0,
        c = r.timers;for (Za = r.now(); b < c.length; b++) a = c[b], a() || c[b] !== a || c.splice(b--, 1);c.length || r.fx.stop(), Za = void 0;
  }, r.fx.timer = function (a) {
    r.timers.push(a), a() ? r.fx.start() : r.timers.pop();
  }, r.fx.interval = 13, r.fx.start = function () {
    $a || ($a = a.requestAnimationFrame ? a.requestAnimationFrame(bb) : a.setInterval(r.fx.tick, r.fx.interval));
  }, r.fx.stop = function () {
    a.cancelAnimationFrame ? a.cancelAnimationFrame($a) : a.clearInterval($a), $a = null;
  }, r.fx.speeds = { slow: 600, fast: 200, _default: 400 }, r.fn.delay = function (b, c) {
    return b = r.fx ? r.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function (c, d) {
      var e = a.setTimeout(c, b);d.stop = function () {
        a.clearTimeout(e);
      };
    });
  }, function () {
    var a = d.createElement("input"),
        b = d.createElement("select"),
        c = b.appendChild(d.createElement("option"));a.type = "checkbox", o.checkOn = "" !== a.value, o.optSelected = c.selected, a = d.createElement("input"), a.value = "t", a.type = "radio", o.radioValue = "t" === a.value;
  }();var ib,
      jb = r.expr.attrHandle;r.fn.extend({ attr: function (a, b) {
      return S(this, r.attr, a, b, arguments.length > 1);
    }, removeAttr: function (a) {
      return this.each(function () {
        r.removeAttr(this, a);
      });
    } }), r.extend({ attr: function (a, b, c) {
      var d,
          e,
          f = a.nodeType;if (3 !== f && 8 !== f && 2 !== f) return "undefined" == typeof a.getAttribute ? r.prop(a, b, c) : (1 === f && r.isXMLDoc(a) || (e = r.attrHooks[b.toLowerCase()] || (r.expr.match.bool.test(b) ? ib : void 0)), void 0 !== c ? null === c ? void r.removeAttr(a, b) : e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + ""), c) : e && "get" in e && null !== (d = e.get(a, b)) ? d : (d = r.find.attr(a, b), null == d ? void 0 : d));
    }, attrHooks: { type: { set: function (a, b) {
          if (!o.radioValue && "radio" === b && r.nodeName(a, "input")) {
            var c = a.value;return a.setAttribute("type", b), c && (a.value = c), b;
          }
        } } }, removeAttr: function (a, b) {
      var c,
          d = 0,
          e = b && b.match(K);if (e && 1 === a.nodeType) while (c = e[d++]) a.removeAttribute(c);
    } }), ib = { set: function (a, b, c) {
      return b === !1 ? r.removeAttr(a, c) : a.setAttribute(c, c), c;
    } }, r.each(r.expr.match.bool.source.match(/\w+/g), function (a, b) {
    var c = jb[b] || r.find.attr;jb[b] = function (a, b, d) {
      var e,
          f,
          g = b.toLowerCase();return d || (f = jb[g], jb[g] = e, e = null != c(a, b, d) ? g : null, jb[g] = f), e;
    };
  });var kb = /^(?:input|select|textarea|button)$/i,
      lb = /^(?:a|area)$/i;r.fn.extend({ prop: function (a, b) {
      return S(this, r.prop, a, b, arguments.length > 1);
    }, removeProp: function (a) {
      return this.each(function () {
        delete this[r.propFix[a] || a];
      });
    } }), r.extend({ prop: function (a, b, c) {
      var d,
          e,
          f = a.nodeType;if (3 !== f && 8 !== f && 2 !== f) return 1 === f && r.isXMLDoc(a) || (b = r.propFix[b] || b, e = r.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
    }, propHooks: { tabIndex: { get: function (a) {
          var b = r.find.attr(a, "tabindex");return b ? parseInt(b, 10) : kb.test(a.nodeName) || lb.test(a.nodeName) && a.href ? 0 : -1;
        } } }, propFix: { "for": "htmlFor", "class": "className" } }), o.optSelected || (r.propHooks.selected = { get: function (a) {
      var b = a.parentNode;return b && b.parentNode && b.parentNode.selectedIndex, null;
    }, set: function (a) {
      var b = a.parentNode;b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex);
    } }), r.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    r.propFix[this.toLowerCase()] = this;
  });function mb(a) {
    var b = a.match(K) || [];return b.join(" ");
  }function nb(a) {
    return a.getAttribute && a.getAttribute("class") || "";
  }r.fn.extend({ addClass: function (a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h,
          i = 0;if (r.isFunction(a)) return this.each(function (b) {
        r(this).addClass(a.call(this, b, nb(this)));
      });if ("string" == typeof a && a) {
        b = a.match(K) || [];while (c = this[i++]) if (e = nb(c), d = 1 === c.nodeType && " " + mb(e) + " ") {
          g = 0;while (f = b[g++]) d.indexOf(" " + f + " ") < 0 && (d += f + " ");h = mb(d), e !== h && c.setAttribute("class", h);
        }
      }return this;
    }, removeClass: function (a) {
      var b,
          c,
          d,
          e,
          f,
          g,
          h,
          i = 0;if (r.isFunction(a)) return this.each(function (b) {
        r(this).removeClass(a.call(this, b, nb(this)));
      });if (!arguments.length) return this.attr("class", "");if ("string" == typeof a && a) {
        b = a.match(K) || [];while (c = this[i++]) if (e = nb(c), d = 1 === c.nodeType && " " + mb(e) + " ") {
          g = 0;while (f = b[g++]) while (d.indexOf(" " + f + " ") > -1) d = d.replace(" " + f + " ", " ");h = mb(d), e !== h && c.setAttribute("class", h);
        }
      }return this;
    }, toggleClass: function (a, b) {
      var c = typeof a;return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : r.isFunction(a) ? this.each(function (c) {
        r(this).toggleClass(a.call(this, c, nb(this), b), b);
      }) : this.each(function () {
        var b, d, e, f;if ("string" === c) {
          d = 0, e = r(this), f = a.match(K) || [];while (b = f[d++]) e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
        } else void 0 !== a && "boolean" !== c || (b = nb(this), b && V.set(this, "__className__", b), this.setAttribute && this.setAttribute("class", b || a === !1 ? "" : V.get(this, "__className__") || ""));
      });
    }, hasClass: function (a) {
      var b,
          c,
          d = 0;b = " " + a + " ";while (c = this[d++]) if (1 === c.nodeType && (" " + mb(nb(c)) + " ").indexOf(b) > -1) return !0;return !1;
    } });var ob = /\r/g;r.fn.extend({ val: function (a) {
      var b,
          c,
          d,
          e = this[0];{
        if (arguments.length) return d = r.isFunction(a), this.each(function (c) {
          var e;1 === this.nodeType && (e = d ? a.call(this, c, r(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : r.isArray(e) && (e = r.map(e, function (a) {
            return null == a ? "" : a + "";
          })), b = r.valHooks[this.type] || r.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
        });if (e) return b = r.valHooks[e.type] || r.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(ob, "") : null == c ? "" : c);
      }
    } }), r.extend({ valHooks: { option: { get: function (a) {
          var b = r.find.attr(a, "value");return null != b ? b : mb(r.text(a));
        } }, select: { get: function (a) {
          var b,
              c,
              d,
              e = a.options,
              f = a.selectedIndex,
              g = "select-one" === a.type,
              h = g ? null : [],
              i = g ? f + 1 : e.length;for (d = f < 0 ? i : g ? f : 0; d < i; d++) if (c = e[d], (c.selected || d === f) && !c.disabled && (!c.parentNode.disabled || !r.nodeName(c.parentNode, "optgroup"))) {
            if (b = r(c).val(), g) return b;h.push(b);
          }return h;
        }, set: function (a, b) {
          var c,
              d,
              e = a.options,
              f = r.makeArray(b),
              g = e.length;while (g--) d = e[g], (d.selected = r.inArray(r.valHooks.option.get(d), f) > -1) && (c = !0);return c || (a.selectedIndex = -1), f;
        } } } }), r.each(["radio", "checkbox"], function () {
    r.valHooks[this] = { set: function (a, b) {
        if (r.isArray(b)) return a.checked = r.inArray(r(a).val(), b) > -1;
      } }, o.checkOn || (r.valHooks[this].get = function (a) {
      return null === a.getAttribute("value") ? "on" : a.value;
    });
  });var pb = /^(?:focusinfocus|focusoutblur)$/;r.extend(r.event, { trigger: function (b, c, e, f) {
      var g,
          h,
          i,
          j,
          k,
          m,
          n,
          o = [e || d],
          p = l.call(b, "type") ? b.type : b,
          q = l.call(b, "namespace") ? b.namespace.split(".") : [];if (h = i = e = e || d, 3 !== e.nodeType && 8 !== e.nodeType && !pb.test(p + r.event.triggered) && (p.indexOf(".") > -1 && (q = p.split("."), p = q.shift(), q.sort()), k = p.indexOf(":") < 0 && "on" + p, b = b[r.expando] ? b : new r.Event(p, "object" == typeof b && b), b.isTrigger = f ? 2 : 3, b.namespace = q.join("."), b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = e), c = null == c ? [b] : r.makeArray(c, [b]), n = r.event.special[p] || {}, f || !n.trigger || n.trigger.apply(e, c) !== !1)) {
        if (!f && !n.noBubble && !r.isWindow(e)) {
          for (j = n.delegateType || p, pb.test(j + p) || (h = h.parentNode); h; h = h.parentNode) o.push(h), i = h;i === (e.ownerDocument || d) && o.push(i.defaultView || i.parentWindow || a);
        }g = 0;while ((h = o[g++]) && !b.isPropagationStopped()) b.type = g > 1 ? j : n.bindType || p, m = (V.get(h, "events") || {})[b.type] && V.get(h, "handle"), m && m.apply(h, c), m = k && h[k], m && m.apply && T(h) && (b.result = m.apply(h, c), b.result === !1 && b.preventDefault());return b.type = p, f || b.isDefaultPrevented() || n._default && n._default.apply(o.pop(), c) !== !1 || !T(e) || k && r.isFunction(e[p]) && !r.isWindow(e) && (i = e[k], i && (e[k] = null), r.event.triggered = p, e[p](), r.event.triggered = void 0, i && (e[k] = i)), b.result;
      }
    }, simulate: function (a, b, c) {
      var d = r.extend(new r.Event(), c, { type: a, isSimulated: !0 });r.event.trigger(d, null, b);
    } }), r.fn.extend({ trigger: function (a, b) {
      return this.each(function () {
        r.event.trigger(a, b, this);
      });
    }, triggerHandler: function (a, b) {
      var c = this[0];if (c) return r.event.trigger(a, b, c, !0);
    } }), r.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (a, b) {
    r.fn[b] = function (a, c) {
      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
    };
  }), r.fn.extend({ hover: function (a, b) {
      return this.mouseenter(a).mouseleave(b || a);
    } }), o.focusin = "onfocusin" in a, o.focusin || r.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
    var c = function (a) {
      r.event.simulate(b, a.target, r.event.fix(a));
    };r.event.special[b] = { setup: function () {
        var d = this.ownerDocument || this,
            e = V.access(d, b);e || d.addEventListener(a, c, !0), V.access(d, b, (e || 0) + 1);
      }, teardown: function () {
        var d = this.ownerDocument || this,
            e = V.access(d, b) - 1;e ? V.access(d, b, e) : (d.removeEventListener(a, c, !0), V.remove(d, b));
      } };
  });var qb = a.location,
      rb = r.now(),
      sb = /\?/;r.parseXML = function (b) {
    var c;if (!b || "string" != typeof b) return null;try {
      c = new a.DOMParser().parseFromString(b, "text/xml");
    } catch (d) {
      c = void 0;
    }return c && !c.getElementsByTagName("parsererror").length || r.error("Invalid XML: " + b), c;
  };var tb = /\[\]$/,
      ub = /\r?\n/g,
      vb = /^(?:submit|button|image|reset|file)$/i,
      wb = /^(?:input|select|textarea|keygen)/i;function xb(a, b, c, d) {
    var e;if (r.isArray(b)) r.each(b, function (b, e) {
      c || tb.test(a) ? d(a, e) : xb(a + "[" + ("object" == typeof e && null != e ? b : "") + "]", e, c, d);
    });else if (c || "object" !== r.type(b)) d(a, b);else for (e in b) xb(a + "[" + e + "]", b[e], c, d);
  }r.param = function (a, b) {
    var c,
        d = [],
        e = function (a, b) {
      var c = r.isFunction(b) ? b() : b;d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(null == c ? "" : c);
    };if (r.isArray(a) || a.jquery && !r.isPlainObject(a)) r.each(a, function () {
      e(this.name, this.value);
    });else for (c in a) xb(c, a[c], b, e);return d.join("&");
  }, r.fn.extend({ serialize: function () {
      return r.param(this.serializeArray());
    }, serializeArray: function () {
      return this.map(function () {
        var a = r.prop(this, "elements");return a ? r.makeArray(a) : this;
      }).filter(function () {
        var a = this.type;return this.name && !r(this).is(":disabled") && wb.test(this.nodeName) && !vb.test(a) && (this.checked || !ia.test(a));
      }).map(function (a, b) {
        var c = r(this).val();return null == c ? null : r.isArray(c) ? r.map(c, function (a) {
          return { name: b.name, value: a.replace(ub, "\r\n") };
        }) : { name: b.name, value: c.replace(ub, "\r\n") };
      }).get();
    } });var yb = /%20/g,
      zb = /#.*$/,
      Ab = /([?&])_=[^&]*/,
      Bb = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      Cb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      Db = /^(?:GET|HEAD)$/,
      Eb = /^\/\//,
      Fb = {},
      Gb = {},
      Hb = "*/".concat("*"),
      Ib = d.createElement("a");Ib.href = qb.href;function Jb(a) {
    return function (b, c) {
      "string" != typeof b && (c = b, b = "*");var d,
          e = 0,
          f = b.toLowerCase().match(K) || [];if (r.isFunction(c)) while (d = f[e++]) "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
    };
  }function Kb(a, b, c, d) {
    var e = {},
        f = a === Gb;function g(h) {
      var i;return e[h] = !0, r.each(a[h] || [], function (a, h) {
        var j = h(b, c, d);return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
      }), i;
    }return g(b.dataTypes[0]) || !e["*"] && g("*");
  }function Lb(a, b) {
    var c,
        d,
        e = r.ajaxSettings.flatOptions || {};for (c in b) void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);return d && r.extend(!0, a, d), a;
  }function Mb(a, b, c) {
    var d,
        e,
        f,
        g,
        h = a.contents,
        i = a.dataTypes;while ("*" === i[0]) i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));if (d) for (e in h) if (h[e] && h[e].test(d)) {
      i.unshift(e);break;
    }if (i[0] in c) f = i[0];else {
      for (e in c) {
        if (!i[0] || a.converters[e + " " + i[0]]) {
          f = e;break;
        }g || (g = e);
      }f = f || g;
    }if (f) return f !== i[0] && i.unshift(f), c[f];
  }function Nb(a, b, c, d) {
    var e,
        f,
        g,
        h,
        i,
        j = {},
        k = a.dataTypes.slice();if (k[1]) for (g in a.converters) j[g.toLowerCase()] = a.converters[g];f = k.shift();while (f) if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {
      if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
        g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));break;
      }if (g !== !0) if (g && a["throws"]) b = g(b);else try {
        b = g(b);
      } catch (l) {
        return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f };
      }
    }return { state: "success", data: b };
  }r.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: qb.href, type: "GET", isLocal: Cb.test(qb.protocol), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Hb, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /\bxml\b/, html: /\bhtml/, json: /\bjson\b/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": JSON.parse, "text xml": r.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function (a, b) {
      return b ? Lb(Lb(a, r.ajaxSettings), b) : Lb(r.ajaxSettings, a);
    }, ajaxPrefilter: Jb(Fb), ajaxTransport: Jb(Gb), ajax: function (b, c) {
      "object" == typeof b && (c = b, b = void 0), c = c || {};var e,
          f,
          g,
          h,
          i,
          j,
          k,
          l,
          m,
          n,
          o = r.ajaxSetup({}, c),
          p = o.context || o,
          q = o.context && (p.nodeType || p.jquery) ? r(p) : r.event,
          s = r.Deferred(),
          t = r.Callbacks("once memory"),
          u = o.statusCode || {},
          v = {},
          w = {},
          x = "canceled",
          y = { readyState: 0, getResponseHeader: function (a) {
          var b;if (k) {
            if (!h) {
              h = {};while (b = Bb.exec(g)) h[b[1].toLowerCase()] = b[2];
            }b = h[a.toLowerCase()];
          }return null == b ? null : b;
        }, getAllResponseHeaders: function () {
          return k ? g : null;
        }, setRequestHeader: function (a, b) {
          return null == k && (a = w[a.toLowerCase()] = w[a.toLowerCase()] || a, v[a] = b), this;
        }, overrideMimeType: function (a) {
          return null == k && (o.mimeType = a), this;
        }, statusCode: function (a) {
          var b;if (a) if (k) y.always(a[y.status]);else for (b in a) u[b] = [u[b], a[b]];return this;
        }, abort: function (a) {
          var b = a || x;return e && e.abort(b), A(0, b), this;
        } };if (s.promise(y), o.url = ((b || o.url || qb.href) + "").replace(Eb, qb.protocol + "//"), o.type = c.method || c.type || o.method || o.type, o.dataTypes = (o.dataType || "*").toLowerCase().match(K) || [""], null == o.crossDomain) {
        j = d.createElement("a");try {
          j.href = o.url, j.href = j.href, o.crossDomain = Ib.protocol + "//" + Ib.host != j.protocol + "//" + j.host;
        } catch (z) {
          o.crossDomain = !0;
        }
      }if (o.data && o.processData && "string" != typeof o.data && (o.data = r.param(o.data, o.traditional)), Kb(Fb, o, c, y), k) return y;l = r.event && o.global, l && 0 === r.active++ && r.event.trigger("ajaxStart"), o.type = o.type.toUpperCase(), o.hasContent = !Db.test(o.type), f = o.url.replace(zb, ""), o.hasContent ? o.data && o.processData && 0 === (o.contentType || "").indexOf("application/x-www-form-urlencoded") && (o.data = o.data.replace(yb, "+")) : (n = o.url.slice(f.length), o.data && (f += (sb.test(f) ? "&" : "?") + o.data, delete o.data), o.cache === !1 && (f = f.replace(Ab, "$1"), n = (sb.test(f) ? "&" : "?") + "_=" + rb++ + n), o.url = f + n), o.ifModified && (r.lastModified[f] && y.setRequestHeader("If-Modified-Since", r.lastModified[f]), r.etag[f] && y.setRequestHeader("If-None-Match", r.etag[f])), (o.data && o.hasContent && o.contentType !== !1 || c.contentType) && y.setRequestHeader("Content-Type", o.contentType), y.setRequestHeader("Accept", o.dataTypes[0] && o.accepts[o.dataTypes[0]] ? o.accepts[o.dataTypes[0]] + ("*" !== o.dataTypes[0] ? ", " + Hb + "; q=0.01" : "") : o.accepts["*"]);for (m in o.headers) y.setRequestHeader(m, o.headers[m]);if (o.beforeSend && (o.beforeSend.call(p, y, o) === !1 || k)) return y.abort();if (x = "abort", t.add(o.complete), y.done(o.success), y.fail(o.error), e = Kb(Gb, o, c, y)) {
        if (y.readyState = 1, l && q.trigger("ajaxSend", [y, o]), k) return y;o.async && o.timeout > 0 && (i = a.setTimeout(function () {
          y.abort("timeout");
        }, o.timeout));try {
          k = !1, e.send(v, A);
        } catch (z) {
          if (k) throw z;A(-1, z);
        }
      } else A(-1, "No Transport");function A(b, c, d, h) {
        var j,
            m,
            n,
            v,
            w,
            x = c;k || (k = !0, i && a.clearTimeout(i), e = void 0, g = h || "", y.readyState = b > 0 ? 4 : 0, j = b >= 200 && b < 300 || 304 === b, d && (v = Mb(o, y, d)), v = Nb(o, v, y, j), j ? (o.ifModified && (w = y.getResponseHeader("Last-Modified"), w && (r.lastModified[f] = w), w = y.getResponseHeader("etag"), w && (r.etag[f] = w)), 204 === b || "HEAD" === o.type ? x = "nocontent" : 304 === b ? x = "notmodified" : (x = v.state, m = v.data, n = v.error, j = !n)) : (n = x, !b && x || (x = "error", b < 0 && (b = 0))), y.status = b, y.statusText = (c || x) + "", j ? s.resolveWith(p, [m, x, y]) : s.rejectWith(p, [y, x, n]), y.statusCode(u), u = void 0, l && q.trigger(j ? "ajaxSuccess" : "ajaxError", [y, o, j ? m : n]), t.fireWith(p, [y, x]), l && (q.trigger("ajaxComplete", [y, o]), --r.active || r.event.trigger("ajaxStop")));
      }return y;
    }, getJSON: function (a, b, c) {
      return r.get(a, b, c, "json");
    }, getScript: function (a, b) {
      return r.get(a, void 0, b, "script");
    } }), r.each(["get", "post"], function (a, b) {
    r[b] = function (a, c, d, e) {
      return r.isFunction(c) && (e = e || d, d = c, c = void 0), r.ajax(r.extend({ url: a, type: b, dataType: e, data: c, success: d }, r.isPlainObject(a) && a));
    };
  }), r._evalUrl = function (a) {
    return r.ajax({ url: a, type: "GET", dataType: "script", cache: !0, async: !1, global: !1, "throws": !0 });
  }, r.fn.extend({ wrapAll: function (a) {
      var b;return this[0] && (r.isFunction(a) && (a = a.call(this[0])), b = r(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
        var a = this;while (a.firstElementChild) a = a.firstElementChild;return a;
      }).append(this)), this;
    }, wrapInner: function (a) {
      return r.isFunction(a) ? this.each(function (b) {
        r(this).wrapInner(a.call(this, b));
      }) : this.each(function () {
        var b = r(this),
            c = b.contents();c.length ? c.wrapAll(a) : b.append(a);
      });
    }, wrap: function (a) {
      var b = r.isFunction(a);return this.each(function (c) {
        r(this).wrapAll(b ? a.call(this, c) : a);
      });
    }, unwrap: function (a) {
      return this.parent(a).not("body").each(function () {
        r(this).replaceWith(this.childNodes);
      }), this;
    } }), r.expr.pseudos.hidden = function (a) {
    return !r.expr.pseudos.visible(a);
  }, r.expr.pseudos.visible = function (a) {
    return !!(a.offsetWidth || a.offsetHeight || a.getClientRects().length);
  }, r.ajaxSettings.xhr = function () {
    try {
      return new a.XMLHttpRequest();
    } catch (b) {}
  };var Ob = { 0: 200, 1223: 204 },
      Pb = r.ajaxSettings.xhr();o.cors = !!Pb && "withCredentials" in Pb, o.ajax = Pb = !!Pb, r.ajaxTransport(function (b) {
    var c, d;if (o.cors || Pb && !b.crossDomain) return { send: function (e, f) {
        var g,
            h = b.xhr();if (h.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields) for (g in b.xhrFields) h[g] = b.xhrFields[g];b.mimeType && h.overrideMimeType && h.overrideMimeType(b.mimeType), b.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest");for (g in e) h.setRequestHeader(g, e[g]);c = function (a) {
          return function () {
            c && (c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null, "abort" === a ? h.abort() : "error" === a ? "number" != typeof h.status ? f(0, "error") : f(h.status, h.statusText) : f(Ob[h.status] || h.status, h.statusText, "text" !== (h.responseType || "text") || "string" != typeof h.responseText ? { binary: h.response } : { text: h.responseText }, h.getAllResponseHeaders()));
          };
        }, h.onload = c(), d = h.onerror = c("error"), void 0 !== h.onabort ? h.onabort = d : h.onreadystatechange = function () {
          4 === h.readyState && a.setTimeout(function () {
            c && d();
          });
        }, c = c("abort");try {
          h.send(b.hasContent && b.data || null);
        } catch (i) {
          if (c) throw i;
        }
      }, abort: function () {
        c && c();
      } };
  }), r.ajaxPrefilter(function (a) {
    a.crossDomain && (a.contents.script = !1);
  }), r.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /\b(?:java|ecma)script\b/ }, converters: { "text script": function (a) {
        return r.globalEval(a), a;
      } } }), r.ajaxPrefilter("script", function (a) {
    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET");
  }), r.ajaxTransport("script", function (a) {
    if (a.crossDomain) {
      var b, c;return { send: function (e, f) {
          b = r("<script>").prop({ charset: a.scriptCharset, src: a.url }).on("load error", c = function (a) {
            b.remove(), c = null, a && f("error" === a.type ? 404 : 200, a.type);
          }), d.head.appendChild(b[0]);
        }, abort: function () {
          c && c();
        } };
    }
  });var Qb = [],
      Rb = /(=)\?(?=&|$)|\?\?/;r.ajaxSetup({ jsonp: "callback", jsonpCallback: function () {
      var a = Qb.pop() || r.expando + "_" + rb++;return this[a] = !0, a;
    } }), r.ajaxPrefilter("json jsonp", function (b, c, d) {
    var e,
        f,
        g,
        h = b.jsonp !== !1 && (Rb.test(b.url) ? "url" : "string" == typeof b.data && 0 === (b.contentType || "").indexOf("application/x-www-form-urlencoded") && Rb.test(b.data) && "data");if (h || "jsonp" === b.dataTypes[0]) return e = b.jsonpCallback = r.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Rb, "$1" + e) : b.jsonp !== !1 && (b.url += (sb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
      return g || r.error(e + " was not called"), g[0];
    }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
      g = arguments;
    }, d.always(function () {
      void 0 === f ? r(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Qb.push(e)), g && r.isFunction(f) && f(g[0]), g = f = void 0;
    }), "script";
  }), o.createHTMLDocument = function () {
    var a = d.implementation.createHTMLDocument("").body;return a.innerHTML = "<form></form><form></form>", 2 === a.childNodes.length;
  }(), r.parseHTML = function (a, b, c) {
    if ("string" != typeof a) return [];"boolean" == typeof b && (c = b, b = !1);var e, f, g;return b || (o.createHTMLDocument ? (b = d.implementation.createHTMLDocument(""), e = b.createElement("base"), e.href = d.location.href, b.head.appendChild(e)) : b = d), f = B.exec(a), g = !c && [], f ? [b.createElement(f[1])] : (f = pa([a], b, g), g && g.length && r(g).remove(), r.merge([], f.childNodes));
  }, r.fn.load = function (a, b, c) {
    var d,
        e,
        f,
        g = this,
        h = a.indexOf(" ");return h > -1 && (d = mb(a.slice(h)), a = a.slice(0, h)), r.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (e = "POST"), g.length > 0 && r.ajax({ url: a, type: e || "GET", dataType: "html", data: b }).done(function (a) {
      f = arguments, g.html(d ? r("<div>").append(r.parseHTML(a)).find(d) : a);
    }).always(c && function (a, b) {
      g.each(function () {
        c.apply(this, f || [a.responseText, b, a]);
      });
    }), this;
  }, r.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
    r.fn[b] = function (a) {
      return this.on(b, a);
    };
  }), r.expr.pseudos.animated = function (a) {
    return r.grep(r.timers, function (b) {
      return a === b.elem;
    }).length;
  };function Sb(a) {
    return r.isWindow(a) ? a : 9 === a.nodeType && a.defaultView;
  }r.offset = { setOffset: function (a, b, c) {
      var d,
          e,
          f,
          g,
          h,
          i,
          j,
          k = r.css(a, "position"),
          l = r(a),
          m = {};"static" === k && (a.style.position = "relative"), h = l.offset(), f = r.css(a, "top"), i = r.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), r.isFunction(b) && (b = b.call(a, c, r.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m);
    } }, r.fn.extend({ offset: function (a) {
      if (arguments.length) return void 0 === a ? this : this.each(function (b) {
        r.offset.setOffset(this, a, b);
      });var b,
          c,
          d,
          e,
          f = this[0];if (f) return f.getClientRects().length ? (d = f.getBoundingClientRect(), d.width || d.height ? (e = f.ownerDocument, c = Sb(e), b = e.documentElement, { top: d.top + c.pageYOffset - b.clientTop, left: d.left + c.pageXOffset - b.clientLeft }) : d) : { top: 0, left: 0 };
    }, position: function () {
      if (this[0]) {
        var a,
            b,
            c = this[0],
            d = { top: 0, left: 0 };return "fixed" === r.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), r.nodeName(a[0], "html") || (d = a.offset()), d = { top: d.top + r.css(a[0], "borderTopWidth", !0), left: d.left + r.css(a[0], "borderLeftWidth", !0) }), { top: b.top - d.top - r.css(c, "marginTop", !0), left: b.left - d.left - r.css(c, "marginLeft", !0) };
      }
    }, offsetParent: function () {
      return this.map(function () {
        var a = this.offsetParent;while (a && "static" === r.css(a, "position")) a = a.offsetParent;return a || qa;
      });
    } }), r.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {
    var c = "pageYOffset" === b;r.fn[a] = function (d) {
      return S(this, function (a, d, e) {
        var f = Sb(a);return void 0 === e ? f ? f[b] : a[d] : void (f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e);
      }, a, d, arguments.length);
    };
  }), r.each(["top", "left"], function (a, b) {
    r.cssHooks[b] = Oa(o.pixelPosition, function (a, c) {
      if (c) return c = Na(a, b), La.test(c) ? r(a).position()[b] + "px" : c;
    });
  }), r.each({ Height: "height", Width: "width" }, function (a, b) {
    r.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {
      r.fn[d] = function (e, f) {
        var g = arguments.length && (c || "boolean" != typeof e),
            h = c || (e === !0 || f === !0 ? "margin" : "border");return S(this, function (b, c, e) {
          var f;return r.isWindow(b) ? 0 === d.indexOf("outer") ? b["inner" + a] : b.document.documentElement["client" + a] : 9 === b.nodeType ? (f = b.documentElement, Math.max(b.body["scroll" + a], f["scroll" + a], b.body["offset" + a], f["offset" + a], f["client" + a])) : void 0 === e ? r.css(b, c, h) : r.style(b, c, e, h);
        }, b, g ? e : void 0, g);
      };
    });
  }), r.fn.extend({ bind: function (a, b, c) {
      return this.on(a, null, b, c);
    }, unbind: function (a, b) {
      return this.off(a, null, b);
    }, delegate: function (a, b, c, d) {
      return this.on(b, a, c, d);
    }, undelegate: function (a, b, c) {
      return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
    } }), r.parseJSON = JSON.parse, "function" == typeof define && define.amd && define("jquery", [], function () {
    return r;
  });var Tb = a.jQuery,
      Ub = a.$;return r.noConflict = function (b) {
    return a.$ === r && (a.$ = Ub), b && a.jQuery === r && (a.jQuery = Tb), r;
  }, b || (a.jQuery = a.$ = r), r;
});
;/*!
 * jQuery Mousewheel 3.1.12
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
})(function ($) {

    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice = Array.prototype.slice,
        nullLowestDeltaTimeout,
        lowestDelta;

    if ($.event.fixHooks) {
        for (var i = toFix.length; i;) {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function () {
            if (this.addEventListener) {
                for (var i = toBind.length; i;) {
                    this.addEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function () {
            if (this.removeEventListener) {
                for (var i = toBind.length; i;) {
                    this.removeEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function (elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function (elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function (fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function (fn) {
            return this.unbind('mousewheel', fn);
        }
    });

    function handler(event) {
        var orgEvent = event || window.event,
            args = slice.call(arguments, 1),
            delta = 0,
            deltaX = 0,
            deltaY = 0,
            absDelta = 0,
            offsetX = 0,
            offsetY = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ('detail' in orgEvent) {
            deltaY = orgEvent.detail * -1;
        }
        if ('wheelDelta' in orgEvent) {
            deltaY = orgEvent.wheelDelta;
        }
        if ('wheelDeltaY' in orgEvent) {
            deltaY = orgEvent.wheelDeltaY;
        }
        if ('wheelDeltaX' in orgEvent) {
            deltaX = orgEvent.wheelDeltaX * -1;
        }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ('deltaY' in orgEvent) {
            deltaY = orgEvent.deltaY * -1;
            delta = deltaY;
        }
        if ('deltaX' in orgEvent) {
            deltaX = orgEvent.deltaX;
            if (deltaY === 0) {
                delta = deltaX * -1;
            }
        }

        // No change actually happened, no reason to go any further
        if (deltaY === 0 && deltaX === 0) {
            return;
        }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if (orgEvent.deltaMode === 1) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if (orgEvent.deltaMode === 2) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

        if (!lowestDelta || absDelta < lowestDelta) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
            // Divide all the things by 40!
            delta /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
        deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
        deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if (special.settings.normalizeOffset && this.getBoundingClientRect) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) {
            clearTimeout(nullLowestDeltaTimeout);
        }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }
});
;/*!
 * jScrollPane - v2.0.23 - 2016-01-28
 * http://jscrollpane.kelvinluck.com/
 *
 * Copyright (c) 2014 Kelvin Luck
 * Dual licensed under the MIT or GPL licenses.
 */

// Script: jScrollPane - cross browser customisable scrollbars
//
// *Version: 2.0.23, Last updated: 2016-01-28*
//
// Project Home - http://jscrollpane.kelvinluck.com/
// GitHub       - http://github.com/vitch/jScrollPane
// Source       - http://github.com/vitch/jScrollPane/raw/master/script/jquery.jscrollpane.js
// (Minified)   - http://github.com/vitch/jScrollPane/raw/master/script/jquery.jscrollpane.min.js
//
// About: License
//
// Copyright (c) 2014 Kelvin Luck
// Dual licensed under the MIT or GPL Version 2 licenses.
// http://jscrollpane.kelvinluck.com/MIT-LICENSE.txt
// http://jscrollpane.kelvinluck.com/GPL-LICENSE.txt
//
// About: Examples
//
// All examples and demos are available through the jScrollPane example site at:
// http://jscrollpane.kelvinluck.com/
//
// About: Support and Testing
//
// This plugin is tested on the browsers below and has been found to work reliably on them. If you run
// into a problem on one of the supported browsers then please visit the support section on the jScrollPane
// website (http://jscrollpane.kelvinluck.com/) for more information on getting support. You are also
// welcome to fork the project on GitHub if you can contribute a fix for a given issue.
//
// jQuery Versions - tested in 1.4.2+ - reported to work in 1.3.x
// Browsers Tested - Firefox 3.6.8, Safari 5, Opera 10.6, Chrome 5.0, IE 6, 7, 8
//
// About: Release History
//
// 2.0.23 - (2016-01-28) Various 
// 2.0.22 - (2015-04-25) Resolve a memory leak due to an event handler that isn't cleaned up in destroy (thanks @timjnh)
// 2.0.21 - (2015-02-24) Simplify UMD pattern: fixes browserify when loading jQuery outside of bundle
// 2.0.20 - (2014-10-23) Adds AMD support (thanks @carlosrberto) and support for overflow-x/overflow-y (thanks @darimpulso)
// 2.0.19 - (2013-11-16) Changes for more reliable scroll amount with latest mousewheel plugin (thanks @brandonaaron)
// 2.0.18 - (2013-10-23) Fix for issue with gutters and scrollToElement (thanks @Dubiy)
// 2.0.17 - (2013-08-17) Working correctly when box-sizing is set to border-box (thanks @pieht)
// 2.0.16 - (2013-07-30) Resetting left position when scroll is removed. Fixes #189
// 2.0.15 - (2013-07-29) Fixed issue with scrollToElement where the destX and destY are undefined.
// 2.0.14 - (2013-05-01) Updated to most recent mouse wheel plugin (see #106) and related changes for sensible scroll speed
// 2.0.13 - (2013-05-01) Switched to semver compatible version name
// 2.0.0beta12 - (2012-09-27) fix for jQuery 1.8+
// 2.0.0beta11 - (2012-05-14)
// 2.0.0beta10 - (2011-04-17) cleaner required size calculation, improved keyboard support, stickToBottom/Left, other small fixes
// 2.0.0beta9 - (2011-01-31) new API methods, bug fixes and correct keyboard support for FF/OSX
// 2.0.0beta8 - (2011-01-29) touchscreen support, improved keyboard support
// 2.0.0beta7 - (2011-01-23) scroll speed consistent (thanks Aivo Paas)
// 2.0.0beta6 - (2010-12-07) scrollToElement horizontal support
// 2.0.0beta5 - (2010-10-18) jQuery 1.4.3 support, various bug fixes
// 2.0.0beta4 - (2010-09-17) clickOnTrack support, bug fixes
// 2.0.0beta3 - (2010-08-27) Horizontal mousewheel, mwheelIntent, keyboard support, bug fixes
// 2.0.0beta2 - (2010-08-21) Bug fixes
// 2.0.0beta1 - (2010-08-17) Rewrite to follow modern best practices and enable horizontal scrolling, initially hidden
//							 elements and dynamically sized elements.
// 1.x - (2006-12-31 - 2010-07-31) Initial version, hosted at googlecode, deprecated

(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// Node/CommonJS style for Browserify
		module.exports = factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
})(function ($) {

	$.fn.jScrollPane = function (settings) {
		// JScrollPane "class" - public methods are available through $('selector').data('jsp')
		function JScrollPane(elem, s) {
			var settings,
			    jsp = this,
			    pane,
			    paneWidth,
			    paneHeight,
			    container,
			    scrollContainer,
			    contentWidth,
			    contentHeight,
			    percentInViewH,
			    percentInViewV,
			    isScrollableV,
			    isScrollableH,
			    verticalDrag,
			    dragMaxY,
			    verticalDragPosition,
			    horizontalDrag,
			    dragMaxX,
			    horizontalDragPosition,
			    verticalBar,
			    verticalTrack,
			    scrollbarWidth,
			    verticalTrackHeight,
			    verticalDragHeight,
			    arrowUp,
			    arrowDown,
			    horizontalBar,
			    horizontalTrack,
			    horizontalTrackWidth,
			    horizontalDragWidth,
			    arrowLeft,
			    arrowRight,
			    reinitialiseInterval,
			    originalPadding,
			    originalPaddingTotalWidth,
			    previousContentWidth,
			    wasAtTop = true,
			    wasAtLeft = true,
			    wasAtBottom = false,
			    wasAtRight = false,
			    originalElement = elem.clone(false, false).empty(),
			    mwEvent = $.fn.mwheelIntent ? 'mwheelIntent.jsp' : 'mousewheel.jsp';

			if (elem.css('box-sizing') === 'border-box') {
				originalPadding = 0;
				originalPaddingTotalWidth = 0;
			} else {
				originalPadding = elem.css('paddingTop') + ' ' + elem.css('paddingRight') + ' ' + elem.css('paddingBottom') + ' ' + elem.css('paddingLeft');
				originalPaddingTotalWidth = (parseInt(elem.css('paddingLeft'), 10) || 0) + (parseInt(elem.css('paddingRight'), 10) || 0);
			}

			function initialise(s) {

				var /*firstChild, lastChild, */isMaintainingPositon,
				    lastContentX,
				    lastContentY,
				    hasContainingSpaceChanged,
				    originalScrollTop,
				    originalScrollLeft,
				    maintainAtBottom = false,
				    maintainAtRight = false;

				settings = s;

				if (pane === undefined) {
					originalScrollTop = elem.scrollTop();
					originalScrollLeft = elem.scrollLeft();

					elem.css({
						overflow: 'hidden',
						padding: 0
					});
					// TODO: Deal with where width/ height is 0 as it probably means the element is hidden and we should
					// come back to it later and check once it is unhidden...
					paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
					paneHeight = elem.innerHeight();

					elem.width(paneWidth);

					pane = $('<div class="jspPane" />').css('padding', originalPadding).append(elem.children());
					container = $('<div class="jspContainer" />').css({
						'width': paneWidth + 'px',
						'height': paneHeight + 'px'
					}).append(pane).appendTo(elem);

					scrollContainer = elem.parent('.scroll-wrapper').find('.scroll-container');
					/*
     // Move any margins from the first and last children up to the container so they can still
     // collapse with neighbouring elements as they would before jScrollPane
     firstChild = pane.find(':first-child');
     lastChild = pane.find(':last-child');
     elem.css(
     	{
     		'margin-top': firstChild.css('margin-top'),
     		'margin-bottom': lastChild.css('margin-bottom')
     	}
     );
     firstChild.css('margin-top', 0);
     lastChild.css('margin-bottom', 0);
     */
				} else {
					elem.css('width', '');

					maintainAtBottom = settings.stickToBottom && isCloseToBottom();
					maintainAtRight = settings.stickToRight && isCloseToRight();

					hasContainingSpaceChanged = elem.innerWidth() + originalPaddingTotalWidth != paneWidth || elem.outerHeight() != paneHeight;

					if (hasContainingSpaceChanged) {
						paneWidth = elem.innerWidth() + originalPaddingTotalWidth;
						paneHeight = elem.innerHeight();
						container.css({
							width: paneWidth + 'px',
							height: paneHeight + 'px'
						});
					}

					// If nothing changed since last check...
					if (!hasContainingSpaceChanged && previousContentWidth == contentWidth && pane.outerHeight() == contentHeight) {
						elem.width(paneWidth);
						return;
					}
					previousContentWidth = contentWidth;

					pane.css('width', '');
					elem.width(paneWidth);

					scrollContainer.find('>.jspVerticalBar,>.jspHorizontalBar').remove().end();
				}

				pane.css('overflow', 'auto');
				if (s.contentWidth) {
					contentWidth = s.contentWidth;
				} else {
					contentWidth = pane[0].scrollWidth;
				}
				contentHeight = pane[0].scrollHeight;
				pane.css('overflow', '');

				percentInViewH = contentWidth / paneWidth;
				percentInViewV = contentHeight / paneHeight;
				isScrollableV = percentInViewV > 1;

				isScrollableH = percentInViewH > 1;

				//console.log(paneWidth, paneHeight, contentWidth, contentHeight, percentInViewH, percentInViewV, isScrollableH, isScrollableV);

				if (!(isScrollableH || isScrollableV)) {
					elem.removeClass('jspScrollable');
					pane.css({
						top: 0,
						left: 0,
						width: container.width() - originalPaddingTotalWidth
					});
					removeMousewheel();
					removeFocusHandler();
					removeKeyboardNav();
					removeClickOnTrack();
				} else {
					elem.addClass('jspScrollable');

					isMaintainingPositon = settings.maintainPosition && (verticalDragPosition || horizontalDragPosition);
					if (isMaintainingPositon) {
						lastContentX = contentPositionX();
						lastContentY = contentPositionY();
					}

					initialiseVerticalScroll();
					initialiseHorizontalScroll();
					resizeScrollbars();

					if (isMaintainingPositon) {
						scrollToX(maintainAtRight ? contentWidth - paneWidth : lastContentX, false);
						scrollToY(maintainAtBottom ? contentHeight - paneHeight : lastContentY, false);
					}

					initFocusHandler();
					initMousewheel();
					initTouch();

					if (settings.enableKeyboardNavigation) {
						initKeyboardNav();
					}
					if (settings.clickOnTrack) {
						initClickOnTrack();
					}

					observeHash();
					if (settings.hijackInternalLinks) {
						hijackInternalLinks();
					}
				}

				if (settings.autoReinitialise && !reinitialiseInterval) {
					reinitialiseInterval = setInterval(function () {
						initialise(settings);
					}, settings.autoReinitialiseDelay);
				} else if (!settings.autoReinitialise && reinitialiseInterval) {
					clearInterval(reinitialiseInterval);
				}

				originalScrollTop && elem.scrollTop(0) && scrollToY(originalScrollTop, false);
				originalScrollLeft && elem.scrollLeft(0) && scrollToX(originalScrollLeft, false);

				elem.trigger('jsp-initialised', [isScrollableH || isScrollableV]);
			}

			function initialiseVerticalScroll() {
				if (isScrollableV) {

					scrollContainer.append($('<div class="jspVerticalBar" />').append($('<div class="jspCap jspCapTop" />'), $('<div class="jspTrack" />').append($('<div class="jspDrag" />').append($('<div class="jspDragTop" />'), $('<div class="jspDragBottom" />'))), $('<div class="jspCap jspCapBottom" />')));

					verticalBar = scrollContainer.find('>.jspVerticalBar');
					verticalTrack = verticalBar.find('>.jspTrack');
					verticalDrag = verticalTrack.find('>.jspDrag');

					if (settings.showArrows) {
						arrowUp = $('<a class="jspArrow jspArrowUp" />').bind('mousedown.jsp', getArrowScroll(0, -1)).bind('click.jsp', nil);
						arrowDown = $('<a class="jspArrow jspArrowDown" />').bind('mousedown.jsp', getArrowScroll(0, 1)).bind('click.jsp', nil);
						if (settings.arrowScrollOnHover) {
							arrowUp.bind('mouseover.jsp', getArrowScroll(0, -1, arrowUp));
							arrowDown.bind('mouseover.jsp', getArrowScroll(0, 1, arrowDown));
						}

						appendArrows(verticalTrack, settings.verticalArrowPositions, arrowUp, arrowDown);
					}

					verticalTrackHeight = paneHeight - 80;
					scrollContainer.find('>.jspVerticalBar>.jspCap:visible,>.jspVerticalBar>.jspArrow').each(function () {
						verticalTrackHeight -= $(this).outerHeight();
					});

					verticalDrag.hover(function () {
						verticalDrag.addClass('jspHover');
					}, function () {
						verticalDrag.removeClass('jspHover');
					}).bind('mousedown.jsp', function (e) {
						// Stop IE from allowing text selection
						$('html').bind('dragstart.jsp selectstart.jsp', nil);

						verticalDrag.addClass('jspActive');

						var startY = e.pageY - verticalDrag.position().top;

						$('html').bind('mousemove.jsp', function (e) {
							positionDragY(e.pageY - startY, false);
						}).bind('mouseup.jsp mouseleave.jsp', cancelDrag);
						return false;
					});
					sizeVerticalScrollbar();
				}
			}

			function sizeVerticalScrollbar() {
				verticalTrack.height(verticalTrackHeight + 'px');
				verticalDragPosition = 0;
				scrollbarWidth = settings.verticalGutter + verticalTrack.outerWidth();

				// Make the pane thinner to allow for the vertical scrollbar
				pane.width(paneWidth - scrollbarWidth - originalPaddingTotalWidth);

				// Add margin to the left of the pane if scrollbars are on that side (to position
				// the scrollbar on the left or right set it's left or right property in CSS)
				try {
					if (verticalBar.position().left === 0) {
						pane.css('margin-left', scrollbarWidth + 'px');
					}
				} catch (err) {}
			}

			function initialiseHorizontalScroll() {
				if (isScrollableH) {

					scrollContainer.append($('<div class="jspHorizontalBar" />').append($('<div class="jspCap jspCapLeft" />'), $('<div class="jspTrack" />').append($('<div class="jspDrag" />').append($('<div class="jspDragLeft" />'), $('<div class="jspDragRight" />'))), $('<div class="jspCap jspCapRight" />')));

					horizontalBar = container.find('>.jspHorizontalBar');
					horizontalTrack = horizontalBar.find('>.jspTrack');
					horizontalDrag = horizontalTrack.find('>.jspDrag');

					if (settings.showArrows) {
						arrowLeft = $('<a class="jspArrow jspArrowLeft" />').bind('mousedown.jsp', getArrowScroll(-1, 0)).bind('click.jsp', nil);
						arrowRight = $('<a class="jspArrow jspArrowRight" />').bind('mousedown.jsp', getArrowScroll(1, 0)).bind('click.jsp', nil);
						if (settings.arrowScrollOnHover) {
							arrowLeft.bind('mouseover.jsp', getArrowScroll(-1, 0, arrowLeft));
							arrowRight.bind('mouseover.jsp', getArrowScroll(1, 0, arrowRight));
						}
						appendArrows(horizontalTrack, settings.horizontalArrowPositions, arrowLeft, arrowRight);
					}

					horizontalDrag.hover(function () {
						horizontalDrag.addClass('jspHover');
					}, function () {
						horizontalDrag.removeClass('jspHover');
					}).bind('mousedown.jsp', function (e) {
						// Stop IE from allowing text selection
						$('html').bind('dragstart.jsp selectstart.jsp', nil);

						horizontalDrag.addClass('jspActive');

						var startX = e.pageX - horizontalDrag.position().left;

						$('html').bind('mousemove.jsp', function (e) {
							positionDragX(e.pageX - startX, false);
						}).bind('mouseup.jsp mouseleave.jsp', cancelDrag);
						return false;
					});
					horizontalTrackWidth = container.innerWidth();
					sizeHorizontalScrollbar();
				}
			}

			function sizeHorizontalScrollbar() {
				scrollContainer.find('>.jspHorizontalBar>.jspCap:visible,>.jspHorizontalBar>.jspArrow').each(function () {
					horizontalTrackWidth -= $(this).outerWidth();
				});

				horizontalTrack.width(horizontalTrackWidth + 'px');
				horizontalDragPosition = 0;
			}

			function resizeScrollbars() {
				if (isScrollableH && isScrollableV) {
					var horizontalTrackHeight = horizontalTrack.outerHeight(),
					    verticalTrackWidth = verticalTrack.outerWidth();
					verticalTrackHeight -= horizontalTrackHeight;
					$(horizontalBar).find('>.jspCap:visible,>.jspArrow').each(function () {
						horizontalTrackWidth += $(this).outerWidth();
					});
					horizontalTrackWidth -= verticalTrackWidth;
					paneHeight -= verticalTrackWidth;
					paneWidth -= horizontalTrackHeight;
					horizontalTrack.parent().append($('<div class="jspCorner" />').css('width', horizontalTrackHeight + 'px'));
					sizeVerticalScrollbar();
					sizeHorizontalScrollbar();
				}
				// reflow content
				if (isScrollableH) {
					pane.width(container.outerWidth() - originalPaddingTotalWidth + 'px');
				}
				contentHeight = pane.outerHeight();
				percentInViewV = contentHeight / paneHeight;

				if (isScrollableH) {
					horizontalDragWidth = Math.ceil(1 / percentInViewH * horizontalTrackWidth);
					if (horizontalDragWidth > settings.horizontalDragMaxWidth) {
						horizontalDragWidth = settings.horizontalDragMaxWidth;
					} else if (horizontalDragWidth < settings.horizontalDragMinWidth) {
						horizontalDragWidth = settings.horizontalDragMinWidth;
					}
					horizontalDrag.width(horizontalDragWidth + 'px');
					dragMaxX = horizontalTrackWidth - horizontalDragWidth;
					_positionDragX(horizontalDragPosition); // To update the state for the arrow buttons
				}
				if (isScrollableV) {
					verticalDragHeight = Math.ceil(1 / percentInViewV * verticalTrackHeight);
					if (verticalDragHeight > settings.verticalDragMaxHeight) {
						verticalDragHeight = settings.verticalDragMaxHeight;
					} else if (verticalDragHeight < settings.verticalDragMinHeight) {
						verticalDragHeight = settings.verticalDragMinHeight;
					}
					verticalDrag.height(verticalDragHeight + 'px');
					dragMaxY = verticalTrackHeight - verticalDragHeight;
					_positionDragY(verticalDragPosition); // To update the state for the arrow buttons
				}
			}

			function appendArrows(ele, p, a1, a2) {
				var p1 = "before",
				    p2 = "after",
				    aTemp;

				// Sniff for mac... Is there a better way to determine whether the arrows would naturally appear
				// at the top or the bottom of the bar?
				if (p == "os") {
					p = /Mac/.test(navigator.platform) ? "after" : "split";
				}
				if (p == p1) {
					p2 = p;
				} else if (p == p2) {
					p1 = p;
					aTemp = a1;
					a1 = a2;
					a2 = aTemp;
				}

				ele[p1](a1)[p2](a2);
			}

			function getArrowScroll(dirX, dirY, ele) {
				return function () {
					arrowScroll(dirX, dirY, this, ele);
					this.blur();
					return false;
				};
			}

			function arrowScroll(dirX, dirY, arrow, ele) {
				arrow = $(arrow).addClass('jspActive');

				var eve,
				    scrollTimeout,
				    isFirst = true,
				    doScroll = function () {
					if (dirX !== 0) {
						jsp.scrollByX(dirX * settings.arrowButtonSpeed);
					}
					if (dirY !== 0) {
						jsp.scrollByY(dirY * settings.arrowButtonSpeed);
					}
					scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.arrowRepeatFreq);
					isFirst = false;
				};

				doScroll();

				eve = ele ? 'mouseout.jsp' : 'mouseup.jsp';
				ele = ele || $('html');
				ele.bind(eve, function () {
					arrow.removeClass('jspActive');
					scrollTimeout && clearTimeout(scrollTimeout);
					scrollTimeout = null;
					ele.unbind(eve);
				});
			}

			function initClickOnTrack() {
				removeClickOnTrack();
				if (isScrollableV) {
					verticalTrack.bind('mousedown.jsp', function (e) {
						if (e.originalTarget === undefined || e.originalTarget == e.currentTarget) {
							var clickedTrack = $(this),
							    offset = clickedTrack.offset(),
							    direction = e.pageY - offset.top - verticalDragPosition,
							    scrollTimeout,
							    isFirst = true,
							    doScroll = function () {
								var offset = clickedTrack.offset(),
								    pos = e.pageY - offset.top - verticalDragHeight / 2,
								    contentDragY = paneHeight * settings.scrollPagePercent,
								    dragY = dragMaxY * contentDragY / (contentHeight - paneHeight);
								if (direction < 0) {
									if (verticalDragPosition - dragY > pos) {
										jsp.scrollByY(-contentDragY);
									} else {
										positionDragY(pos);
									}
								} else if (direction > 0) {
									if (verticalDragPosition + dragY < pos) {
										jsp.scrollByY(contentDragY);
									} else {
										positionDragY(pos);
									}
								} else {
									cancelClick();
									return;
								}
								scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
								isFirst = false;
							},
							    cancelClick = function () {
								scrollTimeout && clearTimeout(scrollTimeout);
								scrollTimeout = null;
								$(document).unbind('mouseup.jsp', cancelClick);
							};
							doScroll();
							$(document).bind('mouseup.jsp', cancelClick);
							return false;
						}
					});
				}

				if (isScrollableH) {
					horizontalTrack.bind('mousedown.jsp', function (e) {
						if (e.originalTarget === undefined || e.originalTarget == e.currentTarget) {
							var clickedTrack = $(this),
							    offset = clickedTrack.offset(),
							    direction = e.pageX - offset.left - horizontalDragPosition,
							    scrollTimeout,
							    isFirst = true,
							    doScroll = function () {
								var offset = clickedTrack.offset(),
								    pos = e.pageX - offset.left - horizontalDragWidth / 2,
								    contentDragX = paneWidth * settings.scrollPagePercent,
								    dragX = dragMaxX * contentDragX / (contentWidth - paneWidth);
								if (direction < 0) {
									if (horizontalDragPosition - dragX > pos) {
										jsp.scrollByX(-contentDragX);
									} else {
										positionDragX(pos);
									}
								} else if (direction > 0) {
									if (horizontalDragPosition + dragX < pos) {
										jsp.scrollByX(contentDragX);
									} else {
										positionDragX(pos);
									}
								} else {
									cancelClick();
									return;
								}
								scrollTimeout = setTimeout(doScroll, isFirst ? settings.initialDelay : settings.trackClickRepeatFreq);
								isFirst = false;
							},
							    cancelClick = function () {
								scrollTimeout && clearTimeout(scrollTimeout);
								scrollTimeout = null;
								$(document).unbind('mouseup.jsp', cancelClick);
							};
							doScroll();
							$(document).bind('mouseup.jsp', cancelClick);
							return false;
						}
					});
				}
			}

			function removeClickOnTrack() {
				if (horizontalTrack) {
					horizontalTrack.unbind('mousedown.jsp');
				}
				if (verticalTrack) {
					verticalTrack.unbind('mousedown.jsp');
				}
			}

			function cancelDrag() {
				$('html').unbind('dragstart.jsp selectstart.jsp mousemove.jsp mouseup.jsp mouseleave.jsp');

				if (verticalDrag) {
					verticalDrag.removeClass('jspActive');
				}
				if (horizontalDrag) {
					horizontalDrag.removeClass('jspActive');
				}
			}

			function positionDragY(destY, animate) {
				if (!isScrollableV) {
					return;
				}
				if (destY < 0) {
					destY = 0;
				} else if (destY > dragMaxY) {
					destY = dragMaxY;
				}

				// allow for devs to prevent the JSP from being scrolled
				var willScrollYEvent = new $.Event("jsp-will-scroll-y");
				elem.trigger(willScrollYEvent, [destY]);

				if (willScrollYEvent.isDefaultPrevented()) {
					return;
				}

				var tmpVerticalDragPosition = destY || 0;

				var isAtTop = tmpVerticalDragPosition === 0,
				    isAtBottom = tmpVerticalDragPosition == dragMaxY,
				    percentScrolled = destY / dragMaxY,
				    destTop = -percentScrolled * (contentHeight - paneHeight);

				// can't just check if(animate) because false is a valid value that could be passed in...
				if (animate === undefined) {
					animate = settings.animateScroll;
				}
				if (animate) {
					jsp.animate(verticalDrag, 'top', destY, _positionDragY, function () {
						elem.trigger('jsp-user-scroll-y', [-destTop, isAtTop, isAtBottom]);
					});
				} else {
					verticalDrag.css('top', destY);
					_positionDragY(destY);
					elem.trigger('jsp-user-scroll-y', [-destTop, isAtTop, isAtBottom]);
				}
			}

			function _positionDragY(destY) {
				if (destY === undefined) {
					destY = verticalDrag.position().top;
				}

				container.scrollTop(0);
				verticalDragPosition = destY || 0;

				var isAtTop = verticalDragPosition === 0,
				    isAtBottom = verticalDragPosition == dragMaxY,
				    percentScrolled = destY / dragMaxY,
				    destTop = -percentScrolled * (contentHeight - paneHeight);

				if (wasAtTop != isAtTop || wasAtBottom != isAtBottom) {
					wasAtTop = isAtTop;
					wasAtBottom = isAtBottom;
					elem.trigger('jsp-arrow-change', [wasAtTop, wasAtBottom, wasAtLeft, wasAtRight]);
				}

				updateVerticalArrows(isAtTop, isAtBottom);
				pane.css('top', destTop);
				elem.trigger('jsp-scroll-y', [-destTop, isAtTop, isAtBottom]).trigger('scroll');
			}

			function positionDragX(destX, animate) {
				if (!isScrollableH) {
					return;
				}
				if (destX < 0) {
					destX = 0;
				} else if (destX > dragMaxX) {
					destX = dragMaxX;
				}

				// allow for devs to prevent the JSP from being scrolled
				var willScrollXEvent = new $.Event("jsp-will-scroll-x");
				elem.trigger(willScrollXEvent, [destX]);

				if (willScrollXEvent.isDefaultPrevented()) {
					return;
				}

				var tmpHorizontalDragPosition = destX || 0;

				var isAtLeft = tmpHorizontalDragPosition === 0,
				    isAtRight = tmpHorizontalDragPosition == dragMaxX,
				    percentScrolled = destX / dragMaxX,
				    destLeft = -percentScrolled * (contentWidth - paneWidth);

				if (animate === undefined) {
					animate = settings.animateScroll;
				}
				if (animate) {
					jsp.animate(horizontalDrag, 'left', destX, _positionDragX, function () {
						elem.trigger('jsp-user-scroll-x', [-destLeft, isAtLeft, isAtRight]);
					});
				} else {
					horizontalDrag.css('left', destX);
					_positionDragX(destX);
					elem.trigger('jsp-user-scroll-x', [-destLeft, isAtLeft, isAtRight]);
				}
			}

			function _positionDragX(destX) {
				if (destX === undefined) {
					destX = horizontalDrag.position().left;
				}

				container.scrollTop(0);
				horizontalDragPosition = destX || 0;

				var isAtLeft = horizontalDragPosition === 0,
				    isAtRight = horizontalDragPosition == dragMaxX,
				    percentScrolled = destX / dragMaxX,
				    destLeft = -percentScrolled * (contentWidth - paneWidth);

				if (wasAtLeft != isAtLeft || wasAtRight != isAtRight) {
					wasAtLeft = isAtLeft;
					wasAtRight = isAtRight;
					elem.trigger('jsp-arrow-change', [wasAtTop, wasAtBottom, wasAtLeft, wasAtRight]);
				}

				updateHorizontalArrows(isAtLeft, isAtRight);
				pane.css('left', destLeft);
				elem.trigger('jsp-scroll-x', [-destLeft, isAtLeft, isAtRight]).trigger('scroll');
			}

			function updateVerticalArrows(isAtTop, isAtBottom) {
				if (settings.showArrows) {
					arrowUp[isAtTop ? 'addClass' : 'removeClass']('jspDisabled');
					arrowDown[isAtBottom ? 'addClass' : 'removeClass']('jspDisabled');
				}
			}

			function updateHorizontalArrows(isAtLeft, isAtRight) {
				if (settings.showArrows) {
					arrowLeft[isAtLeft ? 'addClass' : 'removeClass']('jspDisabled');
					arrowRight[isAtRight ? 'addClass' : 'removeClass']('jspDisabled');
				}
			}

			function scrollToY(destY, animate) {
				var percentScrolled = destY / (contentHeight - paneHeight);
				positionDragY(percentScrolled * dragMaxY, animate);
			}

			function scrollToX(destX, animate) {
				var percentScrolled = destX / (contentWidth - paneWidth);
				positionDragX(percentScrolled * dragMaxX, animate);
			}

			function scrollToElement(ele, stickToTop, animate) {
				var e,
				    eleHeight,
				    eleWidth,
				    eleTop = 0,
				    eleLeft = 0,
				    viewportTop,
				    viewportLeft,
				    maxVisibleEleTop,
				    maxVisibleEleLeft,
				    destY,
				    destX;

				// Legal hash values aren't necessarily legal jQuery selectors so we need to catch any
				// errors from the lookup...
				try {
					e = $(ele);
				} catch (err) {
					return;
				}
				eleHeight = e.outerHeight();
				eleWidth = e.outerWidth();

				container.scrollTop(0);
				container.scrollLeft(0);

				// loop through parents adding the offset top of any elements that are relatively positioned between
				// the focused element and the jspPane so we can get the true distance from the top
				// of the focused element to the top of the scrollpane...
				while (!e.is('.jspPane')) {
					eleTop += e.position().top;
					eleLeft += e.position().left;
					e = e.offsetParent();
					if (/^body|html$/i.test(e[0].nodeName)) {
						// we ended up too high in the document structure. Quit!
						return;
					}
				}

				viewportTop = contentPositionY();
				maxVisibleEleTop = viewportTop + paneHeight;
				if (eleTop < viewportTop || stickToTop) {
					// element is above viewport
					destY = eleTop - settings.horizontalGutter;
				} else if (eleTop + eleHeight > maxVisibleEleTop) {
					// element is below viewport
					destY = eleTop - paneHeight + eleHeight + settings.horizontalGutter;
				}
				if (!isNaN(destY)) {
					scrollToY(destY, animate);
				}

				viewportLeft = contentPositionX();
				maxVisibleEleLeft = viewportLeft + paneWidth;
				if (eleLeft < viewportLeft || stickToTop) {
					// element is to the left of viewport
					destX = eleLeft - settings.horizontalGutter;
				} else if (eleLeft + eleWidth > maxVisibleEleLeft) {
					// element is to the right viewport
					destX = eleLeft - paneWidth + eleWidth + settings.horizontalGutter;
				}
				if (!isNaN(destX)) {
					scrollToX(destX, animate);
				}
			}

			function contentPositionX() {
				return -pane.position().left;
			}

			function contentPositionY() {
				return -pane.position().top;
			}

			function isCloseToBottom() {
				var scrollableHeight = contentHeight - paneHeight;
				return scrollableHeight > 20 && scrollableHeight - contentPositionY() < 10;
			}

			function isCloseToRight() {
				var scrollableWidth = contentWidth - paneWidth;
				return scrollableWidth > 20 && scrollableWidth - contentPositionX() < 10;
			}

			function initMousewheel() {
				container.unbind(mwEvent).bind(mwEvent, function (event, delta, deltaX, deltaY) {

					if (!horizontalDragPosition) horizontalDragPosition = 0;
					if (!verticalDragPosition) verticalDragPosition = 0;

					var dX = horizontalDragPosition,
					    dY = verticalDragPosition,
					    factor = event.deltaFactor || settings.mouseWheelSpeed;
					jsp.scrollBy(deltaX * factor, -deltaY * factor, false);
					// return true if there was no movement so rest of screen can scroll
					return dX == horizontalDragPosition && dY == verticalDragPosition;
				});
			}

			function removeMousewheel() {
				container.unbind(mwEvent);
			}

			function nil() {
				return false;
			}

			function initFocusHandler() {
				pane.find(':input,a').unbind('focus.jsp').bind('focus.jsp', function (e) {
					scrollToElement(e.target, false);
				});
			}

			function removeFocusHandler() {
				pane.find(':input,a').unbind('focus.jsp');
			}

			function initKeyboardNav() {
				var keyDown,
				    elementHasScrolled,
				    validParents = [];
				isScrollableH && validParents.push(horizontalBar[0]);
				isScrollableV && validParents.push(verticalBar[0]);

				// IE also focuses elements that don't have tabindex set.
				pane.bind('focus.jsp', function () {
					elem.focus();
				});

				elem.attr('tabindex', 0).unbind('keydown.jsp keypress.jsp').bind('keydown.jsp', function (e) {
					if (e.target !== this && !(validParents.length && $(e.target).closest(validParents).length)) {
						return;
					}
					var dX = horizontalDragPosition,
					    dY = verticalDragPosition;
					switch (e.keyCode) {
						case 40: // down
						case 38: // up
						case 34: // page down
						case 32: // space
						case 33: // page up
						case 39: // right
						case 37:
							// left
							keyDown = e.keyCode;
							keyDownHandler();
							break;
						case 35:
							// end
							scrollToY(contentHeight - paneHeight);
							keyDown = null;
							break;
						case 36:
							// home
							scrollToY(0);
							keyDown = null;
							break;
					}

					elementHasScrolled = e.keyCode == keyDown && dX != horizontalDragPosition || dY != verticalDragPosition;
					return !elementHasScrolled;
				}).bind('keypress.jsp', // For FF/ OSX so that we can cancel the repeat key presses if the JSP scrolls...
				function (e) {
					if (e.keyCode == keyDown) {
						keyDownHandler();
					}
					// If the keypress is not related to the area, ignore it. Fixes problem with inputs inside scrolled area. Copied from line 955.
					if (e.target !== this && !(validParents.length && $(e.target).closest(validParents).length)) {
						return;
					}
					return !elementHasScrolled;
				});

				if (settings.hideFocus) {
					elem.css('outline', 'none');
					if ('hideFocus' in container[0]) {
						elem.attr('hideFocus', true);
					}
				} else {
					elem.css('outline', '');
					if ('hideFocus' in container[0]) {
						elem.attr('hideFocus', false);
					}
				}

				function keyDownHandler() {
					var dX = horizontalDragPosition,
					    dY = verticalDragPosition;
					switch (keyDown) {
						case 40:
							// down
							jsp.scrollByY(settings.keyboardSpeed, false);
							break;
						case 38:
							// up
							jsp.scrollByY(-settings.keyboardSpeed, false);
							break;
						case 34: // page down
						case 32:
							// space
							jsp.scrollByY(paneHeight * settings.scrollPagePercent, false);
							break;
						case 33:
							// page up
							jsp.scrollByY(-paneHeight * settings.scrollPagePercent, false);
							break;
						case 39:
							// right
							jsp.scrollByX(settings.keyboardSpeed, false);
							break;
						case 37:
							// left
							jsp.scrollByX(-settings.keyboardSpeed, false);
							break;
					}

					elementHasScrolled = dX != horizontalDragPosition || dY != verticalDragPosition;
					return elementHasScrolled;
				}
			}

			function removeKeyboardNav() {
				elem.attr('tabindex', '-1').removeAttr('tabindex').unbind('keydown.jsp keypress.jsp');

				pane.unbind('.jsp');
			}

			function observeHash() {
				if (location.hash && location.hash.length > 1) {
					var e,
					    retryInt,
					    hash = escape(location.hash.substr(1)) // hash must be escaped to prevent XSS
					;
					try {
						e = $('#' + hash + ', a[name="' + hash + '"]');
					} catch (err) {
						return;
					}

					if (e.length && pane.find(hash)) {
						// nasty workaround but it appears to take a little while before the hash has done its thing
						// to the rendered page so we just wait until the container's scrollTop has been messed up.
						if (container.scrollTop() === 0) {
							retryInt = setInterval(function () {
								if (container.scrollTop() > 0) {
									scrollToElement(e, true);
									$(document).scrollTop(container.position().top);
									clearInterval(retryInt);
								}
							}, 50);
						} else {
							scrollToElement(e, true);
							$(document).scrollTop(container.position().top);
						}
					}
				}
			}

			function hijackInternalLinks() {
				// only register the link handler once
				if ($(document.body).data('jspHijack')) {
					return;
				}

				// remember that the handler was bound
				$(document.body).data('jspHijack', true);

				// use live handler to also capture newly created links
				$(document.body).delegate('a[href*="#"]', 'click', function (event) {
					// does the link point to the same page?
					// this also takes care of cases with a <base>-Tag or Links not starting with the hash #
					// e.g. <a href="index.html#test"> when the current url already is index.html
					var href = this.href.substr(0, this.href.indexOf('#')),
					    locationHref = location.href,
					    hash,
					    element,
					    container,
					    jsp,
					    scrollTop,
					    elementTop;
					if (location.href.indexOf('#') !== -1) {
						locationHref = location.href.substr(0, location.href.indexOf('#'));
					}
					if (href !== locationHref) {
						// the link points to another page
						return;
					}

					// check if jScrollPane should handle this click event
					hash = escape(this.href.substr(this.href.indexOf('#') + 1));

					// find the element on the page
					element;
					try {
						element = $('#' + hash + ', a[name="' + hash + '"]');
					} catch (e) {
						// hash is not a valid jQuery identifier
						return;
					}

					if (!element.length) {
						// this link does not point to an element on this page
						return;
					}

					container = element.closest('.jspScrollable');
					jsp = container.data('jsp');

					// jsp might be another jsp instance than the one, that bound this event
					// remember: this event is only bound once for all instances.
					jsp.scrollToElement(element, true);

					if (container[0].scrollIntoView) {
						// also scroll to the top of the container (if it is not visible)
						scrollTop = $(window).scrollTop();
						elementTop = element.offset().top;
						if (elementTop < scrollTop || elementTop > scrollTop + $(window).height()) {
							container[0].scrollIntoView();
						}
					}

					// jsp handled this event, prevent the browser default (scrolling :P)
					event.preventDefault();
				});
			}

			// Init touch on iPad, iPhone, iPod, Android
			function initTouch() {
				var startX,
				    startY,
				    touchStartX,
				    touchStartY,
				    moved,
				    moving = false;

				container.unbind('touchstart.jsp touchmove.jsp touchend.jsp click.jsp-touchclick').bind('touchstart.jsp', function (e) {
					var touch = e.originalEvent.touches[0];
					startX = contentPositionX();
					startY = contentPositionY();
					touchStartX = touch.pageX;
					touchStartY = touch.pageY;
					moved = false;
					moving = true;
				}).bind('touchmove.jsp', function (ev) {
					if (!moving) {
						return;
					}

					var touchPos = ev.originalEvent.touches[0],
					    dX = horizontalDragPosition,
					    dY = verticalDragPosition;

					jsp.scrollTo(startX + touchStartX - touchPos.pageX, startY + touchStartY - touchPos.pageY);

					moved = moved || Math.abs(touchStartX - touchPos.pageX) > 5 || Math.abs(touchStartY - touchPos.pageY) > 5;

					// return true if there was no movement so rest of screen can scroll
					return dX == horizontalDragPosition && dY == verticalDragPosition;
				}).bind('touchend.jsp', function (e) {
					moving = false;
					/*if(moved) {
     	return false;
     }*/
				}).bind('click.jsp-touchclick', function (e) {
					if (moved) {
						moved = false;
						return false;
					}
				});
			}

			function destroy() {
				var currentY = contentPositionY(),
				    currentX = contentPositionX();
				elem.removeClass('jspScrollable').unbind('.jsp');
				pane.unbind('.jsp');
				elem.replaceWith(originalElement.append(pane.children()));
				originalElement.scrollTop(currentY);
				originalElement.scrollLeft(currentX);

				// clear reinitialize timer if active
				if (reinitialiseInterval) {
					clearInterval(reinitialiseInterval);
				}
			}

			// Public API
			$.extend(jsp, {
				// Reinitialises the scroll pane (if it's internal dimensions have changed since the last time it
				// was initialised). The settings object which is passed in will override any settings from the
				// previous time it was initialised - if you don't pass any settings then the ones from the previous
				// initialisation will be used.
				reinitialise: function (s) {
					s = $.extend({}, settings, s);
					initialise(s);
				},
				// Scrolls the specified element (a jQuery object, DOM node or jQuery selector string) into view so
				// that it can be seen within the viewport. If stickToTop is true then the element will appear at
				// the top of the viewport, if it is false then the viewport will scroll as little as possible to
				// show the element. You can also specify if you want animation to occur. If you don't provide this
				// argument then the animateScroll value from the settings object is used instead.
				scrollToElement: function (ele, stickToTop, animate) {
					scrollToElement(ele, stickToTop, animate);
				},
				// Scrolls the pane so that the specified co-ordinates within the content are at the top left
				// of the viewport. animate is optional and if not passed then the value of animateScroll from
				// the settings object this jScrollPane was initialised with is used.
				scrollTo: function (destX, destY, animate) {
					scrollToX(destX, animate);
					scrollToY(destY, animate);
				},
				// Scrolls the pane so that the specified co-ordinate within the content is at the left of the
				// viewport. animate is optional and if not passed then the value of animateScroll from the settings
				// object this jScrollPane was initialised with is used.
				scrollToX: function (destX, animate) {
					scrollToX(destX, animate);
				},
				// Scrolls the pane so that the specified co-ordinate within the content is at the top of the
				// viewport. animate is optional and if not passed then the value of animateScroll from the settings
				// object this jScrollPane was initialised with is used.
				scrollToY: function (destY, animate) {
					scrollToY(destY, animate);
				},
				// Scrolls the pane to the specified percentage of its maximum horizontal scroll position. animate
				// is optional and if not passed then the value of animateScroll from the settings object this
				// jScrollPane was initialised with is used.
				scrollToPercentX: function (destPercentX, animate) {
					scrollToX(destPercentX * (contentWidth - paneWidth), animate);
				},
				// Scrolls the pane to the specified percentage of its maximum vertical scroll position. animate
				// is optional and if not passed then the value of animateScroll from the settings object this
				// jScrollPane was initialised with is used.
				scrollToPercentY: function (destPercentY, animate) {
					scrollToY(destPercentY * (contentHeight - paneHeight), animate);
				},
				// Scrolls the pane by the specified amount of pixels. animate is optional and if not passed then
				// the value of animateScroll from the settings object this jScrollPane was initialised with is used.
				scrollBy: function (deltaX, deltaY, animate) {
					jsp.scrollByX(deltaX, animate);
					jsp.scrollByY(deltaY, animate);
				},
				// Scrolls the pane by the specified amount of pixels. animate is optional and if not passed then
				// the value of animateScroll from the settings object this jScrollPane was initialised with is used.
				scrollByX: function (deltaX, animate) {
					var destX = contentPositionX() + Math[deltaX < 0 ? 'floor' : 'ceil'](deltaX),
					    percentScrolled = destX / (contentWidth - paneWidth);
					positionDragX(percentScrolled * dragMaxX, animate);
				},
				// Scrolls the pane by the specified amount of pixels. animate is optional and if not passed then
				// the value of animateScroll from the settings object this jScrollPane was initialised with is used.
				scrollByY: function (deltaY, animate) {
					var destY = contentPositionY() + Math[deltaY < 0 ? 'floor' : 'ceil'](deltaY),
					    percentScrolled = destY / (contentHeight - paneHeight);
					positionDragY(percentScrolled * dragMaxY, animate);
				},
				// Positions the horizontal drag at the specified x position (and updates the viewport to reflect
				// this). animate is optional and if not passed then the value of animateScroll from the settings
				// object this jScrollPane was initialised with is used.
				positionDragX: function (x, animate) {
					positionDragX(x, animate);
				},
				// Positions the vertical drag at the specified y position (and updates the viewport to reflect
				// this). animate is optional and if not passed then the value of animateScroll from the settings
				// object this jScrollPane was initialised with is used.
				positionDragY: function (y, animate) {
					positionDragY(y, animate);
				},
				// This method is called when jScrollPane is trying to animate to a new position. You can override
				// it if you want to provide advanced animation functionality. It is passed the following arguments:
				//  * ele          - the element whose position is being animated
				//  * prop         - the property that is being animated
				//  * value        - the value it's being animated to
				//  * stepCallback - a function that you must execute each time you update the value of the property
				//  * completeCallback - a function that will be executed after the animation had finished
				// You can use the default implementation (below) as a starting point for your own implementation.
				animate: function (ele, prop, value, stepCallback, completeCallback) {
					var params = {};
					params[prop] = value;
					ele.animate(params, {
						'duration': settings.animateDuration,
						'easing': settings.animateEase,
						'queue': false,
						'step': stepCallback,
						'complete': completeCallback
					});
				},
				// Returns the current x position of the viewport with regards to the content pane.
				getContentPositionX: function () {
					return contentPositionX();
				},
				// Returns the current y position of the viewport with regards to the content pane.
				getContentPositionY: function () {
					return contentPositionY();
				},
				// Returns the width of the content within the scroll pane.
				getContentWidth: function () {
					return contentWidth;
				},
				// Returns the height of the content within the scroll pane.
				getContentHeight: function () {
					return contentHeight;
				},
				// Returns the horizontal position of the viewport within the pane content.
				getPercentScrolledX: function () {
					return contentPositionX() / (contentWidth - paneWidth);
				},
				// Returns the vertical position of the viewport within the pane content.
				getPercentScrolledY: function () {
					return contentPositionY() / (contentHeight - paneHeight);
				},
				// Returns whether or not this scrollpane has a horizontal scrollbar.
				getIsScrollableH: function () {
					return isScrollableH;
				},
				// Returns whether or not this scrollpane has a vertical scrollbar.
				getIsScrollableV: function () {
					return isScrollableV;
				},
				// Gets a reference to the content pane. It is important that you use this method if you want to
				// edit the content of your jScrollPane as if you access the element directly then you may have some
				// problems (as your original element has had additional elements for the scrollbars etc added into
				// it).
				getContentPane: function () {
					return pane;
				},
				// Scrolls this jScrollPane down as far as it can currently scroll. If animate isn't passed then the
				// animateScroll value from settings is used instead.
				scrollToBottom: function (animate) {
					positionDragY(dragMaxY, animate);
				},
				// Hijacks the links on the page which link to content inside the scrollpane. If you have changed
				// the content of your page (e.g. via AJAX) and want to make sure any new anchor links to the
				// contents of your scroll pane will work then call this function.
				hijackInternalLinks: $.noop,
				// Removes the jScrollPane and returns the page to the state it was in before jScrollPane was
				// initialised.
				destroy: function () {
					destroy();
				}
			});

			initialise(s);
		}

		// Pluginifying code...
		settings = $.extend({}, $.fn.jScrollPane.defaults, settings);

		// Apply default speed
		$.each(['arrowButtonSpeed', 'trackClickSpeed', 'keyboardSpeed'], function () {
			settings[this] = settings[this] || settings.speed;
		});

		return this.each(function () {
			var elem = $(this),
			    jspApi = elem.data('jsp');
			if (jspApi) {
				jspApi.reinitialise(settings);
			} else {
				$("script", elem).filter('[type="text/javascript"],:not([type])').remove();
				jspApi = new JScrollPane(elem, settings);
				elem.data('jsp', jspApi);
			}
		});
	};

	$.fn.jScrollPane.defaults = {
		showArrows: true,
		maintainPosition: true,
		stickToBottom: false,
		stickToRight: false,
		clickOnTrack: true,
		autoReinitialise: false,
		autoReinitialiseDelay: 500,
		verticalDragMinHeight: 0,
		verticalDragMaxHeight: 99999,
		horizontalDragMinWidth: 0,
		horizontalDragMaxWidth: 99999,
		contentWidth: undefined,
		animateScroll: true,
		animateDuration: 300,
		animateEase: 'linear',
		hijackInternalLinks: false,
		verticalGutter: 30,
		horizontalGutter: 30,
		mouseWheelSpeed: 3,
		arrowButtonSpeed: 0,
		arrowRepeatFreq: 50,
		arrowScrollOnHover: false,
		trackClickSpeed: 0,
		trackClickRepeatFreq: 70,
		verticalArrowPositions: 'split',
		horizontalArrowPositions: 'split',
		enableKeyboardNavigation: true,
		hideFocus: false,
		keyboardSpeed: 0,
		initialDelay: 300, // Delay before starting repeating
		speed: 30, // Default speed when others falsey
		scrollPagePercent: .8 // Percent of visible area scrolled when pageUp/Down or track area pressed
	};
});
;/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
!function (a) {
  "use strict";
  "function" == typeof define && define.amd ? define(["jquery"], a) : "undefined" != typeof exports ? module.exports = a(require("jquery")) : a(jQuery);
}(function (a) {
  "use strict";
  var b = window.Slick || {};b = function () {
    function c(c, d) {
      var f,
          e = this;e.defaults = { accessibility: !0, adaptiveHeight: !1, appendArrows: a(c), appendDots: a(c), arrows: !0, asNavFor: null, prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>', nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>', autoplay: !1, autoplaySpeed: 3e3, centerMode: !1, centerPadding: "50px", cssEase: "ease", customPaging: function (b, c) {
          return a('<button type="button" data-role="none" role="button" tabindex="0" />').text(c + 1);
        }, dots: !1, dotsClass: "slick-dots", draggable: !0, easing: "linear", edgeFriction: .35, fade: !1, focusOnSelect: !1, infinite: !0, initialSlide: 0, lazyLoad: "ondemand", mobileFirst: !1, pauseOnHover: !0, pauseOnFocus: !0, pauseOnDotsHover: !1, respondTo: "window", responsive: null, rows: 1, rtl: !1, slide: "", slidesPerRow: 1, slidesToShow: 1, slidesToScroll: 1, speed: 500, swipe: !0, swipeToSlide: !1, touchMove: !0, touchThreshold: 5, useCSS: !0, useTransform: !0, variableWidth: !1, vertical: !1, verticalSwiping: !1, waitForAnimate: !0, zIndex: 1e3 }, e.initials = { animating: !1, dragging: !1, autoPlayTimer: null, currentDirection: 0, currentLeft: null, currentSlide: 0, direction: 1, $dots: null, listWidth: null, listHeight: null, loadIndex: 0, $nextArrow: null, $prevArrow: null, slideCount: null, slideWidth: null, $slideTrack: null, $slides: null, sliding: !1, slideOffset: 0, swipeLeft: null, $list: null, touchObject: {}, transformsEnabled: !1, unslicked: !1 }, a.extend(e, e.initials), e.activeBreakpoint = null, e.animType = null, e.animProp = null, e.breakpoints = [], e.breakpointSettings = [], e.cssTransitions = !1, e.focussed = !1, e.interrupted = !1, e.hidden = "hidden", e.paused = !0, e.positionProp = null, e.respondTo = null, e.rowCount = 1, e.shouldClick = !0, e.$slider = a(c), e.$slidesCache = null, e.transformType = null, e.transitionType = null, e.visibilityChange = "visibilitychange", e.windowWidth = 0, e.windowTimer = null, f = a(c).data("slick") || {}, e.options = a.extend({}, e.defaults, d, f), e.currentSlide = e.options.initialSlide, e.originalSettings = e.options, "undefined" != typeof document.mozHidden ? (e.hidden = "mozHidden", e.visibilityChange = "mozvisibilitychange") : "undefined" != typeof document.webkitHidden && (e.hidden = "webkitHidden", e.visibilityChange = "webkitvisibilitychange"), e.autoPlay = a.proxy(e.autoPlay, e), e.autoPlayClear = a.proxy(e.autoPlayClear, e), e.autoPlayIterator = a.proxy(e.autoPlayIterator, e), e.changeSlide = a.proxy(e.changeSlide, e), e.clickHandler = a.proxy(e.clickHandler, e), e.selectHandler = a.proxy(e.selectHandler, e), e.setPosition = a.proxy(e.setPosition, e), e.swipeHandler = a.proxy(e.swipeHandler, e), e.dragHandler = a.proxy(e.dragHandler, e), e.keyHandler = a.proxy(e.keyHandler, e), e.instanceUid = b++, e.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, e.registerBreakpoints(), e.init(!0);
    }var b = 0;return c;
  }(), b.prototype.activateADA = function () {
    var a = this;a.$slideTrack.find(".slick-active").attr({ "aria-hidden": "false" }).find("a, input, button, select").attr({ tabindex: "0" });
  }, b.prototype.addSlide = b.prototype.slickAdd = function (b, c, d) {
    var e = this;if ("boolean" == typeof c) d = c, c = null;else if (0 > c || c >= e.slideCount) return !1;e.unload(), "number" == typeof c ? 0 === c && 0 === e.$slides.length ? a(b).appendTo(e.$slideTrack) : d ? a(b).insertBefore(e.$slides.eq(c)) : a(b).insertAfter(e.$slides.eq(c)) : d === !0 ? a(b).prependTo(e.$slideTrack) : a(b).appendTo(e.$slideTrack), e.$slides = e.$slideTrack.children(this.options.slide), e.$slideTrack.children(this.options.slide).detach(), e.$slideTrack.append(e.$slides), e.$slides.each(function (b, c) {
      a(c).attr("data-slick-index", b);
    }), e.$slidesCache = e.$slides, e.reinit();
  }, b.prototype.animateHeight = function () {
    var a = this;if (1 === a.options.slidesToShow && a.options.adaptiveHeight === !0 && a.options.vertical === !1) {
      var b = a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.animate({ height: b }, a.options.speed);
    }
  }, b.prototype.animateSlide = function (b, c) {
    var d = {},
        e = this;e.animateHeight(), e.options.rtl === !0 && e.options.vertical === !1 && (b = -b), e.transformsEnabled === !1 ? e.options.vertical === !1 ? e.$slideTrack.animate({ left: b }, e.options.speed, e.options.easing, c) : e.$slideTrack.animate({ top: b }, e.options.speed, e.options.easing, c) : e.cssTransitions === !1 ? (e.options.rtl === !0 && (e.currentLeft = -e.currentLeft), a({ animStart: e.currentLeft }).animate({ animStart: b }, { duration: e.options.speed, easing: e.options.easing, step: function (a) {
        a = Math.ceil(a), e.options.vertical === !1 ? (d[e.animType] = "translate(" + a + "px, 0px)", e.$slideTrack.css(d)) : (d[e.animType] = "translate(0px," + a + "px)", e.$slideTrack.css(d));
      }, complete: function () {
        c && c.call();
      } })) : (e.applyTransition(), b = Math.ceil(b), e.options.vertical === !1 ? d[e.animType] = "translate3d(" + b + "px, 0px, 0px)" : d[e.animType] = "translate3d(0px," + b + "px, 0px)", e.$slideTrack.css(d), c && setTimeout(function () {
      e.disableTransition(), c.call();
    }, e.options.speed));
  }, b.prototype.getNavTarget = function () {
    var b = this,
        c = b.options.asNavFor;return c && null !== c && (c = a(c).not(b.$slider)), c;
  }, b.prototype.asNavFor = function (b) {
    var c = this,
        d = c.getNavTarget();null !== d && "object" == typeof d && d.each(function () {
      var c = a(this).slick("getSlick");c.unslicked || c.slideHandler(b, !0);
    });
  }, b.prototype.applyTransition = function (a) {
    var b = this,
        c = {};b.options.fade === !1 ? c[b.transitionType] = b.transformType + " " + b.options.speed + "ms " + b.options.cssEase : c[b.transitionType] = "opacity " + b.options.speed + "ms " + b.options.cssEase, b.options.fade === !1 ? b.$slideTrack.css(c) : b.$slides.eq(a).css(c);
  }, b.prototype.autoPlay = function () {
    var a = this;a.autoPlayClear(), a.slideCount > a.options.slidesToShow && (a.autoPlayTimer = setInterval(a.autoPlayIterator, a.options.autoplaySpeed));
  }, b.prototype.autoPlayClear = function () {
    var a = this;a.autoPlayTimer && clearInterval(a.autoPlayTimer);
  }, b.prototype.autoPlayIterator = function () {
    var a = this,
        b = a.currentSlide + a.options.slidesToScroll;a.paused || a.interrupted || a.focussed || (a.options.infinite === !1 && (1 === a.direction && a.currentSlide + 1 === a.slideCount - 1 ? a.direction = 0 : 0 === a.direction && (b = a.currentSlide - a.options.slidesToScroll, a.currentSlide - 1 === 0 && (a.direction = 1))), a.slideHandler(b));
  }, b.prototype.buildArrows = function () {
    var b = this;b.options.arrows === !0 && (b.$prevArrow = a(b.options.prevArrow).addClass("slick-arrow"), b.$nextArrow = a(b.options.nextArrow).addClass("slick-arrow"), b.slideCount > b.options.slidesToShow ? (b.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), b.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), b.htmlExpr.test(b.options.prevArrow) && b.$prevArrow.prependTo(b.options.appendArrows), b.htmlExpr.test(b.options.nextArrow) && b.$nextArrow.appendTo(b.options.appendArrows), b.options.infinite !== !0 && b.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : b.$prevArrow.add(b.$nextArrow).addClass("slick-hidden").attr({ "aria-disabled": "true", tabindex: "-1" }));
  }, b.prototype.buildDots = function () {
    var c,
        d,
        b = this;if (b.options.dots === !0 && b.slideCount > b.options.slidesToShow) {
      for (b.$slider.addClass("slick-dotted"), d = a("<ul />").addClass(b.options.dotsClass), c = 0; c <= b.getDotCount(); c += 1) d.append(a("<li />").append(b.options.customPaging.call(this, b, c)));b.$dots = d.appendTo(b.options.appendDots), b.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false");
    }
  }, b.prototype.buildOut = function () {
    var b = this;b.$slides = b.$slider.children(b.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), b.slideCount = b.$slides.length, b.$slides.each(function (b, c) {
      a(c).attr("data-slick-index", b).data("originalStyling", a(c).attr("style") || "");
    }), b.$slider.addClass("slick-slider"), b.$slideTrack = 0 === b.slideCount ? a('<div class="slick-track"/>').appendTo(b.$slider) : b.$slides.wrapAll('<div class="slick-track"/>').parent(), b.$list = b.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(), b.$slideTrack.css("opacity", 0), (b.options.centerMode === !0 || b.options.swipeToSlide === !0) && (b.options.slidesToScroll = 1), a("img[data-lazy]", b.$slider).not("[src]").addClass("slick-loading"), b.setupInfinite(), b.buildArrows(), b.buildDots(), b.updateDots(), b.setSlideClasses("number" == typeof b.currentSlide ? b.currentSlide : 0), b.options.draggable === !0 && b.$list.addClass("draggable");
  }, b.prototype.buildRows = function () {
    var b,
        c,
        d,
        e,
        f,
        g,
        h,
        a = this;if (e = document.createDocumentFragment(), g = a.$slider.children(), a.options.rows > 1) {
      for (h = a.options.slidesPerRow * a.options.rows, f = Math.ceil(g.length / h), b = 0; f > b; b++) {
        var i = document.createElement("div");for (c = 0; c < a.options.rows; c++) {
          var j = document.createElement("div");for (d = 0; d < a.options.slidesPerRow; d++) {
            var k = b * h + (c * a.options.slidesPerRow + d);g.get(k) && j.appendChild(g.get(k));
          }i.appendChild(j);
        }e.appendChild(i);
      }a.$slider.empty().append(e), a.$slider.children().children().children().css({ width: 100 / a.options.slidesPerRow + "%", display: "inline-block" });
    }
  }, b.prototype.checkResponsive = function (b, c) {
    var e,
        f,
        g,
        d = this,
        h = !1,
        i = d.$slider.width(),
        j = window.innerWidth || a(window).width();if ("window" === d.respondTo ? g = j : "slider" === d.respondTo ? g = i : "min" === d.respondTo && (g = Math.min(j, i)), d.options.responsive && d.options.responsive.length && null !== d.options.responsive) {
      f = null;for (e in d.breakpoints) d.breakpoints.hasOwnProperty(e) && (d.originalSettings.mobileFirst === !1 ? g < d.breakpoints[e] && (f = d.breakpoints[e]) : g > d.breakpoints[e] && (f = d.breakpoints[e]));null !== f ? null !== d.activeBreakpoint ? (f !== d.activeBreakpoint || c) && (d.activeBreakpoint = f, "unslick" === d.breakpointSettings[f] ? d.unslick(f) : (d.options = a.extend({}, d.originalSettings, d.breakpointSettings[f]), b === !0 && (d.currentSlide = d.options.initialSlide), d.refresh(b)), h = f) : (d.activeBreakpoint = f, "unslick" === d.breakpointSettings[f] ? d.unslick(f) : (d.options = a.extend({}, d.originalSettings, d.breakpointSettings[f]), b === !0 && (d.currentSlide = d.options.initialSlide), d.refresh(b)), h = f) : null !== d.activeBreakpoint && (d.activeBreakpoint = null, d.options = d.originalSettings, b === !0 && (d.currentSlide = d.options.initialSlide), d.refresh(b), h = f), b || h === !1 || d.$slider.trigger("breakpoint", [d, h]);
    }
  }, b.prototype.changeSlide = function (b, c) {
    var f,
        g,
        h,
        d = this,
        e = a(b.currentTarget);switch (e.is("a") && b.preventDefault(), e.is("li") || (e = e.closest("li")), h = d.slideCount % d.options.slidesToScroll !== 0, f = h ? 0 : (d.slideCount - d.currentSlide) % d.options.slidesToScroll, b.data.message) {case "previous":
        g = 0 === f ? d.options.slidesToScroll : d.options.slidesToShow - f, d.slideCount > d.options.slidesToShow && d.slideHandler(d.currentSlide - g, !1, c);break;case "next":
        g = 0 === f ? d.options.slidesToScroll : f, d.slideCount > d.options.slidesToShow && d.slideHandler(d.currentSlide + g, !1, c);break;case "index":
        var i = 0 === b.data.index ? 0 : b.data.index || e.index() * d.options.slidesToScroll;d.slideHandler(d.checkNavigable(i), !1, c), e.children().trigger("focus");break;default:
        return;}
  }, b.prototype.checkNavigable = function (a) {
    var c,
        d,
        b = this;if (c = b.getNavigableIndexes(), d = 0, a > c[c.length - 1]) a = c[c.length - 1];else for (var e in c) {
      if (a < c[e]) {
        a = d;break;
      }d = c[e];
    }return a;
  }, b.prototype.cleanUpEvents = function () {
    var b = this;b.options.dots && null !== b.$dots && a("li", b.$dots).off("click.slick", b.changeSlide).off("mouseenter.slick", a.proxy(b.interrupt, b, !0)).off("mouseleave.slick", a.proxy(b.interrupt, b, !1)), b.$slider.off("focus.slick blur.slick"), b.options.arrows === !0 && b.slideCount > b.options.slidesToShow && (b.$prevArrow && b.$prevArrow.off("click.slick", b.changeSlide), b.$nextArrow && b.$nextArrow.off("click.slick", b.changeSlide)), b.$list.off("touchstart.slick mousedown.slick", b.swipeHandler), b.$list.off("touchmove.slick mousemove.slick", b.swipeHandler), b.$list.off("touchend.slick mouseup.slick", b.swipeHandler), b.$list.off("touchcancel.slick mouseleave.slick", b.swipeHandler), b.$list.off("click.slick", b.clickHandler), a(document).off(b.visibilityChange, b.visibility), b.cleanUpSlideEvents(), b.options.accessibility === !0 && b.$list.off("keydown.slick", b.keyHandler), b.options.focusOnSelect === !0 && a(b.$slideTrack).children().off("click.slick", b.selectHandler), a(window).off("orientationchange.slick.slick-" + b.instanceUid, b.orientationChange), a(window).off("resize.slick.slick-" + b.instanceUid, b.resize), a("[draggable!=true]", b.$slideTrack).off("dragstart", b.preventDefault), a(window).off("load.slick.slick-" + b.instanceUid, b.setPosition), a(document).off("ready.slick.slick-" + b.instanceUid, b.setPosition);
  }, b.prototype.cleanUpSlideEvents = function () {
    var b = this;b.$list.off("mouseenter.slick", a.proxy(b.interrupt, b, !0)), b.$list.off("mouseleave.slick", a.proxy(b.interrupt, b, !1));
  }, b.prototype.cleanUpRows = function () {
    var b,
        a = this;a.options.rows > 1 && (b = a.$slides.children().children(), b.removeAttr("style"), a.$slider.empty().append(b));
  }, b.prototype.clickHandler = function (a) {
    var b = this;b.shouldClick === !1 && (a.stopImmediatePropagation(), a.stopPropagation(), a.preventDefault());
  }, b.prototype.destroy = function (b) {
    var c = this;c.autoPlayClear(), c.touchObject = {}, c.cleanUpEvents(), a(".slick-cloned", c.$slider).detach(), c.$dots && c.$dots.remove(), c.$prevArrow && c.$prevArrow.length && (c.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), c.htmlExpr.test(c.options.prevArrow) && c.$prevArrow.remove()), c.$nextArrow && c.$nextArrow.length && (c.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), c.htmlExpr.test(c.options.nextArrow) && c.$nextArrow.remove()), c.$slides && (c.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function () {
      a(this).attr("style", a(this).data("originalStyling"));
    }), c.$slideTrack.children(this.options.slide).detach(), c.$slideTrack.detach(), c.$list.detach(), c.$slider.append(c.$slides)), c.cleanUpRows(), c.$slider.removeClass("slick-slider"), c.$slider.removeClass("slick-initialized"), c.$slider.removeClass("slick-dotted"), c.unslicked = !0, b || c.$slider.trigger("destroy", [c]);
  }, b.prototype.disableTransition = function (a) {
    var b = this,
        c = {};c[b.transitionType] = "", b.options.fade === !1 ? b.$slideTrack.css(c) : b.$slides.eq(a).css(c);
  }, b.prototype.fadeSlide = function (a, b) {
    var c = this;c.cssTransitions === !1 ? (c.$slides.eq(a).css({ zIndex: c.options.zIndex }), c.$slides.eq(a).animate({ opacity: 1 }, c.options.speed, c.options.easing, b)) : (c.applyTransition(a), c.$slides.eq(a).css({ opacity: 1, zIndex: c.options.zIndex }), b && setTimeout(function () {
      c.disableTransition(a), b.call();
    }, c.options.speed));
  }, b.prototype.fadeSlideOut = function (a) {
    var b = this;b.cssTransitions === !1 ? b.$slides.eq(a).animate({ opacity: 0, zIndex: b.options.zIndex - 2 }, b.options.speed, b.options.easing) : (b.applyTransition(a), b.$slides.eq(a).css({ opacity: 0, zIndex: b.options.zIndex - 2 }));
  }, b.prototype.filterSlides = b.prototype.slickFilter = function (a) {
    var b = this;null !== a && (b.$slidesCache = b.$slides, b.unload(), b.$slideTrack.children(this.options.slide).detach(), b.$slidesCache.filter(a).appendTo(b.$slideTrack), b.reinit());
  }, b.prototype.focusHandler = function () {
    var b = this;b.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*:not(.slick-arrow)", function (c) {
      c.stopImmediatePropagation();var d = a(this);setTimeout(function () {
        b.options.pauseOnFocus && (b.focussed = d.is(":focus"), b.autoPlay());
      }, 0);
    });
  }, b.prototype.getCurrent = b.prototype.slickCurrentSlide = function () {
    var a = this;return a.currentSlide;
  }, b.prototype.getDotCount = function () {
    var a = this,
        b = 0,
        c = 0,
        d = 0;if (a.options.infinite === !0) for (; b < a.slideCount;) ++d, b = c + a.options.slidesToScroll, c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;else if (a.options.centerMode === !0) d = a.slideCount;else if (a.options.asNavFor) for (; b < a.slideCount;) ++d, b = c + a.options.slidesToScroll, c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;else d = 1 + Math.ceil((a.slideCount - a.options.slidesToShow) / a.options.slidesToScroll);return d - 1;
  }, b.prototype.getLeft = function (a) {
    var c,
        d,
        f,
        b = this,
        e = 0;return b.slideOffset = 0, d = b.$slides.first().outerHeight(!0), b.options.infinite === !0 ? (b.slideCount > b.options.slidesToShow && (b.slideOffset = b.slideWidth * b.options.slidesToShow * -1, e = d * b.options.slidesToShow * -1), b.slideCount % b.options.slidesToScroll !== 0 && a + b.options.slidesToScroll > b.slideCount && b.slideCount > b.options.slidesToShow && (a > b.slideCount ? (b.slideOffset = (b.options.slidesToShow - (a - b.slideCount)) * b.slideWidth * -1, e = (b.options.slidesToShow - (a - b.slideCount)) * d * -1) : (b.slideOffset = b.slideCount % b.options.slidesToScroll * b.slideWidth * -1, e = b.slideCount % b.options.slidesToScroll * d * -1))) : a + b.options.slidesToShow > b.slideCount && (b.slideOffset = (a + b.options.slidesToShow - b.slideCount) * b.slideWidth, e = (a + b.options.slidesToShow - b.slideCount) * d), b.slideCount <= b.options.slidesToShow && (b.slideOffset = 0, e = 0), b.options.centerMode === !0 && b.options.infinite === !0 ? b.slideOffset += b.slideWidth * Math.floor(b.options.slidesToShow / 2) - b.slideWidth : b.options.centerMode === !0 && (b.slideOffset = 0, b.slideOffset += b.slideWidth * Math.floor(b.options.slidesToShow / 2)), c = b.options.vertical === !1 ? a * b.slideWidth * -1 + b.slideOffset : a * d * -1 + e, b.options.variableWidth === !0 && (f = b.slideCount <= b.options.slidesToShow || b.options.infinite === !1 ? b.$slideTrack.children(".slick-slide").eq(a) : b.$slideTrack.children(".slick-slide").eq(a + b.options.slidesToShow), c = b.options.rtl === !0 ? f[0] ? -1 * (b.$slideTrack.width() - f[0].offsetLeft - f.width()) : 0 : f[0] ? -1 * f[0].offsetLeft : 0, b.options.centerMode === !0 && (f = b.slideCount <= b.options.slidesToShow || b.options.infinite === !1 ? b.$slideTrack.children(".slick-slide").eq(a) : b.$slideTrack.children(".slick-slide").eq(a + b.options.slidesToShow + 1), c = b.options.rtl === !0 ? f[0] ? -1 * (b.$slideTrack.width() - f[0].offsetLeft - f.width()) : 0 : f[0] ? -1 * f[0].offsetLeft : 0, c += (b.$list.width() - f.outerWidth()) / 2)), c;
  }, b.prototype.getOption = b.prototype.slickGetOption = function (a) {
    var b = this;return b.options[a];
  }, b.prototype.getNavigableIndexes = function () {
    var e,
        a = this,
        b = 0,
        c = 0,
        d = [];for (a.options.infinite === !1 ? e = a.slideCount : (b = -1 * a.options.slidesToScroll, c = -1 * a.options.slidesToScroll, e = 2 * a.slideCount); e > b;) d.push(b), b = c + a.options.slidesToScroll, c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;return d;
  }, b.prototype.getSlick = function () {
    return this;
  }, b.prototype.getSlideCount = function () {
    var c,
        d,
        e,
        b = this;return e = b.options.centerMode === !0 ? b.slideWidth * Math.floor(b.options.slidesToShow / 2) : 0, b.options.swipeToSlide === !0 ? (b.$slideTrack.find(".slick-slide").each(function (c, f) {
      return f.offsetLeft - e + a(f).outerWidth() / 2 > -1 * b.swipeLeft ? (d = f, !1) : void 0;
    }), c = Math.abs(a(d).attr("data-slick-index") - b.currentSlide) || 1) : b.options.slidesToScroll;
  }, b.prototype.goTo = b.prototype.slickGoTo = function (a, b) {
    var c = this;c.changeSlide({ data: { message: "index", index: parseInt(a) } }, b);
  }, b.prototype.init = function (b) {
    var c = this;a(c.$slider).hasClass("slick-initialized") || (a(c.$slider).addClass("slick-initialized"), c.buildRows(), c.buildOut(), c.setProps(), c.startLoad(), c.loadSlider(), c.initializeEvents(), c.updateArrows(), c.updateDots(), c.checkResponsive(!0), c.focusHandler()), b && c.$slider.trigger("init", [c]), c.options.accessibility === !0 && c.initADA(), c.options.autoplay && (c.paused = !1, c.autoPlay());
  }, b.prototype.initADA = function () {
    var b = this;b.$slides.add(b.$slideTrack.find(".slick-cloned")).attr({ "aria-hidden": "true", tabindex: "-1" }).find("a, input, button, select").attr({ tabindex: "-1" }), b.$slideTrack.attr("role", "listbox"), b.$slides.not(b.$slideTrack.find(".slick-cloned")).each(function (c) {
      a(this).attr({ role: "option", "aria-describedby": "slick-slide" + b.instanceUid + c });
    }), null !== b.$dots && b.$dots.attr("role", "tablist").find("li").each(function (c) {
      a(this).attr({ role: "presentation", "aria-selected": "false", "aria-controls": "navigation" + b.instanceUid + c, id: "slick-slide" + b.instanceUid + c });
    }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end().closest("div").attr("role", "toolbar"), b.activateADA();
  }, b.prototype.initArrowEvents = function () {
    var a = this;a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && (a.$prevArrow.off("click.slick").on("click.slick", { message: "previous" }, a.changeSlide), a.$nextArrow.off("click.slick").on("click.slick", { message: "next" }, a.changeSlide));
  }, b.prototype.initDotEvents = function () {
    var b = this;b.options.dots === !0 && b.slideCount > b.options.slidesToShow && a("li", b.$dots).on("click.slick", { message: "index" }, b.changeSlide), b.options.dots === !0 && b.options.pauseOnDotsHover === !0 && a("li", b.$dots).on("mouseenter.slick", a.proxy(b.interrupt, b, !0)).on("mouseleave.slick", a.proxy(b.interrupt, b, !1));
  }, b.prototype.initSlideEvents = function () {
    var b = this;b.options.pauseOnHover && (b.$list.on("mouseenter.slick", a.proxy(b.interrupt, b, !0)), b.$list.on("mouseleave.slick", a.proxy(b.interrupt, b, !1)));
  }, b.prototype.initializeEvents = function () {
    var b = this;b.initArrowEvents(), b.initDotEvents(), b.initSlideEvents(), b.$list.on("touchstart.slick mousedown.slick", { action: "start" }, b.swipeHandler), b.$list.on("touchmove.slick mousemove.slick", { action: "move" }, b.swipeHandler), b.$list.on("touchend.slick mouseup.slick", { action: "end" }, b.swipeHandler), b.$list.on("touchcancel.slick mouseleave.slick", { action: "end" }, b.swipeHandler), b.$list.on("click.slick", b.clickHandler), a(document).on(b.visibilityChange, a.proxy(b.visibility, b)), b.options.accessibility === !0 && b.$list.on("keydown.slick", b.keyHandler), b.options.focusOnSelect === !0 && a(b.$slideTrack).children().on("click.slick", b.selectHandler), a(window).on("orientationchange.slick.slick-" + b.instanceUid, a.proxy(b.orientationChange, b)), a(window).on("resize.slick.slick-" + b.instanceUid, a.proxy(b.resize, b)), a("[draggable!=true]", b.$slideTrack).on("dragstart", b.preventDefault), a(window).on("load.slick.slick-" + b.instanceUid, b.setPosition), a(document).on("ready.slick.slick-" + b.instanceUid, b.setPosition);
  }, b.prototype.initUI = function () {
    var a = this;a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && (a.$prevArrow.show(), a.$nextArrow.show()), a.options.dots === !0 && a.slideCount > a.options.slidesToShow && a.$dots.show();
  }, b.prototype.keyHandler = function (a) {
    var b = this;a.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === a.keyCode && b.options.accessibility === !0 ? b.changeSlide({ data: { message: b.options.rtl === !0 ? "next" : "previous" } }) : 39 === a.keyCode && b.options.accessibility === !0 && b.changeSlide({ data: { message: b.options.rtl === !0 ? "previous" : "next" } }));
  }, b.prototype.lazyLoad = function () {
    function g(c) {
      a("img[data-lazy]", c).each(function () {
        var c = a(this),
            d = a(this).attr("data-lazy"),
            e = document.createElement("img");e.onload = function () {
          c.animate({ opacity: 0 }, 100, function () {
            c.attr("src", d).animate({ opacity: 1 }, 200, function () {
              c.removeAttr("data-lazy").removeClass("slick-loading");
            }), b.$slider.trigger("lazyLoaded", [b, c, d]);
          });
        }, e.onerror = function () {
          c.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), b.$slider.trigger("lazyLoadError", [b, c, d]);
        }, e.src = d;
      });
    }var c,
        d,
        e,
        f,
        b = this;b.options.centerMode === !0 ? b.options.infinite === !0 ? (e = b.currentSlide + (b.options.slidesToShow / 2 + 1), f = e + b.options.slidesToShow + 2) : (e = Math.max(0, b.currentSlide - (b.options.slidesToShow / 2 + 1)), f = 2 + (b.options.slidesToShow / 2 + 1) + b.currentSlide) : (e = b.options.infinite ? b.options.slidesToShow + b.currentSlide : b.currentSlide, f = Math.ceil(e + b.options.slidesToShow), b.options.fade === !0 && (e > 0 && e--, f <= b.slideCount && f++)), c = b.$slider.find(".slick-slide").slice(e, f), g(c), b.slideCount <= b.options.slidesToShow ? (d = b.$slider.find(".slick-slide"), g(d)) : b.currentSlide >= b.slideCount - b.options.slidesToShow ? (d = b.$slider.find(".slick-cloned").slice(0, b.options.slidesToShow), g(d)) : 0 === b.currentSlide && (d = b.$slider.find(".slick-cloned").slice(-1 * b.options.slidesToShow), g(d));
  }, b.prototype.loadSlider = function () {
    var a = this;a.setPosition(), a.$slideTrack.css({ opacity: 1 }), a.$slider.removeClass("slick-loading"), a.initUI(), "progressive" === a.options.lazyLoad && a.progressiveLazyLoad();
  }, b.prototype.next = b.prototype.slickNext = function () {
    var a = this;a.changeSlide({ data: { message: "next" } });
  }, b.prototype.orientationChange = function () {
    var a = this;a.checkResponsive(), a.setPosition();
  }, b.prototype.pause = b.prototype.slickPause = function () {
    var a = this;a.autoPlayClear(), a.paused = !0;
  }, b.prototype.play = b.prototype.slickPlay = function () {
    var a = this;a.autoPlay(), a.options.autoplay = !0, a.paused = !1, a.focussed = !1, a.interrupted = !1;
  }, b.prototype.postSlide = function (a) {
    var b = this;b.unslicked || (b.$slider.trigger("afterChange", [b, a]), b.animating = !1, b.setPosition(), b.swipeLeft = null, b.options.autoplay && b.autoPlay(), b.options.accessibility === !0 && b.initADA());
  }, b.prototype.prev = b.prototype.slickPrev = function () {
    var a = this;a.changeSlide({ data: { message: "previous" } });
  }, b.prototype.preventDefault = function (a) {
    a.preventDefault();
  }, b.prototype.progressiveLazyLoad = function (b) {
    b = b || 1;var e,
        f,
        g,
        c = this,
        d = a("img[data-lazy]", c.$slider);d.length ? (e = d.first(), f = e.attr("data-lazy"), g = document.createElement("img"), g.onload = function () {
      e.attr("src", f).removeAttr("data-lazy").removeClass("slick-loading"), c.options.adaptiveHeight === !0 && c.setPosition(), c.$slider.trigger("lazyLoaded", [c, e, f]), c.progressiveLazyLoad();
    }, g.onerror = function () {
      3 > b ? setTimeout(function () {
        c.progressiveLazyLoad(b + 1);
      }, 500) : (e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), c.$slider.trigger("lazyLoadError", [c, e, f]), c.progressiveLazyLoad());
    }, g.src = f) : c.$slider.trigger("allImagesLoaded", [c]);
  }, b.prototype.refresh = function (b) {
    var d,
        e,
        c = this;e = c.slideCount - c.options.slidesToShow, !c.options.infinite && c.currentSlide > e && (c.currentSlide = e), c.slideCount <= c.options.slidesToShow && (c.currentSlide = 0), d = c.currentSlide, c.destroy(!0), a.extend(c, c.initials, { currentSlide: d }), c.init(), b || c.changeSlide({ data: { message: "index", index: d } }, !1);
  }, b.prototype.registerBreakpoints = function () {
    var c,
        d,
        e,
        b = this,
        f = b.options.responsive || null;if ("array" === a.type(f) && f.length) {
      b.respondTo = b.options.respondTo || "window";for (c in f) if (e = b.breakpoints.length - 1, d = f[c].breakpoint, f.hasOwnProperty(c)) {
        for (; e >= 0;) b.breakpoints[e] && b.breakpoints[e] === d && b.breakpoints.splice(e, 1), e--;b.breakpoints.push(d), b.breakpointSettings[d] = f[c].settings;
      }b.breakpoints.sort(function (a, c) {
        return b.options.mobileFirst ? a - c : c - a;
      });
    }
  }, b.prototype.reinit = function () {
    var b = this;b.$slides = b.$slideTrack.children(b.options.slide).addClass("slick-slide"), b.slideCount = b.$slides.length, b.currentSlide >= b.slideCount && 0 !== b.currentSlide && (b.currentSlide = b.currentSlide - b.options.slidesToScroll), b.slideCount <= b.options.slidesToShow && (b.currentSlide = 0), b.registerBreakpoints(), b.setProps(), b.setupInfinite(), b.buildArrows(), b.updateArrows(), b.initArrowEvents(), b.buildDots(), b.updateDots(), b.initDotEvents(), b.cleanUpSlideEvents(), b.initSlideEvents(), b.checkResponsive(!1, !0), b.options.focusOnSelect === !0 && a(b.$slideTrack).children().on("click.slick", b.selectHandler), b.setSlideClasses("number" == typeof b.currentSlide ? b.currentSlide : 0), b.setPosition(), b.focusHandler(), b.paused = !b.options.autoplay, b.autoPlay(), b.$slider.trigger("reInit", [b]);
  }, b.prototype.resize = function () {
    var b = this;a(window).width() !== b.windowWidth && (clearTimeout(b.windowDelay), b.windowDelay = window.setTimeout(function () {
      b.windowWidth = a(window).width(), b.checkResponsive(), b.unslicked || b.setPosition();
    }, 50));
  }, b.prototype.removeSlide = b.prototype.slickRemove = function (a, b, c) {
    var d = this;return "boolean" == typeof a ? (b = a, a = b === !0 ? 0 : d.slideCount - 1) : a = b === !0 ? --a : a, d.slideCount < 1 || 0 > a || a > d.slideCount - 1 ? !1 : (d.unload(), c === !0 ? d.$slideTrack.children().remove() : d.$slideTrack.children(this.options.slide).eq(a).remove(), d.$slides = d.$slideTrack.children(this.options.slide), d.$slideTrack.children(this.options.slide).detach(), d.$slideTrack.append(d.$slides), d.$slidesCache = d.$slides, void d.reinit());
  }, b.prototype.setCSS = function (a) {
    var d,
        e,
        b = this,
        c = {};b.options.rtl === !0 && (a = -a), d = "left" == b.positionProp ? Math.ceil(a) + "px" : "0px", e = "top" == b.positionProp ? Math.ceil(a) + "px" : "0px", c[b.positionProp] = a, b.transformsEnabled === !1 ? b.$slideTrack.css(c) : (c = {}, b.cssTransitions === !1 ? (c[b.animType] = "translate(" + d + ", " + e + ")", b.$slideTrack.css(c)) : (c[b.animType] = "translate3d(" + d + ", " + e + ", 0px)", b.$slideTrack.css(c)));
  }, b.prototype.setDimensions = function () {
    var a = this;a.options.vertical === !1 ? a.options.centerMode === !0 && a.$list.css({ padding: "0px " + a.options.centerPadding }) : (a.$list.height(a.$slides.first().outerHeight(!0) * a.options.slidesToShow), a.options.centerMode === !0 && a.$list.css({ padding: a.options.centerPadding + " 0px" })), a.listWidth = a.$list.width(), a.listHeight = a.$list.height(), a.options.vertical === !1 && a.options.variableWidth === !1 ? (a.slideWidth = Math.ceil(a.listWidth / a.options.slidesToShow), a.$slideTrack.width(Math.ceil(a.slideWidth * a.$slideTrack.children(".slick-slide").length))) : a.options.variableWidth === !0 ? a.$slideTrack.width(5e3 * a.slideCount) : (a.slideWidth = Math.ceil(a.listWidth), a.$slideTrack.height(Math.ceil(a.$slides.first().outerHeight(!0) * a.$slideTrack.children(".slick-slide").length)));var b = a.$slides.first().outerWidth(!0) - a.$slides.first().width();a.options.variableWidth === !1 && a.$slideTrack.children(".slick-slide").width(a.slideWidth - b);
  }, b.prototype.setFade = function () {
    var c,
        b = this;b.$slides.each(function (d, e) {
      c = b.slideWidth * d * -1, b.options.rtl === !0 ? a(e).css({ position: "relative", right: c, top: 0, zIndex: b.options.zIndex - 2, opacity: 0 }) : a(e).css({ position: "relative", left: c, top: 0, zIndex: b.options.zIndex - 2, opacity: 0 });
    }), b.$slides.eq(b.currentSlide).css({ zIndex: b.options.zIndex - 1, opacity: 1 });
  }, b.prototype.setHeight = function () {
    var a = this;if (1 === a.options.slidesToShow && a.options.adaptiveHeight === !0 && a.options.vertical === !1) {
      var b = a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.css("height", b);
    }
  }, b.prototype.setOption = b.prototype.slickSetOption = function () {
    var c,
        d,
        e,
        f,
        h,
        b = this,
        g = !1;if ("object" === a.type(arguments[0]) ? (e = arguments[0], g = arguments[1], h = "multiple") : "string" === a.type(arguments[0]) && (e = arguments[0], f = arguments[1], g = arguments[2], "responsive" === arguments[0] && "array" === a.type(arguments[1]) ? h = "responsive" : "undefined" != typeof arguments[1] && (h = "single")), "single" === h) b.options[e] = f;else if ("multiple" === h) a.each(e, function (a, c) {
      b.options[a] = c;
    });else if ("responsive" === h) for (d in f) if ("array" !== a.type(b.options.responsive)) b.options.responsive = [f[d]];else {
      for (c = b.options.responsive.length - 1; c >= 0;) b.options.responsive[c].breakpoint === f[d].breakpoint && b.options.responsive.splice(c, 1), c--;b.options.responsive.push(f[d]);
    }g && (b.unload(), b.reinit());
  }, b.prototype.setPosition = function () {
    var a = this;a.setDimensions(), a.setHeight(), a.options.fade === !1 ? a.setCSS(a.getLeft(a.currentSlide)) : a.setFade(), a.$slider.trigger("setPosition", [a]);
  }, b.prototype.setProps = function () {
    var a = this,
        b = document.body.style;a.positionProp = a.options.vertical === !0 ? "top" : "left", "top" === a.positionProp ? a.$slider.addClass("slick-vertical") : a.$slider.removeClass("slick-vertical"), (void 0 !== b.WebkitTransition || void 0 !== b.MozTransition || void 0 !== b.msTransition) && a.options.useCSS === !0 && (a.cssTransitions = !0), a.options.fade && ("number" == typeof a.options.zIndex ? a.options.zIndex < 3 && (a.options.zIndex = 3) : a.options.zIndex = a.defaults.zIndex), void 0 !== b.OTransform && (a.animType = "OTransform", a.transformType = "-o-transform", a.transitionType = "OTransition", void 0 === b.perspectiveProperty && void 0 === b.webkitPerspective && (a.animType = !1)), void 0 !== b.MozTransform && (a.animType = "MozTransform", a.transformType = "-moz-transform", a.transitionType = "MozTransition", void 0 === b.perspectiveProperty && void 0 === b.MozPerspective && (a.animType = !1)), void 0 !== b.webkitTransform && (a.animType = "webkitTransform", a.transformType = "-webkit-transform", a.transitionType = "webkitTransition", void 0 === b.perspectiveProperty && void 0 === b.webkitPerspective && (a.animType = !1)), void 0 !== b.msTransform && (a.animType = "msTransform", a.transformType = "-ms-transform", a.transitionType = "msTransition", void 0 === b.msTransform && (a.animType = !1)), void 0 !== b.transform && a.animType !== !1 && (a.animType = "transform", a.transformType = "transform", a.transitionType = "transition"), a.transformsEnabled = a.options.useTransform && null !== a.animType && a.animType !== !1;
  }, b.prototype.setSlideClasses = function (a) {
    var c,
        d,
        e,
        f,
        b = this;d = b.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), b.$slides.eq(a).addClass("slick-current"), b.options.centerMode === !0 ? (c = Math.floor(b.options.slidesToShow / 2), b.options.infinite === !0 && (a >= c && a <= b.slideCount - 1 - c ? b.$slides.slice(a - c, a + c + 1).addClass("slick-active").attr("aria-hidden", "false") : (e = b.options.slidesToShow + a, d.slice(e - c + 1, e + c + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === a ? d.eq(d.length - 1 - b.options.slidesToShow).addClass("slick-center") : a === b.slideCount - 1 && d.eq(b.options.slidesToShow).addClass("slick-center")), b.$slides.eq(a).addClass("slick-center")) : a >= 0 && a <= b.slideCount - b.options.slidesToShow ? b.$slides.slice(a, a + b.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : d.length <= b.options.slidesToShow ? d.addClass("slick-active").attr("aria-hidden", "false") : (f = b.slideCount % b.options.slidesToShow, e = b.options.infinite === !0 ? b.options.slidesToShow + a : a, b.options.slidesToShow == b.options.slidesToScroll && b.slideCount - a < b.options.slidesToShow ? d.slice(e - (b.options.slidesToShow - f), e + f).addClass("slick-active").attr("aria-hidden", "false") : d.slice(e, e + b.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")), "ondemand" === b.options.lazyLoad && b.lazyLoad();
  }, b.prototype.setupInfinite = function () {
    var c,
        d,
        e,
        b = this;if (b.options.fade === !0 && (b.options.centerMode = !1), b.options.infinite === !0 && b.options.fade === !1 && (d = null, b.slideCount > b.options.slidesToShow)) {
      for (e = b.options.centerMode === !0 ? b.options.slidesToShow + 1 : b.options.slidesToShow, c = b.slideCount; c > b.slideCount - e; c -= 1) d = c - 1, a(b.$slides[d]).clone(!0).attr("id", "").attr("data-slick-index", d - b.slideCount).prependTo(b.$slideTrack).addClass("slick-cloned");for (c = 0; e > c; c += 1) d = c, a(b.$slides[d]).clone(!0).attr("id", "").attr("data-slick-index", d + b.slideCount).appendTo(b.$slideTrack).addClass("slick-cloned");b.$slideTrack.find(".slick-cloned").find("[id]").each(function () {
        a(this).attr("id", "");
      });
    }
  }, b.prototype.interrupt = function (a) {
    var b = this;a || b.autoPlay(), b.interrupted = a;
  }, b.prototype.selectHandler = function (b) {
    var c = this,
        d = a(b.target).is(".slick-slide") ? a(b.target) : a(b.target).parents(".slick-slide"),
        e = parseInt(d.attr("data-slick-index"));return e || (e = 0), c.slideCount <= c.options.slidesToShow ? (c.setSlideClasses(e), void c.asNavFor(e)) : void c.slideHandler(e);
  }, b.prototype.slideHandler = function (a, b, c) {
    var d,
        e,
        f,
        g,
        j,
        h = null,
        i = this;return b = b || !1, i.animating === !0 && i.options.waitForAnimate === !0 || i.options.fade === !0 && i.currentSlide === a || i.slideCount <= i.options.slidesToShow ? void 0 : (b === !1 && i.asNavFor(a), d = a, h = i.getLeft(d), g = i.getLeft(i.currentSlide), i.currentLeft = null === i.swipeLeft ? g : i.swipeLeft, i.options.infinite === !1 && i.options.centerMode === !1 && (0 > a || a > i.getDotCount() * i.options.slidesToScroll) ? void (i.options.fade === !1 && (d = i.currentSlide, c !== !0 ? i.animateSlide(g, function () {
      i.postSlide(d);
    }) : i.postSlide(d))) : i.options.infinite === !1 && i.options.centerMode === !0 && (0 > a || a > i.slideCount - i.options.slidesToScroll) ? void (i.options.fade === !1 && (d = i.currentSlide, c !== !0 ? i.animateSlide(g, function () {
      i.postSlide(d);
    }) : i.postSlide(d))) : (i.options.autoplay && clearInterval(i.autoPlayTimer), e = 0 > d ? i.slideCount % i.options.slidesToScroll !== 0 ? i.slideCount - i.slideCount % i.options.slidesToScroll : i.slideCount + d : d >= i.slideCount ? i.slideCount % i.options.slidesToScroll !== 0 ? 0 : d - i.slideCount : d, i.animating = !0, i.$slider.trigger("beforeChange", [i, i.currentSlide, e]), f = i.currentSlide, i.currentSlide = e, i.setSlideClasses(i.currentSlide), i.options.asNavFor && (j = i.getNavTarget(), j = j.slick("getSlick"), j.slideCount <= j.options.slidesToShow && j.setSlideClasses(i.currentSlide)), i.updateDots(), i.updateArrows(), i.options.fade === !0 ? (c !== !0 ? (i.fadeSlideOut(f), i.fadeSlide(e, function () {
      i.postSlide(e);
    })) : i.postSlide(e), void i.animateHeight()) : void (c !== !0 ? i.animateSlide(h, function () {
      i.postSlide(e);
    }) : i.postSlide(e))));
  }, b.prototype.startLoad = function () {
    var a = this;a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && (a.$prevArrow.hide(), a.$nextArrow.hide()), a.options.dots === !0 && a.slideCount > a.options.slidesToShow && a.$dots.hide(), a.$slider.addClass("slick-loading");
  }, b.prototype.swipeDirection = function () {
    var a,
        b,
        c,
        d,
        e = this;return a = e.touchObject.startX - e.touchObject.curX, b = e.touchObject.startY - e.touchObject.curY, c = Math.atan2(b, a), d = Math.round(180 * c / Math.PI), 0 > d && (d = 360 - Math.abs(d)), 45 >= d && d >= 0 ? e.options.rtl === !1 ? "left" : "right" : 360 >= d && d >= 315 ? e.options.rtl === !1 ? "left" : "right" : d >= 135 && 225 >= d ? e.options.rtl === !1 ? "right" : "left" : e.options.verticalSwiping === !0 ? d >= 35 && 135 >= d ? "down" : "up" : "vertical";
  }, b.prototype.swipeEnd = function (a) {
    var c,
        d,
        b = this;if (b.dragging = !1, b.interrupted = !1, b.shouldClick = b.touchObject.swipeLength > 10 ? !1 : !0, void 0 === b.touchObject.curX) return !1;if (b.touchObject.edgeHit === !0 && b.$slider.trigger("edge", [b, b.swipeDirection()]), b.touchObject.swipeLength >= b.touchObject.minSwipe) {
      switch (d = b.swipeDirection()) {case "left":case "down":
          c = b.options.swipeToSlide ? b.checkNavigable(b.currentSlide + b.getSlideCount()) : b.currentSlide + b.getSlideCount(), b.currentDirection = 0;break;case "right":case "up":
          c = b.options.swipeToSlide ? b.checkNavigable(b.currentSlide - b.getSlideCount()) : b.currentSlide - b.getSlideCount(), b.currentDirection = 1;}"vertical" != d && (b.slideHandler(c), b.touchObject = {}, b.$slider.trigger("swipe", [b, d]));
    } else b.touchObject.startX !== b.touchObject.curX && (b.slideHandler(b.currentSlide), b.touchObject = {});
  }, b.prototype.swipeHandler = function (a) {
    var b = this;if (!(b.options.swipe === !1 || "ontouchend" in document && b.options.swipe === !1 || b.options.draggable === !1 && -1 !== a.type.indexOf("mouse"))) switch (b.touchObject.fingerCount = a.originalEvent && void 0 !== a.originalEvent.touches ? a.originalEvent.touches.length : 1, b.touchObject.minSwipe = b.listWidth / b.options.touchThreshold, b.options.verticalSwiping === !0 && (b.touchObject.minSwipe = b.listHeight / b.options.touchThreshold), a.data.action) {case "start":
        b.swipeStart(a);break;case "move":
        b.swipeMove(a);break;case "end":
        b.swipeEnd(a);}
  }, b.prototype.swipeMove = function (a) {
    var d,
        e,
        f,
        g,
        h,
        b = this;return h = void 0 !== a.originalEvent ? a.originalEvent.touches : null, !b.dragging || h && 1 !== h.length ? !1 : (d = b.getLeft(b.currentSlide), b.touchObject.curX = void 0 !== h ? h[0].pageX : a.clientX, b.touchObject.curY = void 0 !== h ? h[0].pageY : a.clientY, b.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(b.touchObject.curX - b.touchObject.startX, 2))), b.options.verticalSwiping === !0 && (b.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(b.touchObject.curY - b.touchObject.startY, 2)))), e = b.swipeDirection(), "vertical" !== e ? (void 0 !== a.originalEvent && b.touchObject.swipeLength > 4 && a.preventDefault(), g = (b.options.rtl === !1 ? 1 : -1) * (b.touchObject.curX > b.touchObject.startX ? 1 : -1), b.options.verticalSwiping === !0 && (g = b.touchObject.curY > b.touchObject.startY ? 1 : -1), f = b.touchObject.swipeLength, b.touchObject.edgeHit = !1, b.options.infinite === !1 && (0 === b.currentSlide && "right" === e || b.currentSlide >= b.getDotCount() && "left" === e) && (f = b.touchObject.swipeLength * b.options.edgeFriction, b.touchObject.edgeHit = !0), b.options.vertical === !1 ? b.swipeLeft = d + f * g : b.swipeLeft = d + f * (b.$list.height() / b.listWidth) * g, b.options.verticalSwiping === !0 && (b.swipeLeft = d + f * g), b.options.fade === !0 || b.options.touchMove === !1 ? !1 : b.animating === !0 ? (b.swipeLeft = null, !1) : void b.setCSS(b.swipeLeft)) : void 0);
  }, b.prototype.swipeStart = function (a) {
    var c,
        b = this;return b.interrupted = !0, 1 !== b.touchObject.fingerCount || b.slideCount <= b.options.slidesToShow ? (b.touchObject = {}, !1) : (void 0 !== a.originalEvent && void 0 !== a.originalEvent.touches && (c = a.originalEvent.touches[0]), b.touchObject.startX = b.touchObject.curX = void 0 !== c ? c.pageX : a.clientX, b.touchObject.startY = b.touchObject.curY = void 0 !== c ? c.pageY : a.clientY, void (b.dragging = !0));
  }, b.prototype.unfilterSlides = b.prototype.slickUnfilter = function () {
    var a = this;null !== a.$slidesCache && (a.unload(), a.$slideTrack.children(this.options.slide).detach(), a.$slidesCache.appendTo(a.$slideTrack), a.reinit());
  }, b.prototype.unload = function () {
    var b = this;a(".slick-cloned", b.$slider).remove(), b.$dots && b.$dots.remove(), b.$prevArrow && b.htmlExpr.test(b.options.prevArrow) && b.$prevArrow.remove(), b.$nextArrow && b.htmlExpr.test(b.options.nextArrow) && b.$nextArrow.remove(), b.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
  }, b.prototype.unslick = function (a) {
    var b = this;b.$slider.trigger("unslick", [b, a]), b.destroy();
  }, b.prototype.updateArrows = function () {
    var b,
        a = this;b = Math.floor(a.options.slidesToShow / 2), a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && !a.options.infinite && (a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === a.currentSlide ? (a.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : a.currentSlide >= a.slideCount - a.options.slidesToShow && a.options.centerMode === !1 ? (a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : a.currentSlide >= a.slideCount - 1 && a.options.centerMode === !0 && (a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")));
  }, b.prototype.updateDots = function () {
    var a = this;null !== a.$dots && (a.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true"), a.$dots.find("li").eq(Math.floor(a.currentSlide / a.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false"));
  }, b.prototype.visibility = function () {
    var a = this;a.options.autoplay && (document[a.hidden] ? a.interrupted = !0 : a.interrupted = !1);
  }, a.fn.slick = function () {
    var f,
        g,
        a = this,
        c = arguments[0],
        d = Array.prototype.slice.call(arguments, 1),
        e = a.length;for (f = 0; e > f; f++) if ("object" == typeof c || "undefined" == typeof c ? a[f].slick = new b(a[f], c) : g = a[f].slick[c].apply(a[f].slick, d), "undefined" != typeof g) return g;return a;
  };
});
;//about tabs
$(document).ready(function () {
    $('#article-about .tabs li').on('click', function () {
        var tab = $(this).data('section');
        $('#article-about .tabs li').removeClass('active');
        $(this).addClass('active');
        $('#article-about .section').hide();
        $('#about-' + tab).show();
        $('#about-' + tab).children('.scroll-pane').jScrollPane({ showArrows: true }).reinitialise();
    });
});
;$(document).ready(function () {
    "use strict";

    var body = $("html, body"),
        menuButton = $(".js-menu-button"),
        langButton = $(".js-lang-button"),
        arrowMobileButton = $(".js-arrow-mobile"),
        arrowMobileFirstButton = $(".js-arrow-mobile-first"),
        arrowDesktopButton = $(".js-arrow-desktop"),
        articles = $(".main__contents > .article"),
        navLink = $(".js-nav-link"),
        mainNav = $(".nav--main > .nav--item"),
        arrowPrev = $(".icon-arrow--prev"),
        arrowNext = $(".icon-arrow--next"),
        scrollContainer = $(".scroll-container"),
        activeIndex = 0,
        scrollPane = $(".scroll-pane");

    function makePageActiveByIndex() {
        articles.removeClass("active");
        articles.eq(activeIndex).addClass("active");
        articles.eq(activeIndex).find('.scroll-pane').jScrollPane({ showArrows: true });

        navLink.removeClass("active");
        navLink.eq(activeIndex).addClass("active");
        body.removeClass("menu-open").addClass("article-active");

        arrowPrev.removeClass("hide");
        if (activeIndex === 0) {
            arrowPrev.addClass("hide");
        }
        arrowNext.removeClass("hide");
        if (activeIndex + 1 >= articles.length) {
            arrowNext.addClass("hide");
        }

        //Hide the first load mobile view arrow
        arrowMobileFirstButton.hide();

        //We need to re-initialise jscrollpane if this is panel has one
        //$(pageID).find(".scroll-pane").jScrollPane();
    }

    menuButton.on("click", function () {
        body.toggleClass("menu-open");
        if (body.hasClass("menu-open")) {
            body.removeClass("lang-open");
        }
    });

    langButton.on("click", function () {
        body.toggleClass("lang-open");
        if (!body.hasClass("menu-open")) {
            body.addClass("menu-open");
        }
    });

    navLink.on("click", function (event) {
        event.preventDefault();
        var activeLink = $(this).parent();
        activeIndex = mainNav.index(activeLink);

        makePageActiveByIndex();

        body.removeClass("menu-open").addClass("article-active").scrollTop(0);
    });

    arrowMobileButton.on("click", function (event) {
        event.preventDefault();
        var arrowHref = $(this).attr("href"),
            arrowTarget = $(arrowHref);

        navLink.removeClass("active");
        $("a[href='" + arrowHref + "']").addClass("active");

        //Arrow down click (mobile - tablet)
        body.animate({
            scrollTop: arrowTarget.offset().top
        }, 300);
    });

    arrowMobileFirstButton.on("click", function (event) {
        event.preventDefault();
        var arrowHref = $(this).attr("href"),
            arrowTarget = $(arrowHref);

        navLink.removeClass("active");
        $("a[href='" + arrowHref + "']").addClass("active");

        activeIndex = 0;
        makePageActiveByIndex();

        //Arrow down click (mobile - tablet)
        body.animate({
            scrollTop: arrowTarget.offset().top
        }, 300);
    });

    arrowDesktopButton.on("click", function (event) {
        event.preventDefault();
        var direction = $(this).data("direction"),
            activeArticle = $(".article.active");

        activeIndex = articles.index(activeArticle);

        if (direction === "next") {
            if (activeIndex + 1 >= articles.length) {
                return;
            }

            if (activeIndex === -1) {
                activeIndex = 0;
            } else {
                activeIndex++;
            }
        }
        if (direction === "prev") {
            if (activeIndex > 0) {
                activeIndex--;
            } else {
                return;
            }
        }

        makePageActiveByIndex();
    });

    arrowPrev.addClass("hide");

    // //Hide on first load
    // arrowButton.first().siblings(".js-arrow-down").hide();
    // $(".article").first().siblings(".article").hide();

    function checkWindowWidth() {
        if (activeIndex === 0) {

            if ($(window).width() <= 1024) {

                var apis = [];
                apis.push(scrollPane.jScrollPane().data().jsp);
                if (apis.length) {
                    $.each(apis, function () {
                        this.destroy();
                    });
                }
                //scrollContainer.empty();
                return;
            }
            //scrollPane.jScrollPane();
        }
    }

    var afterSize;
    // window.onresize = function(){
    //     clearTimeout(afterSize);
    //     afterSize = setTimeout(checkWindowWidth, 200);
    // };
});
;$(document).ready(function () {
    "use strict";

    var body = $("html, body"),
        slides = $("#slides"),
        modalButton = $(".js-gallery-open"),
        modalCloseButton = $(".js-gallery-close");

    function getSliderSettings() {
        return {
            dots: true
        };
    }

    slides.slick(getSliderSettings());

    function buildImageSlide(slideTitle, slideSrc) {
        var figcaption = $("<figcaption/>", {
            text: slideTitle
        }),
            img = $("<img>", {
            class: "slide__image",
            title: slideTitle,
            src: slideSrc
        }),
            picture = $("<picture/>", {
            class: "slide"
        }).append(img, figcaption),
            aTag = $("<a/>", {
            href: slideSrc,
            class: "slide--link",
            target: "_blank"
        }).append(picture);
        return $("<li/>", {
            class: "list list--slides"
        }).append(aTag);
    }

    function buildYTSlide(slideTitle, slideSrc) {
        var iframe = $("<iframe/>", {
            frameborder: 0,
            src: "https://www.youtube.com/embed/" + slideSrc + "?rel=0",
            allowfullscreen: true
        }),
            div = $("<div/>", {
            class: "youtube"
        }).append(iframe);
        //<iframe width="320" height="180" src="https://www.youtube.com/embed/0U-C6r3tsuI?rel=0" frameborder="0" allowfullscreen></iframe>
        return $("<li/>", {
            class: "list list--slides"
        }).append(div);
    }

    modalButton.on("click", function () {
        var galleryType = $(this).data("type"),
            gallery = $(this).data("target");
        if (galleryType === "videos" || galleryType === "images") {
            body.addClass("modal-open");
            $.ajax({
                dataType: "json",
                url: "./home.json",
                success: function (data) {
                    var galleryData = data[gallery];

                    slides.slick("unslick"); /* ONLY remove the classes and handlers added on initialize */
                    $(".list--slides").remove(); /* Remove current slides elements, in case that you want to show new slides. */
                    if (galleryType === "images") {
                        $.each(galleryData, function (index, slide) {
                            slides.append(buildImageSlide(slide.title, slide.src));
                        });
                    }

                    if (galleryType === "videos") {
                        $.each(galleryData, function (index, slide) {
                            slides.append(buildYTSlide(slide.title, slide.src));
                        });
                    }

                    slides.slick(getSliderSettings()); /* Initialize the slick again */
                }
            });
        }
    });

    modalCloseButton.on("click", function () {
        body.removeClass("modal-open");
        slides.slick("unslick");
        $(".list--slides").remove();
    });
});
;$(document).ready(function () {
    "use strict";

    var sound = $(".js-sound"),
        soundContainer = $("#ambiance");

    sound.on("click", function (event) {
        event.preventDefault();
        if (soundContainer[0].paused) {
            soundContainer[0].play();
        } else {
            soundContainer[0].pause();
        }

        $(this).toggleClass("active");
    });
});
;$("img.svg").each(function () {
    "use strict";

    var $img = $(this);
    var imgID = $img.attr("id");
    var imgClass = $img.attr("class");
    var imgURL = $img.attr("src");

    $.get(imgURL, function (data) {
        // Get the SVG tag, ignore the rest
        var $svg = $(data).find("svg");

        // Add replaced image"s ID to the new SVG
        if (typeof imgID !== "undefined") {
            $svg = $svg.attr("id", imgID);
        }
        // Add replaced image"s classes to the new SVG
        if (typeof imgClass !== "undefined") {
            $svg = $svg.attr("class", imgClass + " replaced-svg");
        }

        // Remove any invalid XML tags as per http://validator.w3.org
        $svg = $svg.removeAttr("xmlns:a");

        // Replace image with new SVG
        $img.replaceWith($svg);
    }, "xml");
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVybml6ci1jdXN0b20uanMiLCJqcXVlcnktMy4xLjEubWluLmpzIiwianF1ZXJ5Lm1vdXNld2hlZWwuanMiLCJqcXVlcnkuanNjcm9sbHBhbmUuanMiLCJzbGljay5taW4uanMiLCJtYWluLmpzIiwibWVudS5qcyIsInNsaWNrLmpzIiwic291bmQuanMiLCJzdmctcmVwbGFjZS5qcyJdLCJuYW1lcyI6WyJlIiwibiIsImEiLCJvIiwicyIsInQiLCJjIiwiciIsInAiLCJsIiwiaGFzT3duUHJvcGVydHkiLCJuYW1lIiwicHVzaCIsInRvTG93ZXJDYXNlIiwib3B0aW9ucyIsImFsaWFzZXMiLCJsZW5ndGgiLCJmbiIsInNwbGl0IiwiTW9kZXJuaXpyIiwiQm9vbGVhbiIsImkiLCJqb2luIiwiY2xhc3NOYW1lIiwiX2NvbmZpZyIsImNsYXNzUHJlZml4IiwiZiIsImJhc2VWYWwiLCJlbmFibGVKU0NsYXNzIiwiUmVnRXhwIiwicmVwbGFjZSIsImVuYWJsZUNsYXNzZXMiLCJjcmVhdGVFbGVtZW50IiwiYXJndW1lbnRzIiwiY3JlYXRlRWxlbWVudE5TIiwiY2FsbCIsImFwcGx5IiwiX3ZlcnNpb24iLCJ1c2VQcmVmaXhlcyIsIl9xIiwib24iLCJzZXRUaW1lb3V0IiwiYWRkVGVzdCIsImFkZEFzeW5jVGVzdCIsInByb3RvdHlwZSIsImRvY3VtZW50RWxlbWVudCIsIm5vZGVOYW1lIiwiY2FuUGxheVR5cGUiLCJvZ2ciLCJoMjY0Iiwid2VibSIsInZwOSIsImhscyIsImQiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImIiLCJtb2R1bGUiLCJleHBvcnRzIiwiRXJyb3IiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInNsaWNlIiwiZyIsImNvbmNhdCIsImgiLCJpbmRleE9mIiwiaiIsImsiLCJ0b1N0cmluZyIsIm0iLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicSIsImluaXQiLCJ1IiwidiIsInRvVXBwZXJDYXNlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwiZ2V0IiwicHVzaFN0YWNrIiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsIm1hcCIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZW5kIiwic29ydCIsInNwbGljZSIsImV4dGVuZCIsImlzRnVuY3Rpb24iLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwiaXNSZWFkeSIsImVycm9yIiwibm9vcCIsInR5cGUiLCJBcnJheSIsImlzV2luZG93IiwiaXNOdW1lcmljIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJjYW1lbENhc2UiLCJ3IiwidHJpbSIsIm1ha2VBcnJheSIsImluQXJyYXkiLCJncmVwIiwiZ3VpZCIsInByb3h5Iiwibm93IiwiRGF0ZSIsInN1cHBvcnQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIngiLCJ5IiwiaGEiLCJ6IiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJwb3AiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsIlEiLCJSIiwiUyIsIlQiLCJVIiwiViIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwiVyIsIlgiLCJZIiwiWiIsIiQiLCJfIiwiYWEiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJiYSIsImNhIiwiY2hhckNvZGVBdCIsImRhIiwiZWEiLCJ0YSIsImRpc2FibGVkIiwiZGlyIiwibmV4dCIsImNoaWxkTm9kZXMiLCJub2RlVHlwZSIsImZhIiwiZ2EiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwic2EiLCJxYSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwiaWEiLCJqYSIsImthIiwiYXR0ckhhbmRsZSIsImxhIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsIm1hIiwibmEiLCJvYSIsImlzRGlzYWJsZWQiLCJwYSIsImlzWE1MIiwic2V0RG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImF0dHJpYnV0ZXMiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ2YWx1ZSIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIm1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiY29udGFpbnMiLCJzb3J0RGV0YWNoZWQiLCJ1bnNoaWZ0IiwiYXR0ciIsInNwZWNpZmllZCIsImVzY2FwZSIsInVuaXF1ZVNvcnQiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsImdldFRleHQiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJtYXRjaCIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG9zIiwic2V0RmlsdGVycyIsIm5vdCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJ0YXJnZXQiLCJsb2NhdGlvbiIsImhhc2giLCJyb290IiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImVtcHR5IiwicGFyZW50IiwiaGVhZGVyIiwiaW5wdXQiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsIm50aCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwicmEiLCJmaWx0ZXJzIiwidG9rZW5pemUiLCJ1YSIsInZhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJjb21waWxlIiwic2VsZWN0b3IiLCJzZWxlY3QiLCJkZWZhdWx0VmFsdWUiLCJleHByIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsImlzIiwicGFyc2VIVE1MIiwicmVhZHkiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJzaWJsaW5ncyIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJDYWxsYmFja3MiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJtZW1vcnkiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwiZmlyZSIsImZpcmVkIiwicHJvbWlzZSIsImRvbmUiLCJmYWlsIiwidGhlbiIsIkRlZmVycmVkIiwic3RhdGUiLCJhbHdheXMiLCJwaXBlIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJyZXNvbHZlIiwicmVqZWN0IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwid2hlbiIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZSIsInN0YWNrIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeVdhaXQiLCJob2xkUmVhZHkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwidWlkIiwiY2FjaGUiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImFjY2VzcyIsImhhc0RhdGEiLCJKU09OIiwicGFyc2UiLCJkYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJxdWV1ZSIsImRlcXVldWUiLCJfcXVldWVIb29rcyIsInN0b3AiLCJjbGVhclF1ZXVlIiwic291cmNlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwiY3VyIiwiY3NzTnVtYmVyIiwidW5pdCIsInN0YXJ0IiwiYm9keSIsInNob3ciLCJoaWRlIiwidG9nZ2xlIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJvZmYiLCJldmVudCIsImdsb2JhbCIsImhhbmRsZXIiLCJldmVudHMiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsInNwZWNpYWwiLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm9yaWdUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJoYW5kbGVycyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImVsZW0iLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJoYW5kbGVPYmoiLCJyZXN1bHQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsImFkZFByb3AiLCJFdmVudCIsImVudW1lcmFibGUiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJsb2FkIiwibm9CdWJibGUiLCJ0cmlnZ2VyIiwiYmx1ciIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyQ29kZSIsImtleSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvbmUiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJodG1sIiwiY2xvbmUiLCJzcmMiLCJfZXZhbFVybCIsIkphIiwiY2xlYW5EYXRhIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIkthIiwiTGEiLCJNYSIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJjc3NUZXh0IiwibWFyZ2luTGVmdCIsIndpZHRoIiwibWFyZ2luUmlnaHQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsTWFyZ2luUmlnaHQiLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJOYSIsImdldFByb3BlcnR5VmFsdWUiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiT2EiLCJQYSIsIlFhIiwicG9zaXRpb24iLCJ2aXNpYmlsaXR5IiwiUmEiLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsIlNhIiwiVGEiLCJVYSIsIlZhIiwibWF4IiwiV2EiLCJYYSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJjc3NQcm9wcyIsImlzRmluaXRlIiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJleHBhbmQiLCJZYSIsIlR3ZWVuIiwicHJvcCIsImVhc2luZyIsInByb3BIb29rcyIsInJ1biIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJaYSIsIiRhIiwiX2EiLCJhYiIsImJiIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGljayIsImNiIiwiZGIiLCJoZWlnaHQiLCJlYiIsImhiIiwidHdlZW5lcnMiLCJmYiIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJoaWRkZW4iLCJnYiIsInByZWZpbHRlcnMiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJwcm9wcyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiY3JlYXRlVHdlZW4iLCJ0aW1lciIsImFuaW0iLCJjb21wbGV0ZSIsIkFuaW1hdGlvbiIsInR3ZWVuZXIiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsIm9sZCIsImZhZGVUbyIsImFuaW1hdGUiLCJmaW5pc2giLCJ0aW1lcnMiLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFySW50ZXJ2YWwiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImliIiwiamIiLCJyZW1vdmVBdHRyIiwiYXR0ckhvb2tzIiwia2IiLCJsYiIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwicGFyc2VJbnQiLCJtYiIsIm5iIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiaGFzQ2xhc3MiLCJvYiIsInZhbCIsInZhbEhvb2tzIiwicGIiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiaG92ZXIiLCJmb2N1c2luIiwicWIiLCJyYiIsInNiIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJ0YiIsInViIiwidmIiLCJ3YiIsInhiIiwicGFyYW0iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiZGF0YVR5cGVzIiwiTGIiLCJhamF4U2V0dGluZ3MiLCJmbGF0T3B0aW9ucyIsIk1iIiwibWltZVR5cGUiLCJnZXRSZXNwb25zZUhlYWRlciIsImNvbnZlcnRlcnMiLCJOYiIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsImRhdGFUeXBlIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJ4bWwiLCJqc29uIiwiY29udGV4dCIsImFqYXhTZXR1cCIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1c0NvZGUiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsInN0YXR1cyIsImFib3J0IiwibWV0aG9kIiwiY3Jvc3NEb21haW4iLCJob3N0IiwidHJhZGl0aW9uYWwiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInRpbWVvdXQiLCJzZW5kIiwic3RhdHVzVGV4dCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ3cmFwIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJPYiIsIlBiIiwiY29ycyIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5IiwicmVzcG9uc2UiLCJzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsIlFiIiwiUmIiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImFuaW1hdGVkIiwiU2IiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJ1c2luZyIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0UGFyZW50Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImNvbnRlbnQiLCJiaW5kIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicGFyc2VKU09OIiwiZGVmaW5lIiwiYW1kIiwiVGIiLCJqUXVlcnkiLCJVYiIsIm5vQ29uZmxpY3QiLCJmYWN0b3J5IiwidG9GaXgiLCJ0b0JpbmQiLCJkb2N1bWVudE1vZGUiLCJudWxsTG93ZXN0RGVsdGFUaW1lb3V0IiwibG93ZXN0RGVsdGEiLCJmaXhIb29rcyIsIm1vdXNlSG9va3MiLCJtb3VzZXdoZWVsIiwidmVyc2lvbiIsIm9ubW91c2V3aGVlbCIsImdldExpbmVIZWlnaHQiLCJnZXRQYWdlSGVpZ2h0IiwiJGVsZW0iLCIkcGFyZW50Iiwic2V0dGluZ3MiLCJhZGp1c3RPbGREZWx0YXMiLCJub3JtYWxpemVPZmZzZXQiLCJ1bm1vdXNld2hlZWwiLCJvcmdFdmVudCIsImFyZ3MiLCJkZWx0YSIsImRlbHRhWCIsImRlbHRhWSIsImFic0RlbHRhIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJheGlzIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFNb2RlIiwicGFnZUhlaWdodCIsImFicyIsInNob3VsZEFkanVzdE9sZERlbHRhcyIsImJvdW5kaW5nUmVjdCIsImRlbHRhRmFjdG9yIiwibnVsbExvd2VzdERlbHRhIiwicmVxdWlyZSIsImpTY3JvbGxQYW5lIiwiSlNjcm9sbFBhbmUiLCJqc3AiLCJwYW5lIiwicGFuZVdpZHRoIiwicGFuZUhlaWdodCIsImNvbnRhaW5lciIsInNjcm9sbENvbnRhaW5lciIsImNvbnRlbnRXaWR0aCIsImNvbnRlbnRIZWlnaHQiLCJwZXJjZW50SW5WaWV3SCIsInBlcmNlbnRJblZpZXdWIiwiaXNTY3JvbGxhYmxlViIsImlzU2Nyb2xsYWJsZUgiLCJ2ZXJ0aWNhbERyYWciLCJkcmFnTWF4WSIsInZlcnRpY2FsRHJhZ1Bvc2l0aW9uIiwiaG9yaXpvbnRhbERyYWciLCJkcmFnTWF4WCIsImhvcml6b250YWxEcmFnUG9zaXRpb24iLCJ2ZXJ0aWNhbEJhciIsInZlcnRpY2FsVHJhY2siLCJzY3JvbGxiYXJXaWR0aCIsInZlcnRpY2FsVHJhY2tIZWlnaHQiLCJ2ZXJ0aWNhbERyYWdIZWlnaHQiLCJhcnJvd1VwIiwiYXJyb3dEb3duIiwiaG9yaXpvbnRhbEJhciIsImhvcml6b250YWxUcmFjayIsImhvcml6b250YWxUcmFja1dpZHRoIiwiaG9yaXpvbnRhbERyYWdXaWR0aCIsImFycm93TGVmdCIsImFycm93UmlnaHQiLCJyZWluaXRpYWxpc2VJbnRlcnZhbCIsIm9yaWdpbmFsUGFkZGluZyIsIm9yaWdpbmFsUGFkZGluZ1RvdGFsV2lkdGgiLCJwcmV2aW91c0NvbnRlbnRXaWR0aCIsIndhc0F0VG9wIiwid2FzQXRMZWZ0Iiwid2FzQXRCb3R0b20iLCJ3YXNBdFJpZ2h0Iiwib3JpZ2luYWxFbGVtZW50IiwibXdFdmVudCIsIm13aGVlbEludGVudCIsImluaXRpYWxpc2UiLCJpc01haW50YWluaW5nUG9zaXRvbiIsImxhc3RDb250ZW50WCIsImxhc3RDb250ZW50WSIsImhhc0NvbnRhaW5pbmdTcGFjZUNoYW5nZWQiLCJvcmlnaW5hbFNjcm9sbFRvcCIsIm9yaWdpbmFsU2Nyb2xsTGVmdCIsIm1haW50YWluQXRCb3R0b20iLCJtYWludGFpbkF0UmlnaHQiLCJ1bmRlZmluZWQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJzdGlja1RvQm90dG9tIiwiaXNDbG9zZVRvQm90dG9tIiwic3RpY2tUb1JpZ2h0IiwiaXNDbG9zZVRvUmlnaHQiLCJvdXRlckhlaWdodCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwicmVtb3ZlTW91c2V3aGVlbCIsInJlbW92ZUZvY3VzSGFuZGxlciIsInJlbW92ZUtleWJvYXJkTmF2IiwicmVtb3ZlQ2xpY2tPblRyYWNrIiwibWFpbnRhaW5Qb3NpdGlvbiIsImNvbnRlbnRQb3NpdGlvblgiLCJjb250ZW50UG9zaXRpb25ZIiwiaW5pdGlhbGlzZVZlcnRpY2FsU2Nyb2xsIiwiaW5pdGlhbGlzZUhvcml6b250YWxTY3JvbGwiLCJyZXNpemVTY3JvbGxiYXJzIiwic2Nyb2xsVG9YIiwic2Nyb2xsVG9ZIiwiaW5pdEZvY3VzSGFuZGxlciIsImluaXRNb3VzZXdoZWVsIiwiaW5pdFRvdWNoIiwiZW5hYmxlS2V5Ym9hcmROYXZpZ2F0aW9uIiwiaW5pdEtleWJvYXJkTmF2IiwiY2xpY2tPblRyYWNrIiwiaW5pdENsaWNrT25UcmFjayIsIm9ic2VydmVIYXNoIiwiaGlqYWNrSW50ZXJuYWxMaW5rcyIsImF1dG9SZWluaXRpYWxpc2UiLCJhdXRvUmVpbml0aWFsaXNlRGVsYXkiLCJzaG93QXJyb3dzIiwiZ2V0QXJyb3dTY3JvbGwiLCJuaWwiLCJhcnJvd1Njcm9sbE9uSG92ZXIiLCJhcHBlbmRBcnJvd3MiLCJ2ZXJ0aWNhbEFycm93UG9zaXRpb25zIiwic3RhcnRZIiwicG9zaXRpb25EcmFnWSIsImNhbmNlbERyYWciLCJzaXplVmVydGljYWxTY3JvbGxiYXIiLCJ2ZXJ0aWNhbEd1dHRlciIsIm91dGVyV2lkdGgiLCJlcnIiLCJob3Jpem9udGFsQXJyb3dQb3NpdGlvbnMiLCJzdGFydFgiLCJwb3NpdGlvbkRyYWdYIiwic2l6ZUhvcml6b250YWxTY3JvbGxiYXIiLCJob3Jpem9udGFsVHJhY2tIZWlnaHQiLCJ2ZXJ0aWNhbFRyYWNrV2lkdGgiLCJjZWlsIiwiaG9yaXpvbnRhbERyYWdNYXhXaWR0aCIsImhvcml6b250YWxEcmFnTWluV2lkdGgiLCJfcG9zaXRpb25EcmFnWCIsInZlcnRpY2FsRHJhZ01heEhlaWdodCIsInZlcnRpY2FsRHJhZ01pbkhlaWdodCIsIl9wb3NpdGlvbkRyYWdZIiwiZWxlIiwiYTEiLCJhMiIsInAxIiwicDIiLCJhVGVtcCIsIm5hdmlnYXRvciIsInBsYXRmb3JtIiwiZGlyWCIsImRpclkiLCJhcnJvd1Njcm9sbCIsImFycm93IiwiZXZlIiwic2Nyb2xsVGltZW91dCIsImlzRmlyc3QiLCJzY3JvbGxCeVgiLCJhcnJvd0J1dHRvblNwZWVkIiwic2Nyb2xsQnlZIiwiaW5pdGlhbERlbGF5IiwiYXJyb3dSZXBlYXRGcmVxIiwib3JpZ2luYWxUYXJnZXQiLCJjbGlja2VkVHJhY2siLCJkaXJlY3Rpb24iLCJjb250ZW50RHJhZ1kiLCJzY3JvbGxQYWdlUGVyY2VudCIsImRyYWdZIiwiY2FuY2VsQ2xpY2siLCJ0cmFja0NsaWNrUmVwZWF0RnJlcSIsImNvbnRlbnREcmFnWCIsImRyYWdYIiwiZGVzdFkiLCJ3aWxsU2Nyb2xsWUV2ZW50IiwidG1wVmVydGljYWxEcmFnUG9zaXRpb24iLCJpc0F0VG9wIiwiaXNBdEJvdHRvbSIsInBlcmNlbnRTY3JvbGxlZCIsImRlc3RUb3AiLCJhbmltYXRlU2Nyb2xsIiwidXBkYXRlVmVydGljYWxBcnJvd3MiLCJkZXN0WCIsIndpbGxTY3JvbGxYRXZlbnQiLCJ0bXBIb3Jpem9udGFsRHJhZ1Bvc2l0aW9uIiwiaXNBdExlZnQiLCJpc0F0UmlnaHQiLCJkZXN0TGVmdCIsInVwZGF0ZUhvcml6b250YWxBcnJvd3MiLCJzY3JvbGxUb0VsZW1lbnQiLCJzdGlja1RvVG9wIiwiZWxlSGVpZ2h0IiwiZWxlV2lkdGgiLCJlbGVUb3AiLCJlbGVMZWZ0Iiwidmlld3BvcnRUb3AiLCJ2aWV3cG9ydExlZnQiLCJtYXhWaXNpYmxlRWxlVG9wIiwibWF4VmlzaWJsZUVsZUxlZnQiLCJob3Jpem9udGFsR3V0dGVyIiwic2Nyb2xsYWJsZUhlaWdodCIsInNjcm9sbGFibGVXaWR0aCIsImRYIiwiZFkiLCJmYWN0b3IiLCJtb3VzZVdoZWVsU3BlZWQiLCJzY3JvbGxCeSIsImtleURvd24iLCJlbGVtZW50SGFzU2Nyb2xsZWQiLCJ2YWxpZFBhcmVudHMiLCJrZXlEb3duSGFuZGxlciIsImhpZGVGb2N1cyIsImtleWJvYXJkU3BlZWQiLCJyZXRyeUludCIsInN1YnN0ciIsImxvY2F0aW9uSHJlZiIsImVsZW1lbnQiLCJlbGVtZW50VG9wIiwic2Nyb2xsSW50b1ZpZXciLCJ0b3VjaFN0YXJ0WCIsInRvdWNoU3RhcnRZIiwibW92ZWQiLCJtb3ZpbmciLCJ0b3VjaCIsImV2IiwidG91Y2hQb3MiLCJkZXN0cm95IiwiY3VycmVudFkiLCJjdXJyZW50WCIsInJlaW5pdGlhbGlzZSIsInNjcm9sbFRvUGVyY2VudFgiLCJkZXN0UGVyY2VudFgiLCJzY3JvbGxUb1BlcmNlbnRZIiwiZGVzdFBlcmNlbnRZIiwic3RlcENhbGxiYWNrIiwiY29tcGxldGVDYWxsYmFjayIsInBhcmFtcyIsImFuaW1hdGVEdXJhdGlvbiIsImFuaW1hdGVFYXNlIiwiZ2V0Q29udGVudFBvc2l0aW9uWCIsImdldENvbnRlbnRQb3NpdGlvblkiLCJnZXRDb250ZW50V2lkdGgiLCJnZXRDb250ZW50SGVpZ2h0IiwiZ2V0UGVyY2VudFNjcm9sbGVkWCIsImdldFBlcmNlbnRTY3JvbGxlZFkiLCJnZXRJc1Njcm9sbGFibGVIIiwiZ2V0SXNTY3JvbGxhYmxlViIsImdldENvbnRlbnRQYW5lIiwic2Nyb2xsVG9Cb3R0b20iLCJkZWZhdWx0cyIsImpzcEFwaSIsInRyYWNrQ2xpY2tTcGVlZCIsIlNsaWNrIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYXBwZW5kRG90cyIsImFycm93cyIsImFzTmF2Rm9yIiwicHJldkFycm93IiwibmV4dEFycm93IiwiYXV0b3BsYXkiLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwiZG90cyIsImRvdHNDbGFzcyIsImRyYWdnYWJsZSIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiaW5maW5pdGUiLCJpbml0aWFsU2xpZGUiLCJsYXp5TG9hZCIsIm1vYmlsZUZpcnN0IiwicGF1c2VPbkhvdmVyIiwicGF1c2VPbkZvY3VzIiwicGF1c2VPbkRvdHNIb3ZlciIsInJlc3BvbmRUbyIsInJlc3BvbnNpdmUiLCJyb3dzIiwicnRsIiwic2xpZGUiLCJzbGlkZXNQZXJSb3ciLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ1c2VDU1MiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidmVydGljYWwiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwiJHNsaWRlcyIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsIiRsaXN0IiwidG91Y2hPYmplY3QiLCJ0cmFuc2Zvcm1zRW5hYmxlZCIsInVuc2xpY2tlZCIsImFjdGl2ZUJyZWFrcG9pbnQiLCJhbmltVHlwZSIsImFuaW1Qcm9wIiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50U2V0dGluZ3MiLCJjc3NUcmFuc2l0aW9ucyIsImZvY3Vzc2VkIiwiaW50ZXJydXB0ZWQiLCJwYXVzZWQiLCJwb3NpdGlvblByb3AiLCJyb3dDb3VudCIsInNob3VsZENsaWNrIiwiJHNsaWRlciIsIiRzbGlkZXNDYWNoZSIsInRyYW5zZm9ybVR5cGUiLCJ0cmFuc2l0aW9uVHlwZSIsInZpc2liaWxpdHlDaGFuZ2UiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd1RpbWVyIiwib3JpZ2luYWxTZXR0aW5ncyIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwiYXV0b1BsYXlDbGVhciIsImF1dG9QbGF5SXRlcmF0b3IiLCJjaGFuZ2VTbGlkZSIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzZXRQb3NpdGlvbiIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImluc3RhbmNlVWlkIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiYWN0aXZhdGVBREEiLCJ0YWJpbmRleCIsImFkZFNsaWRlIiwic2xpY2tBZGQiLCJ1bmxvYWQiLCJyZWluaXQiLCJhbmltYXRlSGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwiYW5pbVN0YXJ0IiwiYXBwbHlUcmFuc2l0aW9uIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJnZXROYXZUYXJnZXQiLCJzbGljayIsInNsaWRlSGFuZGxlciIsImJ1aWxkQXJyb3dzIiwiYnVpbGREb3RzIiwiZ2V0RG90Q291bnQiLCJidWlsZE91dCIsInNldHVwSW5maW5pdGUiLCJ1cGRhdGVEb3RzIiwic2V0U2xpZGVDbGFzc2VzIiwiYnVpbGRSb3dzIiwiY2hlY2tSZXNwb25zaXZlIiwibWluIiwidW5zbGljayIsInJlZnJlc2giLCJjaGVja05hdmlnYWJsZSIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJjbGVhblVwRXZlbnRzIiwiaW50ZXJydXB0IiwiY2xlYW5VcFNsaWRlRXZlbnRzIiwib3JpZW50YXRpb25DaGFuZ2UiLCJyZXNpemUiLCJjbGVhblVwUm93cyIsImZhZGVTbGlkZSIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiZ2V0TGVmdCIsImZsb29yIiwib2Zmc2V0TGVmdCIsImdldE9wdGlvbiIsInNsaWNrR2V0T3B0aW9uIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50IiwiZ29UbyIsInNsaWNrR29UbyIsInNldFByb3BzIiwic3RhcnRMb2FkIiwibG9hZFNsaWRlciIsImluaXRpYWxpemVFdmVudHMiLCJ1cGRhdGVBcnJvd3MiLCJpbml0QURBIiwicm9sZSIsImluaXRBcnJvd0V2ZW50cyIsImluaXREb3RFdmVudHMiLCJpbml0U2xpZGVFdmVudHMiLCJhY3Rpb24iLCJpbml0VUkiLCJ0YWdOYW1lIiwicHJvZ3Jlc3NpdmVMYXp5TG9hZCIsInNsaWNrTmV4dCIsInBhdXNlIiwic2xpY2tQYXVzZSIsInBsYXkiLCJzbGlja1BsYXkiLCJwb3N0U2xpZGUiLCJzbGlja1ByZXYiLCJicmVha3BvaW50Iiwid2luZG93RGVsYXkiLCJyZW1vdmVTbGlkZSIsInNsaWNrUmVtb3ZlIiwic2V0Q1NTIiwic2V0RGltZW5zaW9ucyIsInNldEZhZGUiLCJyaWdodCIsInNldEhlaWdodCIsInNldE9wdGlvbiIsInNsaWNrU2V0T3B0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJtc1RyYW5zaXRpb24iLCJPVHJhbnNmb3JtIiwicGVyc3BlY3RpdmVQcm9wZXJ0eSIsIndlYmtpdFBlcnNwZWN0aXZlIiwiTW96VHJhbnNmb3JtIiwiTW96UGVyc3BlY3RpdmUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsInN3aXBlRGlyZWN0aW9uIiwiY3VyWCIsImN1clkiLCJhdGFuMiIsInJvdW5kIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwic3dpcGVTdGFydCIsInN3aXBlTW92ZSIsInNxcnQiLCJwb3ciLCJ1bmZpbHRlclNsaWRlcyIsInNsaWNrVW5maWx0ZXIiLCJ0YWIiLCJtZW51QnV0dG9uIiwibGFuZ0J1dHRvbiIsImFycm93TW9iaWxlQnV0dG9uIiwiYXJyb3dNb2JpbGVGaXJzdEJ1dHRvbiIsImFycm93RGVza3RvcEJ1dHRvbiIsImFydGljbGVzIiwibmF2TGluayIsIm1haW5OYXYiLCJhcnJvd1ByZXYiLCJhcnJvd05leHQiLCJhY3RpdmVJbmRleCIsInNjcm9sbFBhbmUiLCJtYWtlUGFnZUFjdGl2ZUJ5SW5kZXgiLCJhY3RpdmVMaW5rIiwiYXJyb3dIcmVmIiwiYXJyb3dUYXJnZXQiLCJhY3RpdmVBcnRpY2xlIiwiY2hlY2tXaW5kb3dXaWR0aCIsImFwaXMiLCJhZnRlclNpemUiLCJzbGlkZXMiLCJtb2RhbEJ1dHRvbiIsIm1vZGFsQ2xvc2VCdXR0b24iLCJnZXRTbGlkZXJTZXR0aW5ncyIsImJ1aWxkSW1hZ2VTbGlkZSIsInNsaWRlVGl0bGUiLCJzbGlkZVNyYyIsImZpZ2NhcHRpb24iLCJpbWciLCJjbGFzcyIsInRpdGxlIiwicGljdHVyZSIsImFUYWciLCJidWlsZFlUU2xpZGUiLCJpZnJhbWUiLCJmcmFtZWJvcmRlciIsImFsbG93ZnVsbHNjcmVlbiIsImRpdiIsImdhbGxlcnlUeXBlIiwiZ2FsbGVyeSIsImdhbGxlcnlEYXRhIiwic291bmQiLCJzb3VuZENvbnRhaW5lciIsIiRpbWciLCJpbWdJRCIsImltZ0NsYXNzIiwiaW1nVVJMIiwiJHN2ZyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsQ0FBQyxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYUMsQ0FBYixFQUFlO0FBQUMsV0FBU0MsQ0FBVCxDQUFXSCxDQUFYLEVBQWFDLENBQWIsRUFBZTtBQUFDLFdBQU8sT0FBT0QsQ0FBUCxLQUFXQyxDQUFsQjtBQUFvQixZQUFTRyxDQUFULEdBQVk7QUFBQyxRQUFJSixDQUFKLEVBQU1DLENBQU4sRUFBUUMsQ0FBUixFQUFVRSxDQUFWLEVBQVlDLENBQVosRUFBY0MsQ0FBZCxFQUFnQkMsQ0FBaEIsQ0FBa0IsS0FBSSxJQUFJQyxDQUFSLElBQWFDLENBQWIsRUFBZSxJQUFHQSxFQUFFQyxjQUFGLENBQWlCRixDQUFqQixDQUFILEVBQXVCO0FBQUMsVUFBR1IsSUFBRSxFQUFGLEVBQUtDLElBQUVRLEVBQUVELENBQUYsQ0FBUCxFQUFZUCxFQUFFVSxJQUFGLEtBQVNYLEVBQUVZLElBQUYsQ0FBT1gsRUFBRVUsSUFBRixDQUFPRSxXQUFQLEVBQVAsR0FBNkJaLEVBQUVhLE9BQUYsSUFBV2IsRUFBRWEsT0FBRixDQUFVQyxPQUFyQixJQUE4QmQsRUFBRWEsT0FBRixD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My4xIChDdXN0b20gQnVpbGQpIHwgTUlUICpcbiAqIGh0dHBzOi8vbW9kZXJuaXpyLmNvbS9kb3dubG9hZC8/LXZpZGVvLXNldGNsYXNzZXMgISovXG4hZnVuY3Rpb24oZSxuLGEpe2Z1bmN0aW9uIG8oZSxuKXtyZXR1cm4gdHlwZW9mIGU9PT1ufWZ1bmN0aW9uIHMoKXt2YXIgZSxuLGEscyx0LGMscjtmb3IodmFyIHAgaW4gbClpZihsLmhhc093blByb3BlcnR5KHApKXtpZihlPVtdLG49bFtwXSxuLm5hbWUmJihlLnB1c2gobi5uYW1lLnRvTG93ZXJDYXNlKCkpLG4ub3B0aW9ucyYmbi5vcHRpb25zLmFsaWFzZXMmJm4ub3B0aW9ucy5hbGlhc2VzLmxlbmd0aCkpZm9yKGE9MDthPG4ub3B0aW9ucy5hbGlhc2VzLmxlbmd0aDthKyspZS5wdXNoKG4ub3B0aW9ucy5hbGlhc2VzW2FdLnRvTG93ZXJDYXNlKCkpO2ZvcihzPW8obi5mbixcImZ1bmN0aW9uXCIpP24uZm4oKTpuLmZuLHQ9MDt0PGUubGVuZ3RoO3QrKyljPWVbdF0scj1jLnNwbGl0KFwiLlwiKSwxPT09ci5sZW5ndGg/TW9kZXJuaXpyW3JbMF1dPXM6KCFNb2Rlcm5penJbclswXV18fE1vZGVybml6cltyWzBdXWluc3RhbmNlb2YgQm9vbGVhbnx8KE1vZGVybml6cltyWzBdXT1uZXcgQm9vbGVhbihNb2Rlcm5penJbclswXV0pKSxNb2Rlcm5penJbclswXV1bclsxXV09cyksaS5wdXNoKChzP1wiXCI6XCJuby1cIikrci5qb2luKFwiLVwiKSl9fWZ1bmN0aW9uIHQoZSl7dmFyIG49cC5jbGFzc05hbWUsYT1Nb2Rlcm5penIuX2NvbmZpZy5jbGFzc1ByZWZpeHx8XCJcIjtpZihmJiYobj1uLmJhc2VWYWwpLE1vZGVybml6ci5fY29uZmlnLmVuYWJsZUpTQ2xhc3Mpe3ZhciBvPW5ldyBSZWdFeHAoXCIoXnxcXFxccylcIithK1wibm8tanMoXFxcXHN8JClcIik7bj1uLnJlcGxhY2UobyxcIiQxXCIrYStcImpzJDJcIil9TW9kZXJuaXpyLl9jb25maWcuZW5hYmxlQ2xhc3NlcyYmKG4rPVwiIFwiK2ErZS5qb2luKFwiIFwiK2EpLGY/cC5jbGFzc05hbWUuYmFzZVZhbD1uOnAuY2xhc3NOYW1lPW4pfWZ1bmN0aW9uIGMoKXtyZXR1cm5cImZ1bmN0aW9uXCIhPXR5cGVvZiBuLmNyZWF0ZUVsZW1lbnQ/bi5jcmVhdGVFbGVtZW50KGFyZ3VtZW50c1swXSk6Zj9uLmNyZWF0ZUVsZW1lbnROUy5jYWxsKG4sXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLGFyZ3VtZW50c1swXSk6bi5jcmVhdGVFbGVtZW50LmFwcGx5KG4sYXJndW1lbnRzKX12YXIgaT1bXSxsPVtdLHI9e192ZXJzaW9uOlwiMy4zLjFcIixfY29uZmlnOntjbGFzc1ByZWZpeDpcIlwiLGVuYWJsZUNsYXNzZXM6ITAsZW5hYmxlSlNDbGFzczohMCx1c2VQcmVmaXhlczohMH0sX3E6W10sb246ZnVuY3Rpb24oZSxuKXt2YXIgYT10aGlzO3NldFRpbWVvdXQoZnVuY3Rpb24oKXtuKGFbZV0pfSwwKX0sYWRkVGVzdDpmdW5jdGlvbihlLG4sYSl7bC5wdXNoKHtuYW1lOmUsZm46bixvcHRpb25zOmF9KX0sYWRkQXN5bmNUZXN0OmZ1bmN0aW9uKGUpe2wucHVzaCh7bmFtZTpudWxsLGZuOmV9KX19LE1vZGVybml6cj1mdW5jdGlvbigpe307TW9kZXJuaXpyLnByb3RvdHlwZT1yLE1vZGVybml6cj1uZXcgTW9kZXJuaXpyO3ZhciBwPW4uZG9jdW1lbnRFbGVtZW50LGY9XCJzdmdcIj09PXAubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtNb2Rlcm5penIuYWRkVGVzdChcInZpZGVvXCIsZnVuY3Rpb24oKXt2YXIgZT1jKFwidmlkZW9cIiksbj0hMTt0cnl7KG49ISFlLmNhblBsYXlUeXBlKSYmKG49bmV3IEJvb2xlYW4obiksbi5vZ2c9ZS5jYW5QbGF5VHlwZSgndmlkZW8vb2dnOyBjb2RlY3M9XCJ0aGVvcmFcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpLG4uaDI2ND1lLmNhblBsYXlUeXBlKCd2aWRlby9tcDQ7IGNvZGVjcz1cImF2YzEuNDJFMDFFXCInKS5yZXBsYWNlKC9ebm8kLyxcIlwiKSxuLndlYm09ZS5jYW5QbGF5VHlwZSgndmlkZW8vd2VibTsgY29kZWNzPVwidnA4LCB2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLFwiXCIpLG4udnA5PWUuY2FuUGxheVR5cGUoJ3ZpZGVvL3dlYm07IGNvZGVjcz1cInZwOVwiJykucmVwbGFjZSgvXm5vJC8sXCJcIiksbi5obHM9ZS5jYW5QbGF5VHlwZSgnYXBwbGljYXRpb24veC1tcGVnVVJMOyBjb2RlY3M9XCJhdmMxLjQyRTAxRVwiJykucmVwbGFjZSgvXm5vJC8sXCJcIikpfWNhdGNoKGEpe31yZXR1cm4gbn0pLHMoKSx0KGkpLGRlbGV0ZSByLmFkZFRlc3QsZGVsZXRlIHIuYWRkQXN5bmNUZXN0O2Zvcih2YXIgZD0wO2Q8TW9kZXJuaXpyLl9xLmxlbmd0aDtkKyspTW9kZXJuaXpyLl9xW2RdKCk7ZS5Nb2Rlcm5penI9TW9kZXJuaXpyfSh3aW5kb3csZG9jdW1lbnQpOyIsIi8qISBqUXVlcnkgdjMuMS4xIHwgKGMpIGpRdWVyeSBGb3VuZGF0aW9uIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovXG4hZnVuY3Rpb24oYSxiKXtcInVzZSBzdHJpY3RcIjtcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YS5kb2N1bWVudD9iKGEsITApOmZ1bmN0aW9uKGEpe2lmKCFhLmRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIik7cmV0dXJuIGIoYSl9OmIoYSl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OnRoaXMsZnVuY3Rpb24oYSxiKXtcInVzZSBzdHJpY3RcIjt2YXIgYz1bXSxkPWEuZG9jdW1lbnQsZT1PYmplY3QuZ2V0UHJvdG90eXBlT2YsZj1jLnNsaWNlLGc9Yy5jb25jYXQsaD1jLnB1c2gsaT1jLmluZGV4T2Ysaj17fSxrPWoudG9TdHJpbmcsbD1qLmhhc093blByb3BlcnR5LG09bC50b1N0cmluZyxuPW0uY2FsbChPYmplY3QpLG89e307ZnVuY3Rpb24gcChhLGIpe2I9Ynx8ZDt2YXIgYz1iLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7Yy50ZXh0PWEsYi5oZWFkLmFwcGVuZENoaWxkKGMpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyl9dmFyIHE9XCIzLjEuMVwiLHI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHIuZm4uaW5pdChhLGIpfSxzPS9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyx0PS9eLW1zLS8sdT0vLShbYS16XSkvZyx2PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIudG9VcHBlckNhc2UoKX07ci5mbj1yLnByb3RvdHlwZT17anF1ZXJ5OnEsY29uc3RydWN0b3I6cixsZW5ndGg6MCx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIGYuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP2YuY2FsbCh0aGlzKTphPDA/dGhpc1thK3RoaXMubGVuZ3RoXTp0aGlzW2FdfSxwdXNoU3RhY2s6ZnVuY3Rpb24oYSl7dmFyIGI9ci5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksYSk7cmV0dXJuIGIucHJldk9iamVjdD10aGlzLGJ9LGVhY2g6ZnVuY3Rpb24oYSl7cmV0dXJuIHIuZWFjaCh0aGlzLGEpfSxtYXA6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHIubWFwKHRoaXMsZnVuY3Rpb24oYixjKXtyZXR1cm4gYS5jYWxsKGIsYyxiKX0pKX0sc2xpY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZi5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxlcTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmxlbmd0aCxjPSthKyhhPDA/YjowKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soYz49MCYmYzxiP1t0aGlzW2NdXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IoKX0scHVzaDpoLHNvcnQ6Yy5zb3J0LHNwbGljZTpjLnNwbGljZX0sci5leHRlbmQ9ci5mbi5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlLGYsZz1hcmd1bWVudHNbMF18fHt9LGg9MSxpPWFyZ3VtZW50cy5sZW5ndGgsaj0hMTtmb3IoXCJib29sZWFuXCI9PXR5cGVvZiBnJiYoaj1nLGc9YXJndW1lbnRzW2hdfHx7fSxoKyspLFwib2JqZWN0XCI9PXR5cGVvZiBnfHxyLmlzRnVuY3Rpb24oZyl8fChnPXt9KSxoPT09aSYmKGc9dGhpcyxoLS0pO2g8aTtoKyspaWYobnVsbCE9KGE9YXJndW1lbnRzW2hdKSlmb3IoYiBpbiBhKWM9Z1tiXSxkPWFbYl0sZyE9PWQmJihqJiZkJiYoci5pc1BsYWluT2JqZWN0KGQpfHwoZT1yLmlzQXJyYXkoZCkpKT8oZT8oZT0hMSxmPWMmJnIuaXNBcnJheShjKT9jOltdKTpmPWMmJnIuaXNQbGFpbk9iamVjdChjKT9jOnt9LGdbYl09ci5leHRlbmQoaixmLGQpKTp2b2lkIDAhPT1kJiYoZ1tiXT1kKSk7cmV0dXJuIGd9LHIuZXh0ZW5kKHtleHBhbmRvOlwialF1ZXJ5XCIrKHErTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXFxEL2csXCJcIiksaXNSZWFkeTohMCxlcnJvcjpmdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoYSl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzRnVuY3Rpb246ZnVuY3Rpb24oYSl7cmV0dXJuXCJmdW5jdGlvblwiPT09ci50eXBlKGEpfSxpc0FycmF5OkFycmF5LmlzQXJyYXksaXNXaW5kb3c6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWEmJmE9PT1hLndpbmRvd30saXNOdW1lcmljOmZ1bmN0aW9uKGEpe3ZhciBiPXIudHlwZShhKTtyZXR1cm4oXCJudW1iZXJcIj09PWJ8fFwic3RyaW5nXCI9PT1iKSYmIWlzTmFOKGEtcGFyc2VGbG9hdChhKSl9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGIsYztyZXR1cm4hKCFhfHxcIltvYmplY3QgT2JqZWN0XVwiIT09ay5jYWxsKGEpKSYmKCEoYj1lKGEpKXx8KGM9bC5jYWxsKGIsXCJjb25zdHJ1Y3RvclwiKSYmYi5jb25zdHJ1Y3RvcixcImZ1bmN0aW9uXCI9PXR5cGVvZiBjJiZtLmNhbGwoYyk9PT1uKSl9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oYSl7dmFyIGI7Zm9yKGIgaW4gYSlyZXR1cm4hMTtyZXR1cm4hMH0sdHlwZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9hK1wiXCI6XCJvYmplY3RcIj09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGE/altrLmNhbGwoYSldfHxcIm9iamVjdFwiOnR5cGVvZiBhfSxnbG9iYWxFdmFsOmZ1bmN0aW9uKGEpe3AoYSl9LGNhbWVsQ2FzZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKHQsXCJtcy1cIikucmVwbGFjZSh1LHYpfSxub2RlTmFtZTpmdW5jdGlvbihhLGIpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1iLnRvTG93ZXJDYXNlKCl9LGVhY2g6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTA7aWYodyhhKSl7Zm9yKGM9YS5sZW5ndGg7ZDxjO2QrKylpZihiLmNhbGwoYVtkXSxkLGFbZF0pPT09ITEpYnJlYWt9ZWxzZSBmb3IoZCBpbiBhKWlmKGIuY2FsbChhW2RdLGQsYVtkXSk9PT0hMSlicmVhaztyZXR1cm4gYX0sdHJpbTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9cIlwiOihhK1wiXCIpLnJlcGxhY2UocyxcIlwiKX0sbWFrZUFycmF5OmZ1bmN0aW9uKGEsYil7dmFyIGM9Ynx8W107cmV0dXJuIG51bGwhPWEmJih3KE9iamVjdChhKSk/ci5tZXJnZShjLFwic3RyaW5nXCI9PXR5cGVvZiBhP1thXTphKTpoLmNhbGwoYyxhKSksY30saW5BcnJheTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIG51bGw9PWI/LTE6aS5jYWxsKGIsYSxjKX0sbWVyZ2U6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9K2IubGVuZ3RoLGQ9MCxlPWEubGVuZ3RoO2Q8YztkKyspYVtlKytdPWJbZF07cmV0dXJuIGEubGVuZ3RoPWUsYX0sZ3JlcDpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkLGU9W10sZj0wLGc9YS5sZW5ndGgsaD0hYztmPGc7ZisrKWQ9IWIoYVtmXSxmKSxkIT09aCYmZS5wdXNoKGFbZl0pO3JldHVybiBlfSxtYXA6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj0wLGg9W107aWYodyhhKSlmb3IoZD1hLmxlbmd0aDtmPGQ7ZisrKWU9YihhW2ZdLGYsYyksbnVsbCE9ZSYmaC5wdXNoKGUpO2Vsc2UgZm9yKGYgaW4gYSllPWIoYVtmXSxmLGMpLG51bGwhPWUmJmgucHVzaChlKTtyZXR1cm4gZy5hcHBseShbXSxoKX0sZ3VpZDoxLHByb3h5OmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBiJiYoYz1hW2JdLGI9YSxhPWMpLHIuaXNGdW5jdGlvbihhKSlyZXR1cm4gZD1mLmNhbGwoYXJndW1lbnRzLDIpLGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5hcHBseShifHx0aGlzLGQuY29uY2F0KGYuY2FsbChhcmd1bWVudHMpKSl9LGUuZ3VpZD1hLmd1aWQ9YS5ndWlkfHxyLmd1aWQrKyxlfSxub3c6RGF0ZS5ub3csc3VwcG9ydDpvfSksXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoci5mbltTeW1ib2wuaXRlcmF0b3JdPWNbU3ltYm9sLml0ZXJhdG9yXSksci5lYWNoKFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSxiKXtqW1wiW29iamVjdCBcIitiK1wiXVwiXT1iLnRvTG93ZXJDYXNlKCl9KTtmdW5jdGlvbiB3KGEpe3ZhciBiPSEhYSYmXCJsZW5ndGhcImluIGEmJmEubGVuZ3RoLGM9ci50eXBlKGEpO3JldHVyblwiZnVuY3Rpb25cIiE9PWMmJiFyLmlzV2luZG93KGEpJiYoXCJhcnJheVwiPT09Y3x8MD09PWJ8fFwibnVtYmVyXCI9PXR5cGVvZiBiJiZiPjAmJmItMSBpbiBhKX12YXIgeD1mdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmLGcsaCxpLGosayxsLG0sbixvLHAscSxyLHMsdCx1PVwic2l6emxlXCIrMSpuZXcgRGF0ZSx2PWEuZG9jdW1lbnQsdz0wLHg9MCx5PWhhKCksej1oYSgpLEE9aGEoKSxCPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1iJiYobD0hMCksMH0sQz17fS5oYXNPd25Qcm9wZXJ0eSxEPVtdLEU9RC5wb3AsRj1ELnB1c2gsRz1ELnB1c2gsSD1ELnNsaWNlLEk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MCxkPWEubGVuZ3RoO2M8ZDtjKyspaWYoYVtjXT09PWIpcmV0dXJuIGM7cmV0dXJuLTF9LEo9XCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLEs9XCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLEw9XCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLE09XCJcXFxcW1wiK0srXCIqKFwiK0wrXCIpKD86XCIrSytcIiooWypeJHwhfl0/PSlcIitLK1wiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIrTCtcIikpfClcIitLK1wiKlxcXFxdXCIsTj1cIjooXCIrTCtcIikoPzpcXFxcKCgoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXwoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIrTStcIikqKXwuKilcXFxcKXwpXCIsTz1uZXcgUmVnRXhwKEsrXCIrXCIsXCJnXCIpLFA9bmV3IFJlZ0V4cChcIl5cIitLK1wiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIitLK1wiKyRcIixcImdcIiksUT1uZXcgUmVnRXhwKFwiXlwiK0srXCIqLFwiK0srXCIqXCIpLFI9bmV3IFJlZ0V4cChcIl5cIitLK1wiKihbPit+XXxcIitLK1wiKVwiK0srXCIqXCIpLFM9bmV3IFJlZ0V4cChcIj1cIitLK1wiKihbXlxcXFxdJ1xcXCJdKj8pXCIrSytcIipcXFxcXVwiLFwiZ1wiKSxUPW5ldyBSZWdFeHAoTiksVT1uZXcgUmVnRXhwKFwiXlwiK0wrXCIkXCIpLFY9e0lEOm5ldyBSZWdFeHAoXCJeIyhcIitMK1wiKVwiKSxDTEFTUzpuZXcgUmVnRXhwKFwiXlxcXFwuKFwiK0wrXCIpXCIpLFRBRzpuZXcgUmVnRXhwKFwiXihcIitMK1wifFsqXSlcIiksQVRUUjpuZXcgUmVnRXhwKFwiXlwiK00pLFBTRVVETzpuZXcgUmVnRXhwKFwiXlwiK04pLENISUxEOm5ldyBSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiK0srXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIitLK1wiKig/OihbKy1dfClcIitLK1wiKihcXFxcZCspfCkpXCIrSytcIipcXFxcKXwpXCIsXCJpXCIpLGJvb2w6bmV3IFJlZ0V4cChcIl4oPzpcIitKK1wiKSRcIixcImlcIiksbmVlZHNDb250ZXh0Om5ldyBSZWdFeHAoXCJeXCIrSytcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIrSytcIiooKD86LVxcXFxkKT9cXFxcZCopXCIrSytcIipcXFxcKXwpKD89W14tXXwkKVwiLFwiaVwiKX0sVz0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFg9L15oXFxkJC9pLFk9L15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxaPS9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLCQ9L1srfl0vLF89bmV3IFJlZ0V4cChcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiK0srXCI/fChcIitLK1wiKXwuKVwiLFwiaWdcIiksYWE9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVwiMHhcIitiLTY1NTM2O3JldHVybiBkIT09ZHx8Yz9iOmQ8MD9TdHJpbmcuZnJvbUNoYXJDb2RlKGQrNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUoZD4+MTB8NTUyOTYsMTAyMyZkfDU2MzIwKX0sYmE9LyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csY2E9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYj9cIlxcMFwiPT09YT9cIlxcdWZmZmRcIjphLnNsaWNlKDAsLTEpK1wiXFxcXFwiK2EuY2hhckNvZGVBdChhLmxlbmd0aC0xKS50b1N0cmluZygxNikrXCIgXCI6XCJcXFxcXCIrYX0sZGE9ZnVuY3Rpb24oKXttKCl9LGVhPXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhLmRpc2FibGVkPT09ITAmJihcImZvcm1cImluIGF8fFwibGFiZWxcImluIGEpfSx7ZGlyOlwicGFyZW50Tm9kZVwiLG5leHQ6XCJsZWdlbmRcIn0pO3RyeXtHLmFwcGx5KEQ9SC5jYWxsKHYuY2hpbGROb2Rlcyksdi5jaGlsZE5vZGVzKSxEW3YuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGZhKXtHPXthcHBseTpELmxlbmd0aD9mdW5jdGlvbihhLGIpe0YuYXBwbHkoYSxILmNhbGwoYikpfTpmdW5jdGlvbihhLGIpe3ZhciBjPWEubGVuZ3RoLGQ9MDt3aGlsZShhW2MrK109YltkKytdKTthLmxlbmd0aD1jLTF9fX1mdW5jdGlvbiBnYShhLGIsZCxlKXt2YXIgZixoLGosayxsLG8scixzPWImJmIub3duZXJEb2N1bWVudCx3PWI/Yi5ub2RlVHlwZTo5O2lmKGQ9ZHx8W10sXCJzdHJpbmdcIiE9dHlwZW9mIGF8fCFhfHwxIT09dyYmOSE9PXcmJjExIT09dylyZXR1cm4gZDtpZighZSYmKChiP2Iub3duZXJEb2N1bWVudHx8Yjp2KSE9PW4mJm0oYiksYj1ifHxuLHApKXtpZigxMSE9PXcmJihsPVouZXhlYyhhKSkpaWYoZj1sWzFdKXtpZig5PT09dyl7aWYoIShqPWIuZ2V0RWxlbWVudEJ5SWQoZikpKXJldHVybiBkO2lmKGouaWQ9PT1mKXJldHVybiBkLnB1c2goaiksZH1lbHNlIGlmKHMmJihqPXMuZ2V0RWxlbWVudEJ5SWQoZikpJiZ0KGIsaikmJmouaWQ9PT1mKXJldHVybiBkLnB1c2goaiksZH1lbHNle2lmKGxbMl0pcmV0dXJuIEcuYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpKSxkO2lmKChmPWxbM10pJiZjLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlyZXR1cm4gRy5hcHBseShkLGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShmKSksZH1pZihjLnFzYSYmIUFbYStcIiBcIl0mJighcXx8IXEudGVzdChhKSkpe2lmKDEhPT13KXM9YixyPWE7ZWxzZSBpZihcIm9iamVjdFwiIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXsoaz1iLmdldEF0dHJpYnV0ZShcImlkXCIpKT9rPWsucmVwbGFjZShiYSxjYSk6Yi5zZXRBdHRyaWJ1dGUoXCJpZFwiLGs9dSksbz1nKGEpLGg9by5sZW5ndGg7d2hpbGUoaC0tKW9baF09XCIjXCIraytcIiBcIitzYShvW2hdKTtyPW8uam9pbihcIixcIikscz0kLnRlc3QoYSkmJnFhKGIucGFyZW50Tm9kZSl8fGJ9aWYocil0cnl7cmV0dXJuIEcuYXBwbHkoZCxzLnF1ZXJ5U2VsZWN0b3JBbGwocikpLGR9Y2F0Y2goeCl7fWZpbmFsbHl7az09PXUmJmIucmVtb3ZlQXR0cmlidXRlKFwiaWRcIil9fX1yZXR1cm4gaShhLnJlcGxhY2UoUCxcIiQxXCIpLGIsZCxlKX1mdW5jdGlvbiBoYSgpe3ZhciBhPVtdO2Z1bmN0aW9uIGIoYyxlKXtyZXR1cm4gYS5wdXNoKGMrXCIgXCIpPmQuY2FjaGVMZW5ndGgmJmRlbGV0ZSBiW2Euc2hpZnQoKV0sYltjK1wiIFwiXT1lfXJldHVybiBifWZ1bmN0aW9uIGlhKGEpe3JldHVybiBhW3VdPSEwLGF9ZnVuY3Rpb24gamEoYSl7dmFyIGI9bi5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7dHJ5e3JldHVybiEhYShiKX1jYXRjaChjKXtyZXR1cm4hMX1maW5hbGx5e2IucGFyZW50Tm9kZSYmYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpLGI9bnVsbH19ZnVuY3Rpb24ga2EoYSxiKXt2YXIgYz1hLnNwbGl0KFwifFwiKSxlPWMubGVuZ3RoO3doaWxlKGUtLSlkLmF0dHJIYW5kbGVbY1tlXV09Yn1mdW5jdGlvbiBsYShhLGIpe3ZhciBjPWImJmEsZD1jJiYxPT09YS5ub2RlVHlwZSYmMT09PWIubm9kZVR5cGUmJmEuc291cmNlSW5kZXgtYi5zb3VyY2VJbmRleDtpZihkKXJldHVybiBkO2lmKGMpd2hpbGUoYz1jLm5leHRTaWJsaW5nKWlmKGM9PT1iKXJldHVybi0xO3JldHVybiBhPzE6LTF9ZnVuY3Rpb24gbWEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1jJiZiLnR5cGU9PT1hfX1mdW5jdGlvbiBuYShhKXtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybihcImlucHV0XCI9PT1jfHxcImJ1dHRvblwiPT09YykmJmIudHlwZT09PWF9fWZ1bmN0aW9uIG9hKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm5cImZvcm1cImluIGI/Yi5wYXJlbnROb2RlJiZiLmRpc2FibGVkPT09ITE/XCJsYWJlbFwiaW4gYj9cImxhYmVsXCJpbiBiLnBhcmVudE5vZGU/Yi5wYXJlbnROb2RlLmRpc2FibGVkPT09YTpiLmRpc2FibGVkPT09YTpiLmlzRGlzYWJsZWQ9PT1hfHxiLmlzRGlzYWJsZWQhPT0hYSYmZWEoYik9PT1hOmIuZGlzYWJsZWQ9PT1hOlwibGFiZWxcImluIGImJmIuZGlzYWJsZWQ9PT1hfX1mdW5jdGlvbiBwYShhKXtyZXR1cm4gaWEoZnVuY3Rpb24oYil7cmV0dXJuIGI9K2IsaWEoZnVuY3Rpb24oYyxkKXt2YXIgZSxmPWEoW10sYy5sZW5ndGgsYiksZz1mLmxlbmd0aDt3aGlsZShnLS0pY1tlPWZbZ11dJiYoY1tlXT0hKGRbZV09Y1tlXSkpfSl9KX1mdW5jdGlvbiBxYShhKXtyZXR1cm4gYSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmF9Yz1nYS5zdXBwb3J0PXt9LGY9Z2EuaXNYTUw9ZnVuY3Rpb24oYSl7dmFyIGI9YSYmKGEub3duZXJEb2N1bWVudHx8YSkuZG9jdW1lbnRFbGVtZW50O3JldHVybiEhYiYmXCJIVE1MXCIhPT1iLm5vZGVOYW1lfSxtPWdhLnNldERvY3VtZW50PWZ1bmN0aW9uKGEpe3ZhciBiLGUsZz1hP2Eub3duZXJEb2N1bWVudHx8YTp2O3JldHVybiBnIT09biYmOT09PWcubm9kZVR5cGUmJmcuZG9jdW1lbnRFbGVtZW50PyhuPWcsbz1uLmRvY3VtZW50RWxlbWVudCxwPSFmKG4pLHYhPT1uJiYoZT1uLmRlZmF1bHRWaWV3KSYmZS50b3AhPT1lJiYoZS5hZGRFdmVudExpc3RlbmVyP2UuYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLGRhLCExKTplLmF0dGFjaEV2ZW50JiZlLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixkYSkpLGMuYXR0cmlidXRlcz1qYShmdW5jdGlvbihhKXtyZXR1cm4gYS5jbGFzc05hbWU9XCJpXCIsIWEuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpfSksYy5nZXRFbGVtZW50c0J5VGFnTmFtZT1qYShmdW5jdGlvbihhKXtyZXR1cm4gYS5hcHBlbmRDaGlsZChuLmNyZWF0ZUNvbW1lbnQoXCJcIikpLCFhLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGh9KSxjLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9WS50ZXN0KG4uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksYy5nZXRCeUlkPWphKGZ1bmN0aW9uKGEpe3JldHVybiBvLmFwcGVuZENoaWxkKGEpLmlkPXUsIW4uZ2V0RWxlbWVudHNCeU5hbWV8fCFuLmdldEVsZW1lbnRzQnlOYW1lKHUpLmxlbmd0aH0pLGMuZ2V0QnlJZD8oZC5maWx0ZXIuSUQ9ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKF8sYWEpO3JldHVybiBmdW5jdGlvbihhKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGUoXCJpZFwiKT09PWJ9fSxkLmZpbmQuSUQ9ZnVuY3Rpb24oYSxiKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50QnlJZCYmcCl7dmFyIGM9Yi5nZXRFbGVtZW50QnlJZChhKTtyZXR1cm4gYz9bY106W119fSk6KGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShfLGFhKTtyZXR1cm4gZnVuY3Rpb24oYSl7dmFyIGM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0QXR0cmlidXRlTm9kZSYmYS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7cmV0dXJuIGMmJmMudmFsdWU9PT1ifX0sZC5maW5kLklEPWZ1bmN0aW9uKGEsYil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudEJ5SWQmJnApe3ZhciBjLGQsZSxmPWIuZ2V0RWxlbWVudEJ5SWQoYSk7aWYoZil7aWYoYz1mLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSxjJiZjLnZhbHVlPT09YSlyZXR1cm5bZl07ZT1iLmdldEVsZW1lbnRzQnlOYW1lKGEpLGQ9MDt3aGlsZShmPWVbZCsrXSlpZihjPWYuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpLGMmJmMudmFsdWU9PT1hKXJldHVybltmXX1yZXR1cm5bXX19KSxkLmZpbmQuVEFHPWMuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50c0J5VGFnTmFtZT9iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpOmMucXNhP2IucXVlcnlTZWxlY3RvckFsbChhKTp2b2lkIDB9OmZ1bmN0aW9uKGEsYil7dmFyIGMsZD1bXSxlPTAsZj1iLmdldEVsZW1lbnRzQnlUYWdOYW1lKGEpO2lmKFwiKlwiPT09YSl7d2hpbGUoYz1mW2UrK10pMT09PWMubm9kZVR5cGUmJmQucHVzaChjKTtyZXR1cm4gZH1yZXR1cm4gZn0sZC5maW5kLkNMQVNTPWMuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oYSxiKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZwKXJldHVybiBiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYSl9LHI9W10scT1bXSwoYy5xc2E9WS50ZXN0KG4ucXVlcnlTZWxlY3RvckFsbCkpJiYoamEoZnVuY3Rpb24oYSl7by5hcHBlbmRDaGlsZChhKS5pbm5lckhUTUw9XCI8YSBpZD0nXCIrdStcIic+PC9hPjxzZWxlY3QgaWQ9J1wiK3UrXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIixhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgmJnEucHVzaChcIlsqXiRdPVwiK0srXCIqKD86Jyd8XFxcIlxcXCIpXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RofHxxLnB1c2goXCJcXFxcW1wiK0srXCIqKD86dmFsdWV8XCIrSitcIilcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIit1K1wiLV1cIikubGVuZ3RofHxxLnB1c2goXCJ+PVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGh8fHEucHVzaChcIjpjaGVja2VkXCIpLGEucXVlcnlTZWxlY3RvckFsbChcImEjXCIrdStcIisqXCIpLmxlbmd0aHx8cS5wdXNoKFwiLiMuK1srfl1cIil9KSxqYShmdW5jdGlvbihhKXthLmlubmVySFRNTD1cIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO3ZhciBiPW4uY3JlYXRlRWxlbWVudChcImlucHV0XCIpO2Iuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiaGlkZGVuXCIpLGEuYXBwZW5kQ2hpbGQoYikuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiRFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGgmJnEucHVzaChcIm5hbWVcIitLK1wiKlsqXiR8IX5dPz1cIiksMiE9PWEucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCYmcS5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxvLmFwcGVuZENoaWxkKGEpLmRpc2FibGVkPSEwLDIhPT1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoJiZxLnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIikscS5wdXNoKFwiLC4qOlwiKX0pKSwoYy5tYXRjaGVzU2VsZWN0b3I9WS50ZXN0KHM9by5tYXRjaGVzfHxvLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8by5tb3pNYXRjaGVzU2VsZWN0b3J8fG8ub01hdGNoZXNTZWxlY3Rvcnx8by5tc01hdGNoZXNTZWxlY3RvcikpJiZqYShmdW5jdGlvbihhKXtjLmRpc2Nvbm5lY3RlZE1hdGNoPXMuY2FsbChhLFwiKlwiKSxzLmNhbGwoYSxcIltzIT0nJ106eFwiKSxyLnB1c2goXCIhPVwiLE4pfSkscT1xLmxlbmd0aCYmbmV3IFJlZ0V4cChxLmpvaW4oXCJ8XCIpKSxyPXIubGVuZ3RoJiZuZXcgUmVnRXhwKHIuam9pbihcInxcIikpLGI9WS50ZXN0KG8uY29tcGFyZURvY3VtZW50UG9zaXRpb24pLHQ9Ynx8WS50ZXN0KG8uY29udGFpbnMpP2Z1bmN0aW9uKGEsYil7dmFyIGM9OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YSxkPWImJmIucGFyZW50Tm9kZTtyZXR1cm4gYT09PWR8fCEoIWR8fDEhPT1kLm5vZGVUeXBlfHwhKGMuY29udGFpbnM/Yy5jb250YWlucyhkKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGQpKSl9OmZ1bmN0aW9uKGEsYil7aWYoYil3aGlsZShiPWIucGFyZW50Tm9kZSlpZihiPT09YSlyZXR1cm4hMDtyZXR1cm4hMX0sQj1iP2Z1bmN0aW9uKGEsYil7aWYoYT09PWIpcmV0dXJuIGw9ITAsMDt2YXIgZD0hYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gZD9kOihkPShhLm93bmVyRG9jdW1lbnR8fGEpPT09KGIub3duZXJEb2N1bWVudHx8Yik/YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKToxLDEmZHx8IWMuc29ydERldGFjaGVkJiZiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGEpPT09ZD9hPT09bnx8YS5vd25lckRvY3VtZW50PT09diYmdCh2LGEpPy0xOmI9PT1ufHxiLm93bmVyRG9jdW1lbnQ9PT12JiZ0KHYsYik/MTprP0koayxhKS1JKGssYik6MDo0JmQ/LTE6MSl9OmZ1bmN0aW9uKGEsYil7aWYoYT09PWIpcmV0dXJuIGw9ITAsMDt2YXIgYyxkPTAsZT1hLnBhcmVudE5vZGUsZj1iLnBhcmVudE5vZGUsZz1bYV0saD1bYl07aWYoIWV8fCFmKXJldHVybiBhPT09bj8tMTpiPT09bj8xOmU/LTE6Zj8xOms/SShrLGEpLUkoayxiKTowO2lmKGU9PT1mKXJldHVybiBsYShhLGIpO2M9YTt3aGlsZShjPWMucGFyZW50Tm9kZSlnLnVuc2hpZnQoYyk7Yz1iO3doaWxlKGM9Yy5wYXJlbnROb2RlKWgudW5zaGlmdChjKTt3aGlsZShnW2RdPT09aFtkXSlkKys7cmV0dXJuIGQ/bGEoZ1tkXSxoW2RdKTpnW2RdPT09dj8tMTpoW2RdPT09dj8xOjB9LG4pOm59LGdhLm1hdGNoZXM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gZ2EoYSxudWxsLG51bGwsYil9LGdhLm1hdGNoZXNTZWxlY3Rvcj1mdW5jdGlvbihhLGIpe2lmKChhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKSxiPWIucmVwbGFjZShTLFwiPSckMSddXCIpLGMubWF0Y2hlc1NlbGVjdG9yJiZwJiYhQVtiK1wiIFwiXSYmKCFyfHwhci50ZXN0KGIpKSYmKCFxfHwhcS50ZXN0KGIpKSl0cnl7dmFyIGQ9cy5jYWxsKGEsYik7aWYoZHx8Yy5kaXNjb25uZWN0ZWRNYXRjaHx8YS5kb2N1bWVudCYmMTEhPT1hLmRvY3VtZW50Lm5vZGVUeXBlKXJldHVybiBkfWNhdGNoKGUpe31yZXR1cm4gZ2EoYixuLG51bGwsW2FdKS5sZW5ndGg+MH0sZ2EuY29udGFpbnM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSksdChhLGIpfSxnYS5hdHRyPWZ1bmN0aW9uKGEsYil7KGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpO3ZhciBlPWQuYXR0ckhhbmRsZVtiLnRvTG93ZXJDYXNlKCldLGY9ZSYmQy5jYWxsKGQuYXR0ckhhbmRsZSxiLnRvTG93ZXJDYXNlKCkpP2UoYSxiLCFwKTp2b2lkIDA7cmV0dXJuIHZvaWQgMCE9PWY/ZjpjLmF0dHJpYnV0ZXN8fCFwP2EuZ2V0QXR0cmlidXRlKGIpOihmPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJmYuc3BlY2lmaWVkP2YudmFsdWU6bnVsbH0sZ2EuZXNjYXBlPWZ1bmN0aW9uKGEpe3JldHVybihhK1wiXCIpLnJlcGxhY2UoYmEsY2EpfSxnYS5lcnJvcj1mdW5jdGlvbihhKXt0aHJvdyBuZXcgRXJyb3IoXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIithKX0sZ2EudW5pcXVlU29ydD1mdW5jdGlvbihhKXt2YXIgYixkPVtdLGU9MCxmPTA7aWYobD0hYy5kZXRlY3REdXBsaWNhdGVzLGs9IWMuc29ydFN0YWJsZSYmYS5zbGljZSgwKSxhLnNvcnQoQiksbCl7d2hpbGUoYj1hW2YrK10pYj09PWFbZl0mJihlPWQucHVzaChmKSk7d2hpbGUoZS0tKWEuc3BsaWNlKGRbZV0sMSl9cmV0dXJuIGs9bnVsbCxhfSxlPWdhLmdldFRleHQ9ZnVuY3Rpb24oYSl7dmFyIGIsYz1cIlwiLGQ9MCxmPWEubm9kZVR5cGU7aWYoZil7aWYoMT09PWZ8fDk9PT1mfHwxMT09PWYpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhLnRleHRDb250ZW50KXJldHVybiBhLnRleHRDb250ZW50O2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZyljKz1lKGEpfWVsc2UgaWYoMz09PWZ8fDQ9PT1mKXJldHVybiBhLm5vZGVWYWx1ZX1lbHNlIHdoaWxlKGI9YVtkKytdKWMrPWUoYik7cmV0dXJuIGN9LGQ9Z2Euc2VsZWN0b3JzPXtjYWNoZUxlbmd0aDo1MCxjcmVhdGVQc2V1ZG86aWEsbWF0Y2g6VixhdHRySGFuZGxlOnt9LGZpbmQ6e30scmVsYXRpdmU6e1wiPlwiOntkaXI6XCJwYXJlbnROb2RlXCIsZmlyc3Q6ITB9LFwiIFwiOntkaXI6XCJwYXJlbnROb2RlXCJ9LFwiK1wiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIixmaXJzdDohMH0sXCJ+XCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wifX0scHJlRmlsdGVyOntBVFRSOmZ1bmN0aW9uKGEpe3JldHVybiBhWzFdPWFbMV0ucmVwbGFjZShfLGFhKSxhWzNdPShhWzNdfHxhWzRdfHxhWzVdfHxcIlwiKS5yZXBsYWNlKF8sYWEpLFwifj1cIj09PWFbMl0mJihhWzNdPVwiIFwiK2FbM10rXCIgXCIpLGEuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGFbMV09YVsxXS50b0xvd2VyQ2FzZSgpLFwibnRoXCI9PT1hWzFdLnNsaWNlKDAsMyk/KGFbM118fGdhLmVycm9yKGFbMF0pLGFbNF09KyhhWzRdP2FbNV0rKGFbNl18fDEpOjIqKFwiZXZlblwiPT09YVszXXx8XCJvZGRcIj09PWFbM10pKSxhWzVdPSsoYVs3XSthWzhdfHxcIm9kZFwiPT09YVszXSkpOmFbM10mJmdhLmVycm9yKGFbMF0pLGF9LFBTRVVETzpmdW5jdGlvbihhKXt2YXIgYixjPSFhWzZdJiZhWzJdO3JldHVybiBWLkNISUxELnRlc3QoYVswXSk/bnVsbDooYVszXT9hWzJdPWFbNF18fGFbNV18fFwiXCI6YyYmVC50ZXN0KGMpJiYoYj1nKGMsITApKSYmKGI9Yy5pbmRleE9mKFwiKVwiLGMubGVuZ3RoLWIpLWMubGVuZ3RoKSYmKGFbMF09YVswXS5zbGljZSgwLGIpLGFbMl09Yy5zbGljZSgwLGIpKSxhLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKF8sYWEpLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCIqXCI9PT1hP2Z1bmN0aW9uKCl7cmV0dXJuITB9OmZ1bmN0aW9uKGEpe3JldHVybiBhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1ifX0sQ0xBU1M6ZnVuY3Rpb24oYSl7dmFyIGI9eVthK1wiIFwiXTtyZXR1cm4gYnx8KGI9bmV3IFJlZ0V4cChcIihefFwiK0srXCIpXCIrYStcIihcIitLK1wifCQpXCIpKSYmeShhLGZ1bmN0aW9uKGEpe3JldHVybiBiLnRlc3QoXCJzdHJpbmdcIj09dHlwZW9mIGEuY2xhc3NOYW1lJiZhLmNsYXNzTmFtZXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuZ2V0QXR0cmlidXRlJiZhLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKX0pfSxBVFRSOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gZnVuY3Rpb24oZCl7dmFyIGU9Z2EuYXR0cihkLGEpO3JldHVybiBudWxsPT1lP1wiIT1cIj09PWI6IWJ8fChlKz1cIlwiLFwiPVwiPT09Yj9lPT09YzpcIiE9XCI9PT1iP2UhPT1jOlwiXj1cIj09PWI/YyYmMD09PWUuaW5kZXhPZihjKTpcIio9XCI9PT1iP2MmJmUuaW5kZXhPZihjKT4tMTpcIiQ9XCI9PT1iP2MmJmUuc2xpY2UoLWMubGVuZ3RoKT09PWM6XCJ+PVwiPT09Yj8oXCIgXCIrZS5yZXBsYWNlKE8sXCIgXCIpK1wiIFwiKS5pbmRleE9mKGMpPi0xOlwifD1cIj09PWImJihlPT09Y3x8ZS5zbGljZSgwLGMubGVuZ3RoKzEpPT09YytcIi1cIikpfX0sQ0hJTEQ6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm50aFwiIT09YS5zbGljZSgwLDMpLGc9XCJsYXN0XCIhPT1hLnNsaWNlKC00KSxoPVwib2YtdHlwZVwiPT09YjtyZXR1cm4gMT09PWQmJjA9PT1lP2Z1bmN0aW9uKGEpe3JldHVybiEhYS5wYXJlbnROb2RlfTpmdW5jdGlvbihiLGMsaSl7dmFyIGosayxsLG0sbixvLHA9ZiE9PWc/XCJuZXh0U2libGluZ1wiOlwicHJldmlvdXNTaWJsaW5nXCIscT1iLnBhcmVudE5vZGUscj1oJiZiLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkscz0haSYmIWgsdD0hMTtpZihxKXtpZihmKXt3aGlsZShwKXttPWI7d2hpbGUobT1tW3BdKWlmKGg/bS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09cjoxPT09bS5ub2RlVHlwZSlyZXR1cm4hMTtvPXA9XCJvbmx5XCI9PT1hJiYhbyYmXCJuZXh0U2libGluZ1wifXJldHVybiEwfWlmKG89W2c/cS5maXJzdENoaWxkOnEubGFzdENoaWxkXSxnJiZzKXttPXEsbD1tW3VdfHwobVt1XT17fSksaz1sW20udW5pcXVlSURdfHwobFttLnVuaXF1ZUlEXT17fSksaj1rW2FdfHxbXSxuPWpbMF09PT13JiZqWzFdLHQ9biYmalsyXSxtPW4mJnEuY2hpbGROb2Rlc1tuXTt3aGlsZShtPSsrbiYmbSYmbVtwXXx8KHQ9bj0wKXx8by5wb3AoKSlpZigxPT09bS5ub2RlVHlwZSYmKyt0JiZtPT09Yil7a1thXT1bdyxuLHRdO2JyZWFrfX1lbHNlIGlmKHMmJihtPWIsbD1tW3VdfHwobVt1XT17fSksaz1sW20udW5pcXVlSURdfHwobFttLnVuaXF1ZUlEXT17fSksaj1rW2FdfHxbXSxuPWpbMF09PT13JiZqWzFdLHQ9biksdD09PSExKXdoaWxlKG09KytuJiZtJiZtW3BdfHwodD1uPTApfHxvLnBvcCgpKWlmKChoP20ubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PW0ubm9kZVR5cGUpJiYrK3QmJihzJiYobD1tW3VdfHwobVt1XT17fSksaz1sW20udW5pcXVlSURdfHwobFttLnVuaXF1ZUlEXT17fSksa1thXT1bdyx0XSksbT09PWIpKWJyZWFrO3JldHVybiB0LT1lLHQ9PT1kfHx0JWQ9PT0wJiZ0L2Q+PTB9fX0sUFNFVURPOmZ1bmN0aW9uKGEsYil7dmFyIGMsZT1kLnBzZXVkb3NbYV18fGQuc2V0RmlsdGVyc1thLnRvTG93ZXJDYXNlKCldfHxnYS5lcnJvcihcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIrYSk7cmV0dXJuIGVbdV0/ZShiKTplLmxlbmd0aD4xPyhjPVthLGEsXCJcIixiXSxkLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoYS50b0xvd2VyQ2FzZSgpKT9pYShmdW5jdGlvbihhLGMpe3ZhciBkLGY9ZShhLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWQ9SShhLGZbZ10pLGFbZF09IShjW2RdPWZbZ10pfSk6ZnVuY3Rpb24oYSl7cmV0dXJuIGUoYSwwLGMpfSk6ZX19LHBzZXVkb3M6e25vdDppYShmdW5jdGlvbihhKXt2YXIgYj1bXSxjPVtdLGQ9aChhLnJlcGxhY2UoUCxcIiQxXCIpKTtyZXR1cm4gZFt1XT9pYShmdW5jdGlvbihhLGIsYyxlKXt2YXIgZixnPWQoYSxudWxsLGUsW10pLGg9YS5sZW5ndGg7d2hpbGUoaC0tKShmPWdbaF0pJiYoYVtoXT0hKGJbaF09ZikpfSk6ZnVuY3Rpb24oYSxlLGYpe3JldHVybiBiWzBdPWEsZChiLG51bGwsZixjKSxiWzBdPW51bGwsIWMucG9wKCl9fSksaGFzOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gZ2EoYSxiKS5sZW5ndGg+MH19KSxjb250YWluczppYShmdW5jdGlvbihhKXtyZXR1cm4gYT1hLnJlcGxhY2UoXyxhYSksZnVuY3Rpb24oYil7cmV0dXJuKGIudGV4dENvbnRlbnR8fGIuaW5uZXJUZXh0fHxlKGIpKS5pbmRleE9mKGEpPi0xfX0pLGxhbmc6aWEoZnVuY3Rpb24oYSl7cmV0dXJuIFUudGVzdChhfHxcIlwiKXx8Z2EuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIithKSxhPWEucmVwbGFjZShfLGFhKS50b0xvd2VyQ2FzZSgpLGZ1bmN0aW9uKGIpe3ZhciBjO2RvIGlmKGM9cD9iLmxhbmc6Yi5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKXx8Yi5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKXJldHVybiBjPWMudG9Mb3dlckNhc2UoKSxjPT09YXx8MD09PWMuaW5kZXhPZihhK1wiLVwiKTt3aGlsZSgoYj1iLnBhcmVudE5vZGUpJiYxPT09Yi5ub2RlVHlwZSk7cmV0dXJuITF9fSksdGFyZ2V0OmZ1bmN0aW9uKGIpe3ZhciBjPWEubG9jYXRpb24mJmEubG9jYXRpb24uaGFzaDtyZXR1cm4gYyYmYy5zbGljZSgxKT09PWIuaWR9LHJvb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1vfSxmb2N1czpmdW5jdGlvbihhKXtyZXR1cm4gYT09PW4uYWN0aXZlRWxlbWVudCYmKCFuLmhhc0ZvY3VzfHxuLmhhc0ZvY3VzKCkpJiYhIShhLnR5cGV8fGEuaHJlZnx8fmEudGFiSW5kZXgpfSxlbmFibGVkOm9hKCExKSxkaXNhYmxlZDpvYSghMCksY2hlY2tlZDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YiYmISFhLmNoZWNrZWR8fFwib3B0aW9uXCI9PT1iJiYhIWEuc2VsZWN0ZWR9LHNlbGVjdGVkOmZ1bmN0aW9uKGEpe3JldHVybiBhLnBhcmVudE5vZGUmJmEucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LGEuc2VsZWN0ZWQ9PT0hMH0sZW1wdHk6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2E7YT1hLm5leHRTaWJsaW5nKWlmKGEubm9kZVR5cGU8NilyZXR1cm4hMTtyZXR1cm4hMH0scGFyZW50OmZ1bmN0aW9uKGEpe3JldHVybiFkLnBzZXVkb3MuZW1wdHkoYSl9LGhlYWRlcjpmdW5jdGlvbihhKXtyZXR1cm4gWC50ZXN0KGEubm9kZU5hbWUpfSxpbnB1dDpmdW5jdGlvbihhKXtyZXR1cm4gVy50ZXN0KGEubm9kZU5hbWUpfSxidXR0b246ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWImJlwiYnV0dG9uXCI9PT1hLnR5cGV8fFwiYnV0dG9uXCI9PT1ifSx0ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVyblwiaW5wdXRcIj09PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmXCJ0ZXh0XCI9PT1hLnR5cGUmJihudWxsPT0oYj1hLmdldEF0dHJpYnV0ZShcInR5cGVcIikpfHxcInRleHRcIj09PWIudG9Mb3dlckNhc2UoKSl9LGZpcnN0OnBhKGZ1bmN0aW9uKCl7cmV0dXJuWzBdfSksbGFzdDpwYShmdW5jdGlvbihhLGIpe3JldHVybltiLTFdfSksZXE6cGEoZnVuY3Rpb24oYSxiLGMpe3JldHVybltjPDA/YytiOmNdfSksZXZlbjpwYShmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wO2M8YjtjKz0yKWEucHVzaChjKTtyZXR1cm4gYX0pLG9kZDpwYShmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0xO2M8YjtjKz0yKWEucHVzaChjKTtyZXR1cm4gYX0pLGx0OnBhKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YzwwP2MrYjpjOy0tZD49MDspYS5wdXNoKGQpO3JldHVybiBhfSksZ3Q6cGEoZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1jPDA/YytiOmM7KytkPGI7KWEucHVzaChkKTtyZXR1cm4gYX0pfX0sZC5wc2V1ZG9zLm50aD1kLnBzZXVkb3MuZXE7Zm9yKGIgaW57cmFkaW86ITAsY2hlY2tib3g6ITAsZmlsZTohMCxwYXNzd29yZDohMCxpbWFnZTohMH0pZC5wc2V1ZG9zW2JdPW1hKGIpO2ZvcihiIGlue3N1Ym1pdDohMCxyZXNldDohMH0pZC5wc2V1ZG9zW2JdPW5hKGIpO2Z1bmN0aW9uIHJhKCl7fXJhLnByb3RvdHlwZT1kLmZpbHRlcnM9ZC5wc2V1ZG9zLGQuc2V0RmlsdGVycz1uZXcgcmEsZz1nYS50b2tlbml6ZT1mdW5jdGlvbihhLGIpe3ZhciBjLGUsZixnLGgsaSxqLGs9elthK1wiIFwiXTtpZihrKXJldHVybiBiPzA6ay5zbGljZSgwKTtoPWEsaT1bXSxqPWQucHJlRmlsdGVyO3doaWxlKGgpe2MmJiEoZT1RLmV4ZWMoaCkpfHwoZSYmKGg9aC5zbGljZShlWzBdLmxlbmd0aCl8fGgpLGkucHVzaChmPVtdKSksYz0hMSwoZT1SLmV4ZWMoaCkpJiYoYz1lLnNoaWZ0KCksZi5wdXNoKHt2YWx1ZTpjLHR5cGU6ZVswXS5yZXBsYWNlKFAsXCIgXCIpfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7Zm9yKGcgaW4gZC5maWx0ZXIpIShlPVZbZ10uZXhlYyhoKSl8fGpbZ10mJiEoZT1qW2ddKGUpKXx8KGM9ZS5zaGlmdCgpLGYucHVzaCh7dmFsdWU6Yyx0eXBlOmcsbWF0Y2hlczplfSksaD1oLnNsaWNlKGMubGVuZ3RoKSk7aWYoIWMpYnJlYWt9cmV0dXJuIGI/aC5sZW5ndGg6aD9nYS5lcnJvcihhKTp6KGEsaSkuc2xpY2UoMCl9O2Z1bmN0aW9uIHNhKGEpe2Zvcih2YXIgYj0wLGM9YS5sZW5ndGgsZD1cIlwiO2I8YztiKyspZCs9YVtiXS52YWx1ZTtyZXR1cm4gZH1mdW5jdGlvbiB0YShhLGIsYyl7dmFyIGQ9Yi5kaXIsZT1iLm5leHQsZj1lfHxkLGc9YyYmXCJwYXJlbnROb2RlXCI9PT1mLGg9eCsrO3JldHVybiBiLmZpcnN0P2Z1bmN0aW9uKGIsYyxlKXt3aGlsZShiPWJbZF0paWYoMT09PWIubm9kZVR5cGV8fGcpcmV0dXJuIGEoYixjLGUpO3JldHVybiExfTpmdW5jdGlvbihiLGMsaSl7dmFyIGosayxsLG09W3csaF07aWYoaSl7d2hpbGUoYj1iW2RdKWlmKCgxPT09Yi5ub2RlVHlwZXx8ZykmJmEoYixjLGkpKXJldHVybiEwfWVsc2Ugd2hpbGUoYj1iW2RdKWlmKDE9PT1iLm5vZGVUeXBlfHxnKWlmKGw9Ylt1XXx8KGJbdV09e30pLGs9bFtiLnVuaXF1ZUlEXXx8KGxbYi51bmlxdWVJRF09e30pLGUmJmU9PT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpYj1iW2RdfHxiO2Vsc2V7aWYoKGo9a1tmXSkmJmpbMF09PT13JiZqWzFdPT09aClyZXR1cm4gbVsyXT1qWzJdO2lmKGtbZl09bSxtWzJdPWEoYixjLGkpKXJldHVybiEwfXJldHVybiExfX1mdW5jdGlvbiB1YShhKXtyZXR1cm4gYS5sZW5ndGg+MT9mdW5jdGlvbihiLGMsZCl7dmFyIGU9YS5sZW5ndGg7d2hpbGUoZS0tKWlmKCFhW2VdKGIsYyxkKSlyZXR1cm4hMTtyZXR1cm4hMH06YVswXX1mdW5jdGlvbiB2YShhLGIsYyl7Zm9yKHZhciBkPTAsZT1iLmxlbmd0aDtkPGU7ZCsrKWdhKGEsYltkXSxjKTtyZXR1cm4gY31mdW5jdGlvbiB3YShhLGIsYyxkLGUpe2Zvcih2YXIgZixnPVtdLGg9MCxpPWEubGVuZ3RoLGo9bnVsbCE9YjtoPGk7aCsrKShmPWFbaF0pJiYoYyYmIWMoZixkLGUpfHwoZy5wdXNoKGYpLGomJmIucHVzaChoKSkpO3JldHVybiBnfWZ1bmN0aW9uIHhhKGEsYixjLGQsZSxmKXtyZXR1cm4gZCYmIWRbdV0mJihkPXhhKGQpKSxlJiYhZVt1XSYmKGU9eGEoZSxmKSksaWEoZnVuY3Rpb24oZixnLGgsaSl7dmFyIGosayxsLG09W10sbj1bXSxvPWcubGVuZ3RoLHA9Znx8dmEoYnx8XCIqXCIsaC5ub2RlVHlwZT9baF06aCxbXSkscT0hYXx8IWYmJmI/cDp3YShwLG0sYSxoLGkpLHI9Yz9lfHwoZj9hOm98fGQpP1tdOmc6cTtpZihjJiZjKHEscixoLGkpLGQpe2o9d2EocixuKSxkKGosW10saCxpKSxrPWoubGVuZ3RoO3doaWxlKGstLSkobD1qW2tdKSYmKHJbbltrXV09IShxW25ba11dPWwpKX1pZihmKXtpZihlfHxhKXtpZihlKXtqPVtdLGs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiZqLnB1c2gocVtrXT1sKTtlKG51bGwscj1bXSxqLGkpfWs9ci5sZW5ndGg7d2hpbGUoay0tKShsPXJba10pJiYoaj1lP0koZixsKTptW2tdKT4tMSYmKGZbal09IShnW2pdPWwpKX19ZWxzZSByPXdhKHI9PT1nP3Iuc3BsaWNlKG8sci5sZW5ndGgpOnIpLGU/ZShudWxsLGcscixpKTpHLmFwcGx5KGcscil9KX1mdW5jdGlvbiB5YShhKXtmb3IodmFyIGIsYyxlLGY9YS5sZW5ndGgsZz1kLnJlbGF0aXZlW2FbMF0udHlwZV0saD1nfHxkLnJlbGF0aXZlW1wiIFwiXSxpPWc/MTowLGs9dGEoZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1ifSxoLCEwKSxsPXRhKGZ1bmN0aW9uKGEpe3JldHVybiBJKGIsYSk+LTF9LGgsITApLG09W2Z1bmN0aW9uKGEsYyxkKXt2YXIgZT0hZyYmKGR8fGMhPT1qKXx8KChiPWMpLm5vZGVUeXBlP2soYSxjLGQpOmwoYSxjLGQpKTtyZXR1cm4gYj1udWxsLGV9XTtpPGY7aSsrKWlmKGM9ZC5yZWxhdGl2ZVthW2ldLnR5cGVdKW09W3RhKHVhKG0pLGMpXTtlbHNle2lmKGM9ZC5maWx0ZXJbYVtpXS50eXBlXS5hcHBseShudWxsLGFbaV0ubWF0Y2hlcyksY1t1XSl7Zm9yKGU9KytpO2U8ZjtlKyspaWYoZC5yZWxhdGl2ZVthW2VdLnR5cGVdKWJyZWFrO3JldHVybiB4YShpPjEmJnVhKG0pLGk+MSYmc2EoYS5zbGljZSgwLGktMSkuY29uY2F0KHt2YWx1ZTpcIiBcIj09PWFbaS0yXS50eXBlP1wiKlwiOlwiXCJ9KSkucmVwbGFjZShQLFwiJDFcIiksYyxpPGUmJnlhKGEuc2xpY2UoaSxlKSksZTxmJiZ5YShhPWEuc2xpY2UoZSkpLGU8ZiYmc2EoYSkpfW0ucHVzaChjKX1yZXR1cm4gdWEobSl9ZnVuY3Rpb24gemEoYSxiKXt2YXIgYz1iLmxlbmd0aD4wLGU9YS5sZW5ndGg+MCxmPWZ1bmN0aW9uKGYsZyxoLGksayl7dmFyIGwsbyxxLHI9MCxzPVwiMFwiLHQ9ZiYmW10sdT1bXSx2PWoseD1mfHxlJiZkLmZpbmQuVEFHKFwiKlwiLGspLHk9dys9bnVsbD09dj8xOk1hdGgucmFuZG9tKCl8fC4xLHo9eC5sZW5ndGg7Zm9yKGsmJihqPWc9PT1ufHxnfHxrKTtzIT09eiYmbnVsbCE9KGw9eFtzXSk7cysrKXtpZihlJiZsKXtvPTAsZ3x8bC5vd25lckRvY3VtZW50PT09bnx8KG0obCksaD0hcCk7d2hpbGUocT1hW28rK10paWYocShsLGd8fG4saCkpe2kucHVzaChsKTticmVha31rJiYodz15KX1jJiYoKGw9IXEmJmwpJiZyLS0sZiYmdC5wdXNoKGwpKX1pZihyKz1zLGMmJnMhPT1yKXtvPTA7d2hpbGUocT1iW28rK10pcSh0LHUsZyxoKTtpZihmKXtpZihyPjApd2hpbGUocy0tKXRbc118fHVbc118fCh1W3NdPUUuY2FsbChpKSk7dT13YSh1KX1HLmFwcGx5KGksdSksayYmIWYmJnUubGVuZ3RoPjAmJnIrYi5sZW5ndGg+MSYmZ2EudW5pcXVlU29ydChpKX1yZXR1cm4gayYmKHc9eSxqPXYpLHR9O3JldHVybiBjP2lhKGYpOmZ9cmV0dXJuIGg9Z2EuY29tcGlsZT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1bXSxmPUFbYStcIiBcIl07aWYoIWYpe2J8fChiPWcoYSkpLGM9Yi5sZW5ndGg7d2hpbGUoYy0tKWY9eWEoYltjXSksZlt1XT9kLnB1c2goZik6ZS5wdXNoKGYpO2Y9QShhLHphKGUsZCkpLGYuc2VsZWN0b3I9YX1yZXR1cm4gZn0saT1nYS5zZWxlY3Q9ZnVuY3Rpb24oYSxiLGMsZSl7dmFyIGYsaSxqLGssbCxtPVwiZnVuY3Rpb25cIj09dHlwZW9mIGEmJmEsbj0hZSYmZyhhPW0uc2VsZWN0b3J8fGEpO2lmKGM9Y3x8W10sMT09PW4ubGVuZ3RoKXtpZihpPW5bMF09blswXS5zbGljZSgwKSxpLmxlbmd0aD4yJiZcIklEXCI9PT0oaj1pWzBdKS50eXBlJiY5PT09Yi5ub2RlVHlwZSYmcCYmZC5yZWxhdGl2ZVtpWzFdLnR5cGVdKXtpZihiPShkLmZpbmQuSUQoai5tYXRjaGVzWzBdLnJlcGxhY2UoXyxhYSksYil8fFtdKVswXSwhYilyZXR1cm4gYzttJiYoYj1iLnBhcmVudE5vZGUpLGE9YS5zbGljZShpLnNoaWZ0KCkudmFsdWUubGVuZ3RoKX1mPVYubmVlZHNDb250ZXh0LnRlc3QoYSk/MDppLmxlbmd0aDt3aGlsZShmLS0pe2lmKGo9aVtmXSxkLnJlbGF0aXZlW2s9ai50eXBlXSlicmVhaztpZigobD1kLmZpbmRba10pJiYoZT1sKGoubWF0Y2hlc1swXS5yZXBsYWNlKF8sYWEpLCQudGVzdChpWzBdLnR5cGUpJiZxYShiLnBhcmVudE5vZGUpfHxiKSkpe2lmKGkuc3BsaWNlKGYsMSksYT1lLmxlbmd0aCYmc2EoaSksIWEpcmV0dXJuIEcuYXBwbHkoYyxlKSxjO2JyZWFrfX19cmV0dXJuKG18fGgoYSxuKSkoZSxiLCFwLGMsIWJ8fCQudGVzdChhKSYmcWEoYi5wYXJlbnROb2RlKXx8YiksY30sYy5zb3J0U3RhYmxlPXUuc3BsaXQoXCJcIikuc29ydChCKS5qb2luKFwiXCIpPT09dSxjLmRldGVjdER1cGxpY2F0ZXM9ISFsLG0oKSxjLnNvcnREZXRhY2hlZD1qYShmdW5jdGlvbihhKXtyZXR1cm4gMSZhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG4uY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpKX0pLGphKGZ1bmN0aW9uKGEpe3JldHVybiBhLmlubmVySFRNTD1cIjxhIGhyZWY9JyMnPjwvYT5cIixcIiNcIj09PWEuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpfSl8fGthKFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLGZ1bmN0aW9uKGEsYixjKXtpZighYylyZXR1cm4gYS5nZXRBdHRyaWJ1dGUoYixcInR5cGVcIj09PWIudG9Mb3dlckNhc2UoKT8xOjIpfSksYy5hdHRyaWJ1dGVzJiZqYShmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9XCI8aW5wdXQvPlwiLGEuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIpLFwiXCI9PT1hLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwidmFsdWVcIil9KXx8a2EoXCJ2YWx1ZVwiLGZ1bmN0aW9uKGEsYixjKXtpZighYyYmXCJpbnB1dFwiPT09YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXJldHVybiBhLmRlZmF1bHRWYWx1ZX0pLGphKGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpfSl8fGthKEosZnVuY3Rpb24oYSxiLGMpe3ZhciBkO2lmKCFjKXJldHVybiBhW2JdPT09ITA/Yi50b0xvd2VyQ2FzZSgpOihkPWEuZ2V0QXR0cmlidXRlTm9kZShiKSkmJmQuc3BlY2lmaWVkP2QudmFsdWU6bnVsbH0pLGdhfShhKTtyLmZpbmQ9eCxyLmV4cHI9eC5zZWxlY3RvcnMsci5leHByW1wiOlwiXT1yLmV4cHIucHNldWRvcyxyLnVuaXF1ZVNvcnQ9ci51bmlxdWU9eC51bmlxdWVTb3J0LHIudGV4dD14LmdldFRleHQsci5pc1hNTERvYz14LmlzWE1MLHIuY29udGFpbnM9eC5jb250YWlucyxyLmVzY2FwZVNlbGVjdG9yPXguZXNjYXBlO3ZhciB5PWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1bXSxlPXZvaWQgMCE9PWM7d2hpbGUoKGE9YVtiXSkmJjkhPT1hLm5vZGVUeXBlKWlmKDE9PT1hLm5vZGVUeXBlKXtpZihlJiZyKGEpLmlzKGMpKWJyZWFrO2QucHVzaChhKX1yZXR1cm4gZH0sej1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1bXTthO2E9YS5uZXh0U2libGluZykxPT09YS5ub2RlVHlwZSYmYSE9PWImJmMucHVzaChhKTtyZXR1cm4gY30sQT1yLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LEI9L148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2ksQz0vXi5bXjojXFxbXFwuLF0qJC87ZnVuY3Rpb24gRChhLGIsYyl7cmV0dXJuIHIuaXNGdW5jdGlvbihiKT9yLmdyZXAoYSxmdW5jdGlvbihhLGQpe3JldHVybiEhYi5jYWxsKGEsZCxhKSE9PWN9KTpiLm5vZGVUeXBlP3IuZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBhPT09YiE9PWN9KTpcInN0cmluZ1wiIT10eXBlb2YgYj9yLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gaS5jYWxsKGIsYSk+LTEhPT1jfSk6Qy50ZXN0KGIpP3IuZmlsdGVyKGIsYSxjKTooYj1yLmZpbHRlcihiLGEpLHIuZ3JlcChhLGZ1bmN0aW9uKGEpe3JldHVybiBpLmNhbGwoYixhKT4tMSE9PWMmJjE9PT1hLm5vZGVUeXBlfSkpfXIuZmlsdGVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iWzBdO3JldHVybiBjJiYoYT1cIjpub3QoXCIrYStcIilcIiksMT09PWIubGVuZ3RoJiYxPT09ZC5ub2RlVHlwZT9yLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGQsYSk/W2RdOltdOnIuZmluZC5tYXRjaGVzKGEsci5ncmVwKGIsZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLm5vZGVUeXBlfSkpfSxyLmZuLmV4dGVuZCh7ZmluZDpmdW5jdGlvbihhKXt2YXIgYixjLGQ9dGhpcy5sZW5ndGgsZT10aGlzO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhKXJldHVybiB0aGlzLnB1c2hTdGFjayhyKGEpLmZpbHRlcihmdW5jdGlvbigpe2ZvcihiPTA7YjxkO2IrKylpZihyLmNvbnRhaW5zKGVbYl0sdGhpcykpcmV0dXJuITB9KSk7Zm9yKGM9dGhpcy5wdXNoU3RhY2soW10pLGI9MDtiPGQ7YisrKXIuZmluZChhLGVbYl0sYyk7cmV0dXJuIGQ+MT9yLnVuaXF1ZVNvcnQoYyk6Y30sZmlsdGVyOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayhEKHRoaXMsYXx8W10sITEpKX0sbm90OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayhEKHRoaXMsYXx8W10sITApKX0saXM6ZnVuY3Rpb24oYSl7cmV0dXJuISFEKHRoaXMsXCJzdHJpbmdcIj09dHlwZW9mIGEmJkEudGVzdChhKT9yKGEpOmF8fFtdLCExKS5sZW5ndGh9fSk7dmFyIEUsRj0vXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxHPXIuZm4uaW5pdD1mdW5jdGlvbihhLGIsYyl7dmFyIGUsZjtpZighYSlyZXR1cm4gdGhpcztpZihjPWN8fEUsXCJzdHJpbmdcIj09dHlwZW9mIGEpe2lmKGU9XCI8XCI9PT1hWzBdJiZcIj5cIj09PWFbYS5sZW5ndGgtMV0mJmEubGVuZ3RoPj0zP1tudWxsLGEsbnVsbF06Ri5leGVjKGEpLCFlfHwhZVsxXSYmYilyZXR1cm4hYnx8Yi5qcXVlcnk/KGJ8fGMpLmZpbmQoYSk6dGhpcy5jb25zdHJ1Y3RvcihiKS5maW5kKGEpO2lmKGVbMV0pe2lmKGI9YiBpbnN0YW5jZW9mIHI/YlswXTpiLHIubWVyZ2UodGhpcyxyLnBhcnNlSFRNTChlWzFdLGImJmIubm9kZVR5cGU/Yi5vd25lckRvY3VtZW50fHxiOmQsITApKSxCLnRlc3QoZVsxXSkmJnIuaXNQbGFpbk9iamVjdChiKSlmb3IoZSBpbiBiKXIuaXNGdW5jdGlvbih0aGlzW2VdKT90aGlzW2VdKGJbZV0pOnRoaXMuYXR0cihlLGJbZV0pO3JldHVybiB0aGlzfXJldHVybiBmPWQuZ2V0RWxlbWVudEJ5SWQoZVsyXSksZiYmKHRoaXNbMF09Zix0aGlzLmxlbmd0aD0xKSx0aGlzfXJldHVybiBhLm5vZGVUeXBlPyh0aGlzWzBdPWEsdGhpcy5sZW5ndGg9MSx0aGlzKTpyLmlzRnVuY3Rpb24oYSk/dm9pZCAwIT09Yy5yZWFkeT9jLnJlYWR5KGEpOmEocik6ci5tYWtlQXJyYXkoYSx0aGlzKX07Ry5wcm90b3R5cGU9ci5mbixFPXIoZCk7dmFyIEg9L14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sST17Y2hpbGRyZW46ITAsY29udGVudHM6ITAsbmV4dDohMCxwcmV2OiEwfTtyLmZuLmV4dGVuZCh7aGFzOmZ1bmN0aW9uKGEpe3ZhciBiPXIoYSx0aGlzKSxjPWIubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpe2Zvcih2YXIgYT0wO2E8YzthKyspaWYoci5jb250YWlucyh0aGlzLGJbYV0pKXJldHVybiEwfSl9LGNsb3Nlc3Q6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTAsZT10aGlzLmxlbmd0aCxmPVtdLGc9XCJzdHJpbmdcIiE9dHlwZW9mIGEmJnIoYSk7aWYoIUEudGVzdChhKSlmb3IoO2Q8ZTtkKyspZm9yKGM9dGhpc1tkXTtjJiZjIT09YjtjPWMucGFyZW50Tm9kZSlpZihjLm5vZGVUeXBlPDExJiYoZz9nLmluZGV4KGMpPi0xOjE9PT1jLm5vZGVUeXBlJiZyLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGMsYSkpKXtmLnB1c2goYyk7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKGYubGVuZ3RoPjE/ci51bmlxdWVTb3J0KGYpOmYpfSxpbmRleDpmdW5jdGlvbihhKXtyZXR1cm4gYT9cInN0cmluZ1wiPT10eXBlb2YgYT9pLmNhbGwocihhKSx0aGlzWzBdKTppLmNhbGwodGhpcyxhLmpxdWVyeT9hWzBdOmEpOnRoaXNbMF0mJnRoaXNbMF0ucGFyZW50Tm9kZT90aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aDotMX0sYWRkOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHIudW5pcXVlU29ydChyLm1lcmdlKHRoaXMuZ2V0KCkscihhLGIpKSkpfSxhZGRCYWNrOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFkZChudWxsPT1hP3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKGEpKX19KTtmdW5jdGlvbiBKKGEsYil7d2hpbGUoKGE9YVtiXSkmJjEhPT1hLm5vZGVUeXBlKTtyZXR1cm4gYX1yLmVhY2goe3BhcmVudDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7cmV0dXJuIGImJjExIT09Yi5ub2RlVHlwZT9iOm51bGx9LHBhcmVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSxcInBhcmVudE5vZGVcIil9LHBhcmVudHNVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHkoYSxcInBhcmVudE5vZGVcIixjKX0sbmV4dDpmdW5jdGlvbihhKXtyZXR1cm4gSihhLFwibmV4dFNpYmxpbmdcIil9LHByZXY6ZnVuY3Rpb24oYSl7cmV0dXJuIEooYSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dEFsbDpmdW5jdGlvbihhKXtyZXR1cm4geShhLFwibmV4dFNpYmxpbmdcIil9LHByZXZBbGw6ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dFVudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4geShhLFwibmV4dFNpYmxpbmdcIixjKX0scHJldlVudGlsOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4geShhLFwicHJldmlvdXNTaWJsaW5nXCIsYyl9LHNpYmxpbmdzOmZ1bmN0aW9uKGEpe3JldHVybiB6KChhLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGEpfSxjaGlsZHJlbjpmdW5jdGlvbihhKXtyZXR1cm4geihhLmZpcnN0Q2hpbGQpfSxjb250ZW50czpmdW5jdGlvbihhKXtyZXR1cm4gYS5jb250ZW50RG9jdW1lbnR8fHIubWVyZ2UoW10sYS5jaGlsZE5vZGVzKX19LGZ1bmN0aW9uKGEsYil7ci5mblthXT1mdW5jdGlvbihjLGQpe3ZhciBlPXIubWFwKHRoaXMsYixjKTtyZXR1cm5cIlVudGlsXCIhPT1hLnNsaWNlKC01KSYmKGQ9YyksZCYmXCJzdHJpbmdcIj09dHlwZW9mIGQmJihlPXIuZmlsdGVyKGQsZSkpLHRoaXMubGVuZ3RoPjEmJihJW2FdfHxyLnVuaXF1ZVNvcnQoZSksSC50ZXN0KGEpJiZlLnJldmVyc2UoKSksdGhpcy5wdXNoU3RhY2soZSl9fSk7dmFyIEs9L1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nO2Z1bmN0aW9uIEwoYSl7dmFyIGI9e307cmV0dXJuIHIuZWFjaChhLm1hdGNoKEspfHxbXSxmdW5jdGlvbihhLGMpe2JbY109ITB9KSxifXIuQ2FsbGJhY2tzPWZ1bmN0aW9uKGEpe2E9XCJzdHJpbmdcIj09dHlwZW9mIGE/TChhKTpyLmV4dGVuZCh7fSxhKTt2YXIgYixjLGQsZSxmPVtdLGc9W10saD0tMSxpPWZ1bmN0aW9uKCl7Zm9yKGU9YS5vbmNlLGQ9Yj0hMDtnLmxlbmd0aDtoPS0xKXtjPWcuc2hpZnQoKTt3aGlsZSgrK2g8Zi5sZW5ndGgpZltoXS5hcHBseShjWzBdLGNbMV0pPT09ITEmJmEuc3RvcE9uRmFsc2UmJihoPWYubGVuZ3RoLGM9ITEpfWEubWVtb3J5fHwoYz0hMSksYj0hMSxlJiYoZj1jP1tdOlwiXCIpfSxqPXthZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gZiYmKGMmJiFiJiYoaD1mLmxlbmd0aC0xLGcucHVzaChjKSksZnVuY3Rpb24gZChiKXtyLmVhY2goYixmdW5jdGlvbihiLGMpe3IuaXNGdW5jdGlvbihjKT9hLnVuaXF1ZSYmai5oYXMoYyl8fGYucHVzaChjKTpjJiZjLmxlbmd0aCYmXCJzdHJpbmdcIiE9PXIudHlwZShjKSYmZChjKX0pfShhcmd1bWVudHMpLGMmJiFiJiZpKCkpLHRoaXN9LHJlbW92ZTpmdW5jdGlvbigpe3JldHVybiByLmVhY2goYXJndW1lbnRzLGZ1bmN0aW9uKGEsYil7dmFyIGM7d2hpbGUoKGM9ci5pbkFycmF5KGIsZixjKSk+LTEpZi5zcGxpY2UoYywxKSxjPD1oJiZoLS19KSx0aGlzfSxoYXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/ci5pbkFycmF5KGEsZik+LTE6Zi5sZW5ndGg+MH0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gZiYmKGY9W10pLHRoaXN9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gZT1nPVtdLGY9Yz1cIlwiLHRoaXN9LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIWZ9LGxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gZT1nPVtdLGN8fGJ8fChmPWM9XCJcIiksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuISFlfSxmaXJlV2l0aDpmdW5jdGlvbihhLGMpe3JldHVybiBlfHwoYz1jfHxbXSxjPVthLGMuc2xpY2U/Yy5zbGljZSgpOmNdLGcucHVzaChjKSxifHxpKCkpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gai5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWR9fTtyZXR1cm4gan07ZnVuY3Rpb24gTShhKXtyZXR1cm4gYX1mdW5jdGlvbiBOKGEpe3Rocm93IGF9ZnVuY3Rpb24gTyhhLGIsYyl7dmFyIGQ7dHJ5e2EmJnIuaXNGdW5jdGlvbihkPWEucHJvbWlzZSk/ZC5jYWxsKGEpLmRvbmUoYikuZmFpbChjKTphJiZyLmlzRnVuY3Rpb24oZD1hLnRoZW4pP2QuY2FsbChhLGIsYyk6Yi5jYWxsKHZvaWQgMCxhKX1jYXRjaChhKXtjLmNhbGwodm9pZCAwLGEpfX1yLmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24oYil7dmFyIGM9W1tcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIixyLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSxyLkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwyXSxbXCJyZXNvbHZlXCIsXCJkb25lXCIsci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDAsXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIixyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMSxcInJlamVjdGVkXCJdXSxkPVwicGVuZGluZ1wiLGU9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBmLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sXCJjYXRjaFwiOmZ1bmN0aW9uKGEpe3JldHVybiBlLnRoZW4obnVsbCxhKX0scGlwZTpmdW5jdGlvbigpe3ZhciBhPWFyZ3VtZW50cztyZXR1cm4gci5EZWZlcnJlZChmdW5jdGlvbihiKXtyLmVhY2goYyxmdW5jdGlvbihjLGQpe3ZhciBlPXIuaXNGdW5jdGlvbihhW2RbNF1dKSYmYVtkWzRdXTtmW2RbMV1dKGZ1bmN0aW9uKCl7dmFyIGE9ZSYmZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7YSYmci5pc0Z1bmN0aW9uKGEucHJvbWlzZSk/YS5wcm9taXNlKCkucHJvZ3Jlc3MoYi5ub3RpZnkpLmRvbmUoYi5yZXNvbHZlKS5mYWlsKGIucmVqZWN0KTpiW2RbMF0rXCJXaXRoXCJdKHRoaXMsZT9bYV06YXJndW1lbnRzKX0pfSksYT1udWxsfSkucHJvbWlzZSgpfSx0aGVuOmZ1bmN0aW9uKGIsZCxlKXt2YXIgZj0wO2Z1bmN0aW9uIGcoYixjLGQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGg9dGhpcyxpPWFyZ3VtZW50cyxqPWZ1bmN0aW9uKCl7dmFyIGEsajtpZighKGI8Zikpe2lmKGE9ZC5hcHBseShoLGkpLGE9PT1jLnByb21pc2UoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIpO2o9YSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKSYmYS50aGVuLHIuaXNGdW5jdGlvbihqKT9lP2ouY2FsbChhLGcoZixjLE0sZSksZyhmLGMsTixlKSk6KGYrKyxqLmNhbGwoYSxnKGYsYyxNLGUpLGcoZixjLE4sZSksZyhmLGMsTSxjLm5vdGlmeVdpdGgpKSk6KGQhPT1NJiYoaD12b2lkIDAsaT1bYV0pLChlfHxjLnJlc29sdmVXaXRoKShoLGkpKX19LGs9ZT9qOmZ1bmN0aW9uKCl7dHJ5e2ooKX1jYXRjaChhKXtyLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJnIuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhhLGsuc3RhY2tUcmFjZSksYisxPj1mJiYoZCE9PU4mJihoPXZvaWQgMCxpPVthXSksYy5yZWplY3RXaXRoKGgsaSkpfX07Yj9rKCk6KHIuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYoay5zdGFja1RyYWNlPXIuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLGEuc2V0VGltZW91dChrKSl9fXJldHVybiByLkRlZmVycmVkKGZ1bmN0aW9uKGEpe2NbMF1bM10uYWRkKGcoMCxhLHIuaXNGdW5jdGlvbihlKT9lOk0sYS5ub3RpZnlXaXRoKSksY1sxXVszXS5hZGQoZygwLGEsci5pc0Z1bmN0aW9uKGIpP2I6TSkpLGNbMl1bM10uYWRkKGcoMCxhLHIuaXNGdW5jdGlvbihkKT9kOk4pKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YT9yLmV4dGVuZChhLGUpOmV9fSxmPXt9O3JldHVybiByLmVhY2goYyxmdW5jdGlvbihhLGIpe3ZhciBnPWJbMl0saD1iWzVdO2VbYlsxXV09Zy5hZGQsaCYmZy5hZGQoZnVuY3Rpb24oKXtkPWh9LGNbMy1hXVsyXS5kaXNhYmxlLGNbMF1bMl0ubG9jayksZy5hZGQoYlszXS5maXJlKSxmW2JbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIGZbYlswXStcIldpdGhcIl0odGhpcz09PWY/dm9pZCAwOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxmW2JbMF0rXCJXaXRoXCJdPWcuZmlyZVdpdGh9KSxlLnByb21pc2UoZiksYiYmYi5jYWxsKGYsZiksZn0sd2hlbjpmdW5jdGlvbihhKXt2YXIgYj1hcmd1bWVudHMubGVuZ3RoLGM9YixkPUFycmF5KGMpLGU9Zi5jYWxsKGFyZ3VtZW50cyksZz1yLkRlZmVycmVkKCksaD1mdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYyl7ZFthXT10aGlzLGVbYV09YXJndW1lbnRzLmxlbmd0aD4xP2YuY2FsbChhcmd1bWVudHMpOmMsLS1ifHxnLnJlc29sdmVXaXRoKGQsZSl9fTtpZihiPD0xJiYoTyhhLGcuZG9uZShoKGMpKS5yZXNvbHZlLGcucmVqZWN0KSxcInBlbmRpbmdcIj09PWcuc3RhdGUoKXx8ci5pc0Z1bmN0aW9uKGVbY10mJmVbY10udGhlbikpKXJldHVybiBnLnRoZW4oKTt3aGlsZShjLS0pTyhlW2NdLGgoYyksZy5yZWplY3QpO3JldHVybiBnLnByb21pc2UoKX19KTt2YXIgUD0vXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztyLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2s9ZnVuY3Rpb24oYixjKXthLmNvbnNvbGUmJmEuY29uc29sZS53YXJuJiZiJiZQLnRlc3QoYi5uYW1lKSYmYS5jb25zb2xlLndhcm4oXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIitiLm1lc3NhZ2UsYi5zdGFjayxjKX0sci5yZWFkeUV4Y2VwdGlvbj1mdW5jdGlvbihiKXthLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBifSl9O3ZhciBRPXIuRGVmZXJyZWQoKTtyLmZuLnJlYWR5PWZ1bmN0aW9uKGEpe3JldHVybiBRLnRoZW4oYSlbXCJjYXRjaFwiXShmdW5jdGlvbihhKXtyLnJlYWR5RXhjZXB0aW9uKGEpfSksdGhpc30sci5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEsaG9sZFJlYWR5OmZ1bmN0aW9uKGEpe2E/ci5yZWFkeVdhaXQrKzpyLnJlYWR5KCEwKX0scmVhZHk6ZnVuY3Rpb24oYSl7KGE9PT0hMD8tLXIucmVhZHlXYWl0OnIuaXNSZWFkeSl8fChyLmlzUmVhZHk9ITAsYSE9PSEwJiYtLXIucmVhZHlXYWl0PjB8fFEucmVzb2x2ZVdpdGgoZCxbcl0pKX19KSxyLnJlYWR5LnRoZW49US50aGVuO2Z1bmN0aW9uIFIoKXtkLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsUiksXG5hLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsUiksci5yZWFkeSgpfVwiY29tcGxldGVcIj09PWQucmVhZHlTdGF0ZXx8XCJsb2FkaW5nXCIhPT1kLnJlYWR5U3RhdGUmJiFkLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbD9hLnNldFRpbWVvdXQoci5yZWFkeSk6KGQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixSKSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsUikpO3ZhciBTPWZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPTAsaT1hLmxlbmd0aCxqPW51bGw9PWM7aWYoXCJvYmplY3RcIj09PXIudHlwZShjKSl7ZT0hMDtmb3IoaCBpbiBjKVMoYSxiLGgsY1toXSwhMCxmLGcpfWVsc2UgaWYodm9pZCAwIT09ZCYmKGU9ITAsci5pc0Z1bmN0aW9uKGQpfHwoZz0hMCksaiYmKGc/KGIuY2FsbChhLGQpLGI9bnVsbCk6KGo9YixiPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gai5jYWxsKHIoYSksYyl9KSksYikpZm9yKDtoPGk7aCsrKWIoYVtoXSxjLGc/ZDpkLmNhbGwoYVtoXSxoLGIoYVtoXSxjKSkpO3JldHVybiBlP2E6aj9iLmNhbGwoYSk6aT9iKGFbMF0sYyk6Zn0sVD1mdW5jdGlvbihhKXtyZXR1cm4gMT09PWEubm9kZVR5cGV8fDk9PT1hLm5vZGVUeXBlfHwhK2Eubm9kZVR5cGV9O2Z1bmN0aW9uIFUoKXt0aGlzLmV4cGFuZG89ci5leHBhbmRvK1UudWlkKyt9VS51aWQ9MSxVLnByb3RvdHlwZT17Y2FjaGU6ZnVuY3Rpb24oYSl7dmFyIGI9YVt0aGlzLmV4cGFuZG9dO3JldHVybiBifHwoYj17fSxUKGEpJiYoYS5ub2RlVHlwZT9hW3RoaXMuZXhwYW5kb109YjpPYmplY3QuZGVmaW5lUHJvcGVydHkoYSx0aGlzLmV4cGFuZG8se3ZhbHVlOmIsY29uZmlndXJhYmxlOiEwfSkpKSxifSxzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGU9dGhpcy5jYWNoZShhKTtpZihcInN0cmluZ1wiPT10eXBlb2YgYillW3IuY2FtZWxDYXNlKGIpXT1jO2Vsc2UgZm9yKGQgaW4gYillW3IuY2FtZWxDYXNlKGQpXT1iW2RdO3JldHVybiBlfSxnZXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdm9pZCAwPT09Yj90aGlzLmNhY2hlKGEpOmFbdGhpcy5leHBhbmRvXSYmYVt0aGlzLmV4cGFuZG9dW3IuY2FtZWxDYXNlKGIpXX0sYWNjZXNzOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdm9pZCAwPT09Ynx8YiYmXCJzdHJpbmdcIj09dHlwZW9mIGImJnZvaWQgMD09PWM/dGhpcy5nZXQoYSxiKToodGhpcy5zZXQoYSxiLGMpLHZvaWQgMCE9PWM/YzpiKX0scmVtb3ZlOmZ1bmN0aW9uKGEsYil7dmFyIGMsZD1hW3RoaXMuZXhwYW5kb107aWYodm9pZCAwIT09ZCl7aWYodm9pZCAwIT09Yil7ci5pc0FycmF5KGIpP2I9Yi5tYXAoci5jYW1lbENhc2UpOihiPXIuY2FtZWxDYXNlKGIpLGI9YiBpbiBkP1tiXTpiLm1hdGNoKEspfHxbXSksYz1iLmxlbmd0aDt3aGlsZShjLS0pZGVsZXRlIGRbYltjXV19KHZvaWQgMD09PWJ8fHIuaXNFbXB0eU9iamVjdChkKSkmJihhLm5vZGVUeXBlP2FbdGhpcy5leHBhbmRvXT12b2lkIDA6ZGVsZXRlIGFbdGhpcy5leHBhbmRvXSl9fSxoYXNEYXRhOmZ1bmN0aW9uKGEpe3ZhciBiPWFbdGhpcy5leHBhbmRvXTtyZXR1cm4gdm9pZCAwIT09YiYmIXIuaXNFbXB0eU9iamVjdChiKX19O3ZhciBWPW5ldyBVLFc9bmV3IFUsWD0vXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sWT0vW0EtWl0vZztmdW5jdGlvbiBaKGEpe3JldHVyblwidHJ1ZVwiPT09YXx8XCJmYWxzZVwiIT09YSYmKFwibnVsbFwiPT09YT9udWxsOmE9PT0rYStcIlwiPythOlgudGVzdChhKT9KU09OLnBhcnNlKGEpOmEpfWZ1bmN0aW9uICQoYSxiLGMpe3ZhciBkO2lmKHZvaWQgMD09PWMmJjE9PT1hLm5vZGVUeXBlKWlmKGQ9XCJkYXRhLVwiK2IucmVwbGFjZShZLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCksYz1hLmdldEF0dHJpYnV0ZShkKSxcInN0cmluZ1wiPT10eXBlb2YgYyl7dHJ5e2M9WihjKX1jYXRjaChlKXt9Vy5zZXQoYSxiLGMpfWVsc2UgYz12b2lkIDA7cmV0dXJuIGN9ci5leHRlbmQoe2hhc0RhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuIFcuaGFzRGF0YShhKXx8Vi5oYXNEYXRhKGEpfSxkYXRhOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gVy5hY2Nlc3MoYSxiLGMpfSxyZW1vdmVEYXRhOmZ1bmN0aW9uKGEsYil7Vy5yZW1vdmUoYSxiKX0sX2RhdGE6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBWLmFjY2VzcyhhLGIsYyl9LF9yZW1vdmVEYXRhOmZ1bmN0aW9uKGEsYil7Vi5yZW1vdmUoYSxiKX19KSxyLmZuLmV4dGVuZCh7ZGF0YTpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmPXRoaXNbMF0sZz1mJiZmLmF0dHJpYnV0ZXM7aWYodm9pZCAwPT09YSl7aWYodGhpcy5sZW5ndGgmJihlPVcuZ2V0KGYpLDE9PT1mLm5vZGVUeXBlJiYhVi5nZXQoZixcImhhc0RhdGFBdHRyc1wiKSkpe2M9Zy5sZW5ndGg7d2hpbGUoYy0tKWdbY10mJihkPWdbY10ubmFtZSwwPT09ZC5pbmRleE9mKFwiZGF0YS1cIikmJihkPXIuY2FtZWxDYXNlKGQuc2xpY2UoNSkpLCQoZixkLGVbZF0pKSk7Vi5zZXQoZixcImhhc0RhdGFBdHRyc1wiLCEwKX1yZXR1cm4gZX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgYT90aGlzLmVhY2goZnVuY3Rpb24oKXtXLnNldCh0aGlzLGEpfSk6Uyh0aGlzLGZ1bmN0aW9uKGIpe3ZhciBjO2lmKGYmJnZvaWQgMD09PWIpe2lmKGM9Vy5nZXQoZixhKSx2b2lkIDAhPT1jKXJldHVybiBjO2lmKGM9JChmLGEpLHZvaWQgMCE9PWMpcmV0dXJuIGN9ZWxzZSB0aGlzLmVhY2goZnVuY3Rpb24oKXtXLnNldCh0aGlzLGEsYil9KX0sbnVsbCxiLGFyZ3VtZW50cy5sZW5ndGg+MSxudWxsLCEwKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Vy5yZW1vdmUodGhpcyxhKX0pfX0pLHIuZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ7aWYoYSlyZXR1cm4gYj0oYnx8XCJmeFwiKStcInF1ZXVlXCIsZD1WLmdldChhLGIpLGMmJighZHx8ci5pc0FycmF5KGMpP2Q9Vi5hY2Nlc3MoYSxiLHIubWFrZUFycmF5KGMpKTpkLnB1c2goYykpLGR8fFtdfSxkZXF1ZXVlOmZ1bmN0aW9uKGEsYil7Yj1ifHxcImZ4XCI7dmFyIGM9ci5xdWV1ZShhLGIpLGQ9Yy5sZW5ndGgsZT1jLnNoaWZ0KCksZj1yLl9xdWV1ZUhvb2tzKGEsYiksZz1mdW5jdGlvbigpe3IuZGVxdWV1ZShhLGIpfTtcImlucHJvZ3Jlc3NcIj09PWUmJihlPWMuc2hpZnQoKSxkLS0pLGUmJihcImZ4XCI9PT1iJiZjLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLGRlbGV0ZSBmLnN0b3AsZS5jYWxsKGEsZyxmKSksIWQmJmYmJmYuZW1wdHkuZmlyZSgpfSxfcXVldWVIb29rczpmdW5jdGlvbihhLGIpe3ZhciBjPWIrXCJxdWV1ZUhvb2tzXCI7cmV0dXJuIFYuZ2V0KGEsYyl8fFYuYWNjZXNzKGEsYyx7ZW1wdHk6ci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKS5hZGQoZnVuY3Rpb24oKXtWLnJlbW92ZShhLFtiK1wicXVldWVcIixjXSl9KX0pfX0pLHIuZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPTI7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGEmJihiPWEsYT1cImZ4XCIsYy0tKSxhcmd1bWVudHMubGVuZ3RoPGM/ci5xdWV1ZSh0aGlzWzBdLGEpOnZvaWQgMD09PWI/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1yLnF1ZXVlKHRoaXMsYSxiKTtyLl9xdWV1ZUhvb2tzKHRoaXMsYSksXCJmeFwiPT09YSYmXCJpbnByb2dyZXNzXCIhPT1jWzBdJiZyLmRlcXVldWUodGhpcyxhKX0pfSxkZXF1ZXVlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtyLmRlcXVldWUodGhpcyxhKX0pfSxjbGVhclF1ZXVlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnF1ZXVlKGF8fFwiZnhcIixbXSl9LHByb21pc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTEsZT1yLkRlZmVycmVkKCksZj10aGlzLGc9dGhpcy5sZW5ndGgsaD1mdW5jdGlvbigpey0tZHx8ZS5yZXNvbHZlV2l0aChmLFtmXSl9O1wic3RyaW5nXCIhPXR5cGVvZiBhJiYoYj1hLGE9dm9pZCAwKSxhPWF8fFwiZnhcIjt3aGlsZShnLS0pYz1WLmdldChmW2ddLGErXCJxdWV1ZUhvb2tzXCIpLGMmJmMuZW1wdHkmJihkKyssYy5lbXB0eS5hZGQoaCkpO3JldHVybiBoKCksZS5wcm9taXNlKGIpfX0pO3ZhciBfPS9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvLnNvdXJjZSxhYT1uZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIitfK1wiKShbYS16JV0qKSRcIixcImlcIiksYmE9W1wiVG9wXCIsXCJSaWdodFwiLFwiQm90dG9tXCIsXCJMZWZ0XCJdLGNhPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9Ynx8YSxcIm5vbmVcIj09PWEuc3R5bGUuZGlzcGxheXx8XCJcIj09PWEuc3R5bGUuZGlzcGxheSYmci5jb250YWlucyhhLm93bmVyRG9jdW1lbnQsYSkmJlwibm9uZVwiPT09ci5jc3MoYSxcImRpc3BsYXlcIil9LGRhPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGYsZz17fTtmb3IoZiBpbiBiKWdbZl09YS5zdHlsZVtmXSxhLnN0eWxlW2ZdPWJbZl07ZT1jLmFwcGx5KGEsZHx8W10pO2ZvcihmIGluIGIpYS5zdHlsZVtmXT1nW2ZdO3JldHVybiBlfTtmdW5jdGlvbiBlYShhLGIsYyxkKXt2YXIgZSxmPTEsZz0yMCxoPWQ/ZnVuY3Rpb24oKXtyZXR1cm4gZC5jdXIoKX06ZnVuY3Rpb24oKXtyZXR1cm4gci5jc3MoYSxiLFwiXCIpfSxpPWgoKSxqPWMmJmNbM118fChyLmNzc051bWJlcltiXT9cIlwiOlwicHhcIiksaz0oci5jc3NOdW1iZXJbYl18fFwicHhcIiE9PWomJitpKSYmYWEuZXhlYyhyLmNzcyhhLGIpKTtpZihrJiZrWzNdIT09ail7aj1qfHxrWzNdLGM9Y3x8W10saz0raXx8MTtkbyBmPWZ8fFwiLjVcIixrLz1mLHIuc3R5bGUoYSxiLGsraik7d2hpbGUoZiE9PShmPWgoKS9pKSYmMSE9PWYmJi0tZyl9cmV0dXJuIGMmJihrPStrfHwraXx8MCxlPWNbMV0/aysoY1sxXSsxKSpjWzJdOitjWzJdLGQmJihkLnVuaXQ9aixkLnN0YXJ0PWssZC5lbmQ9ZSkpLGV9dmFyIGZhPXt9O2Z1bmN0aW9uIGdhKGEpe3ZhciBiLGM9YS5vd25lckRvY3VtZW50LGQ9YS5ub2RlTmFtZSxlPWZhW2RdO3JldHVybiBlP2U6KGI9Yy5ib2R5LmFwcGVuZENoaWxkKGMuY3JlYXRlRWxlbWVudChkKSksZT1yLmNzcyhiLFwiZGlzcGxheVwiKSxiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYiksXCJub25lXCI9PT1lJiYoZT1cImJsb2NrXCIpLGZhW2RdPWUsZSl9ZnVuY3Rpb24gaGEoYSxiKXtmb3IodmFyIGMsZCxlPVtdLGY9MCxnPWEubGVuZ3RoO2Y8ZztmKyspZD1hW2ZdLGQuc3R5bGUmJihjPWQuc3R5bGUuZGlzcGxheSxiPyhcIm5vbmVcIj09PWMmJihlW2ZdPVYuZ2V0KGQsXCJkaXNwbGF5XCIpfHxudWxsLGVbZl18fChkLnN0eWxlLmRpc3BsYXk9XCJcIikpLFwiXCI9PT1kLnN0eWxlLmRpc3BsYXkmJmNhKGQpJiYoZVtmXT1nYShkKSkpOlwibm9uZVwiIT09YyYmKGVbZl09XCJub25lXCIsVi5zZXQoZCxcImRpc3BsYXlcIixjKSkpO2ZvcihmPTA7ZjxnO2YrKyludWxsIT1lW2ZdJiYoYVtmXS5zdHlsZS5kaXNwbGF5PWVbZl0pO3JldHVybiBhfXIuZm4uZXh0ZW5kKHtzaG93OmZ1bmN0aW9uKCl7cmV0dXJuIGhhKHRoaXMsITApfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIGhhKHRoaXMpfSx0b2dnbGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBhP2E/dGhpcy5zaG93KCk6dGhpcy5oaWRlKCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7Y2EodGhpcyk/cih0aGlzKS5zaG93KCk6cih0aGlzKS5oaWRlKCl9KX19KTt2YXIgaWE9L14oPzpjaGVja2JveHxyYWRpbykkL2ksamE9LzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pLGthPS9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksbGE9e29wdGlvbjpbMSxcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIixcIjwvc2VsZWN0PlwiXSx0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLGNvbDpbMixcIjx0YWJsZT48Y29sZ3JvdXA+XCIsXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDpbMCxcIlwiLFwiXCJdfTtsYS5vcHRncm91cD1sYS5vcHRpb24sbGEudGJvZHk9bGEudGZvb3Q9bGEuY29sZ3JvdXA9bGEuY2FwdGlvbj1sYS50aGVhZCxsYS50aD1sYS50ZDtmdW5jdGlvbiBtYShhLGIpe3ZhciBjO3JldHVybiBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lP2EuZ2V0RWxlbWVudHNCeVRhZ05hbWUoYnx8XCIqXCIpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLnF1ZXJ5U2VsZWN0b3JBbGw/YS5xdWVyeVNlbGVjdG9yQWxsKGJ8fFwiKlwiKTpbXSx2b2lkIDA9PT1ifHxiJiZyLm5vZGVOYW1lKGEsYik/ci5tZXJnZShbYV0sYyk6Y31mdW5jdGlvbiBuYShhLGIpe2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKylWLnNldChhW2NdLFwiZ2xvYmFsRXZhbFwiLCFifHxWLmdldChiW2NdLFwiZ2xvYmFsRXZhbFwiKSl9dmFyIG9hPS88fCYjP1xcdys7LztmdW5jdGlvbiBwYShhLGIsYyxkLGUpe2Zvcih2YXIgZixnLGgsaSxqLGssbD1iLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxtPVtdLG49MCxvPWEubGVuZ3RoO248bztuKyspaWYoZj1hW25dLGZ8fDA9PT1mKWlmKFwib2JqZWN0XCI9PT1yLnR5cGUoZikpci5tZXJnZShtLGYubm9kZVR5cGU/W2ZdOmYpO2Vsc2UgaWYob2EudGVzdChmKSl7Zz1nfHxsLmFwcGVuZENoaWxkKGIuY3JlYXRlRWxlbWVudChcImRpdlwiKSksaD0oamEuZXhlYyhmKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksaT1sYVtoXXx8bGEuX2RlZmF1bHQsZy5pbm5lckhUTUw9aVsxXStyLmh0bWxQcmVmaWx0ZXIoZikraVsyXSxrPWlbMF07d2hpbGUoay0tKWc9Zy5sYXN0Q2hpbGQ7ci5tZXJnZShtLGcuY2hpbGROb2RlcyksZz1sLmZpcnN0Q2hpbGQsZy50ZXh0Q29udGVudD1cIlwifWVsc2UgbS5wdXNoKGIuY3JlYXRlVGV4dE5vZGUoZikpO2wudGV4dENvbnRlbnQ9XCJcIixuPTA7d2hpbGUoZj1tW24rK10paWYoZCYmci5pbkFycmF5KGYsZCk+LTEpZSYmZS5wdXNoKGYpO2Vsc2UgaWYoaj1yLmNvbnRhaW5zKGYub3duZXJEb2N1bWVudCxmKSxnPW1hKGwuYXBwZW5kQ2hpbGQoZiksXCJzY3JpcHRcIiksaiYmbmEoZyksYyl7az0wO3doaWxlKGY9Z1trKytdKWthLnRlc3QoZi50eXBlfHxcIlwiKSYmYy5wdXNoKGYpfXJldHVybiBsfSFmdW5jdGlvbigpe3ZhciBhPWQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGI9YS5hcHBlbmRDaGlsZChkLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLGM9ZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7Yy5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJyYWRpb1wiKSxjLnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIixcImNoZWNrZWRcIiksYy5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJ0XCIpLGIuYXBwZW5kQ2hpbGQoYyksby5jaGVja0Nsb25lPWIuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLGIuaW5uZXJIVE1MPVwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiLG8ubm9DbG9uZUNoZWNrZWQ9ISFiLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZX0oKTt2YXIgcWE9ZC5kb2N1bWVudEVsZW1lbnQscmE9L15rZXkvLHNhPS9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyx0YT0vXihbXi5dKikoPzpcXC4oLispfCkvO2Z1bmN0aW9uIHVhKCl7cmV0dXJuITB9ZnVuY3Rpb24gdmEoKXtyZXR1cm4hMX1mdW5jdGlvbiB3YSgpe3RyeXtyZXR1cm4gZC5hY3RpdmVFbGVtZW50fWNhdGNoKGEpe319ZnVuY3Rpb24geGEoYSxiLGMsZCxlLGYpe3ZhciBnLGg7aWYoXCJvYmplY3RcIj09dHlwZW9mIGIpe1wic3RyaW5nXCIhPXR5cGVvZiBjJiYoZD1kfHxjLGM9dm9pZCAwKTtmb3IoaCBpbiBiKXhhKGEsaCxjLGQsYltoXSxmKTtyZXR1cm4gYX1pZihudWxsPT1kJiZudWxsPT1lPyhlPWMsZD1jPXZvaWQgMCk6bnVsbD09ZSYmKFwic3RyaW5nXCI9PXR5cGVvZiBjPyhlPWQsZD12b2lkIDApOihlPWQsZD1jLGM9dm9pZCAwKSksZT09PSExKWU9dmE7ZWxzZSBpZighZSlyZXR1cm4gYTtyZXR1cm4gMT09PWYmJihnPWUsZT1mdW5jdGlvbihhKXtyZXR1cm4gcigpLm9mZihhKSxnLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZS5ndWlkPWcuZ3VpZHx8KGcuZ3VpZD1yLmd1aWQrKykpLGEuZWFjaChmdW5jdGlvbigpe3IuZXZlbnQuYWRkKHRoaXMsYixlLGQsYyl9KX1yLmV2ZW50PXtnbG9iYWw6e30sYWRkOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGYsZyxoLGksaixrLGwsbSxuLG8scCxxPVYuZ2V0KGEpO2lmKHEpe2MuaGFuZGxlciYmKGY9YyxjPWYuaGFuZGxlcixlPWYuc2VsZWN0b3IpLGUmJnIuZmluZC5tYXRjaGVzU2VsZWN0b3IocWEsZSksYy5ndWlkfHwoYy5ndWlkPXIuZ3VpZCsrKSwoaT1xLmV2ZW50cyl8fChpPXEuZXZlbnRzPXt9KSwoZz1xLmhhbmRsZSl8fChnPXEuaGFuZGxlPWZ1bmN0aW9uKGIpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiByJiZyLmV2ZW50LnRyaWdnZXJlZCE9PWIudHlwZT9yLmV2ZW50LmRpc3BhdGNoLmFwcGx5KGEsYXJndW1lbnRzKTp2b2lkIDB9KSxiPShifHxcIlwiKS5tYXRjaChLKXx8W1wiXCJdLGo9Yi5sZW5ndGg7d2hpbGUoai0tKWg9dGEuZXhlYyhiW2pdKXx8W10sbj1wPWhbMV0sbz0oaFsyXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxuJiYobD1yLmV2ZW50LnNwZWNpYWxbbl18fHt9LG49KGU/bC5kZWxlZ2F0ZVR5cGU6bC5iaW5kVHlwZSl8fG4sbD1yLmV2ZW50LnNwZWNpYWxbbl18fHt9LGs9ci5leHRlbmQoe3R5cGU6bixvcmlnVHlwZTpwLGRhdGE6ZCxoYW5kbGVyOmMsZ3VpZDpjLmd1aWQsc2VsZWN0b3I6ZSxuZWVkc0NvbnRleHQ6ZSYmci5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KGUpLG5hbWVzcGFjZTpvLmpvaW4oXCIuXCIpfSxmKSwobT1pW25dKXx8KG09aVtuXT1bXSxtLmRlbGVnYXRlQ291bnQ9MCxsLnNldHVwJiZsLnNldHVwLmNhbGwoYSxkLG8sZykhPT0hMXx8YS5hZGRFdmVudExpc3RlbmVyJiZhLmFkZEV2ZW50TGlzdGVuZXIobixnKSksbC5hZGQmJihsLmFkZC5jYWxsKGEsayksay5oYW5kbGVyLmd1aWR8fChrLmhhbmRsZXIuZ3VpZD1jLmd1aWQpKSxlP20uc3BsaWNlKG0uZGVsZWdhdGVDb3VudCsrLDAsayk6bS5wdXNoKGspLHIuZXZlbnQuZ2xvYmFsW25dPSEwKX19LHJlbW92ZTpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGcsaCxpLGosayxsLG0sbixvLHAscT1WLmhhc0RhdGEoYSkmJlYuZ2V0KGEpO2lmKHEmJihpPXEuZXZlbnRzKSl7Yj0oYnx8XCJcIikubWF0Y2goSyl8fFtcIlwiXSxqPWIubGVuZ3RoO3doaWxlKGotLSlpZihoPXRhLmV4ZWMoYltqXSl8fFtdLG49cD1oWzFdLG89KGhbMl18fFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksbil7bD1yLmV2ZW50LnNwZWNpYWxbbl18fHt9LG49KGQ/bC5kZWxlZ2F0ZVR5cGU6bC5iaW5kVHlwZSl8fG4sbT1pW25dfHxbXSxoPWhbMl0mJm5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitvLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKSxnPWY9bS5sZW5ndGg7d2hpbGUoZi0tKWs9bVtmXSwhZSYmcCE9PWsub3JpZ1R5cGV8fGMmJmMuZ3VpZCE9PWsuZ3VpZHx8aCYmIWgudGVzdChrLm5hbWVzcGFjZSl8fGQmJmQhPT1rLnNlbGVjdG9yJiYoXCIqKlwiIT09ZHx8IWsuc2VsZWN0b3IpfHwobS5zcGxpY2UoZiwxKSxrLnNlbGVjdG9yJiZtLmRlbGVnYXRlQ291bnQtLSxsLnJlbW92ZSYmbC5yZW1vdmUuY2FsbChhLGspKTtnJiYhbS5sZW5ndGgmJihsLnRlYXJkb3duJiZsLnRlYXJkb3duLmNhbGwoYSxvLHEuaGFuZGxlKSE9PSExfHxyLnJlbW92ZUV2ZW50KGEsbixxLmhhbmRsZSksZGVsZXRlIGlbbl0pfWVsc2UgZm9yKG4gaW4gaSlyLmV2ZW50LnJlbW92ZShhLG4rYltqXSxjLGQsITApO3IuaXNFbXB0eU9iamVjdChpKSYmVi5yZW1vdmUoYSxcImhhbmRsZSBldmVudHNcIil9fSxkaXNwYXRjaDpmdW5jdGlvbihhKXt2YXIgYj1yLmV2ZW50LmZpeChhKSxjLGQsZSxmLGcsaCxpPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxqPShWLmdldCh0aGlzLFwiZXZlbnRzXCIpfHx7fSlbYi50eXBlXXx8W10saz1yLmV2ZW50LnNwZWNpYWxbYi50eXBlXXx8e307Zm9yKGlbMF09YixjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKylpW2NdPWFyZ3VtZW50c1tjXTtpZihiLmRlbGVnYXRlVGFyZ2V0PXRoaXMsIWsucHJlRGlzcGF0Y2h8fGsucHJlRGlzcGF0Y2guY2FsbCh0aGlzLGIpIT09ITEpe2g9ci5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsYixqKSxjPTA7d2hpbGUoKGY9aFtjKytdKSYmIWIuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSl7Yi5jdXJyZW50VGFyZ2V0PWYuZWxlbSxkPTA7d2hpbGUoKGc9Zi5oYW5kbGVyc1tkKytdKSYmIWIuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSliLnJuYW1lc3BhY2UmJiFiLnJuYW1lc3BhY2UudGVzdChnLm5hbWVzcGFjZSl8fChiLmhhbmRsZU9iaj1nLGIuZGF0YT1nLmRhdGEsZT0oKHIuZXZlbnQuc3BlY2lhbFtnLm9yaWdUeXBlXXx8e30pLmhhbmRsZXx8Zy5oYW5kbGVyKS5hcHBseShmLmVsZW0saSksdm9pZCAwIT09ZSYmKGIucmVzdWx0PWUpPT09ITEmJihiLnByZXZlbnREZWZhdWx0KCksYi5zdG9wUHJvcGFnYXRpb24oKSkpfXJldHVybiBrLnBvc3REaXNwYXRjaCYmay5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLGIpLGIucmVzdWx0fX0saGFuZGxlcnM6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZixnLGg9W10saT1iLmRlbGVnYXRlQ291bnQsaj1hLnRhcmdldDtpZihpJiZqLm5vZGVUeXBlJiYhKFwiY2xpY2tcIj09PWEudHlwZSYmYS5idXR0b24+PTEpKWZvcig7aiE9PXRoaXM7aj1qLnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PWoubm9kZVR5cGUmJihcImNsaWNrXCIhPT1hLnR5cGV8fGouZGlzYWJsZWQhPT0hMCkpe2ZvcihmPVtdLGc9e30sYz0wO2M8aTtjKyspZD1iW2NdLGU9ZC5zZWxlY3RvcitcIiBcIix2b2lkIDA9PT1nW2VdJiYoZ1tlXT1kLm5lZWRzQ29udGV4dD9yKGUsdGhpcykuaW5kZXgoaik+LTE6ci5maW5kKGUsdGhpcyxudWxsLFtqXSkubGVuZ3RoKSxnW2VdJiZmLnB1c2goZCk7Zi5sZW5ndGgmJmgucHVzaCh7ZWxlbTpqLGhhbmRsZXJzOmZ9KX1yZXR1cm4gaj10aGlzLGk8Yi5sZW5ndGgmJmgucHVzaCh7ZWxlbTpqLGhhbmRsZXJzOmIuc2xpY2UoaSl9KSxofSxhZGRQcm9wOmZ1bmN0aW9uKGEsYil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHIuRXZlbnQucHJvdG90eXBlLGEse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpyLmlzRnVuY3Rpb24oYik/ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIGIodGhpcy5vcmlnaW5hbEV2ZW50KX06ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFthXX0sc2V0OmZ1bmN0aW9uKGIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLGEse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmJ9KX19KX0sZml4OmZ1bmN0aW9uKGEpe3JldHVybiBhW3IuZXhwYW5kb10/YTpuZXcgci5FdmVudChhKX0sc3BlY2lhbDp7bG9hZDp7bm9CdWJibGU6ITB9LGZvY3VzOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYodGhpcyE9PXdhKCkmJnRoaXMuZm9jdXMpcmV0dXJuIHRoaXMuZm9jdXMoKSwhMX0sZGVsZWdhdGVUeXBlOlwiZm9jdXNpblwifSxibHVyOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYodGhpcz09PXdhKCkmJnRoaXMuYmx1cilyZXR1cm4gdGhpcy5ibHVyKCksITF9LGRlbGVnYXRlVHlwZTpcImZvY3Vzb3V0XCJ9LGNsaWNrOnt0cmlnZ2VyOmZ1bmN0aW9uKCl7aWYoXCJjaGVja2JveFwiPT09dGhpcy50eXBlJiZ0aGlzLmNsaWNrJiZyLm5vZGVOYW1lKHRoaXMsXCJpbnB1dFwiKSlyZXR1cm4gdGhpcy5jbGljaygpLCExfSxfZGVmYXVsdDpmdW5jdGlvbihhKXtyZXR1cm4gci5ub2RlTmFtZShhLnRhcmdldCxcImFcIil9fSxiZWZvcmV1bmxvYWQ6e3Bvc3REaXNwYXRjaDpmdW5jdGlvbihhKXt2b2lkIDAhPT1hLnJlc3VsdCYmYS5vcmlnaW5hbEV2ZW50JiYoYS5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlPWEucmVzdWx0KX19fX0sci5yZW1vdmVFdmVudD1mdW5jdGlvbihhLGIsYyl7YS5yZW1vdmVFdmVudExpc3RlbmVyJiZhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixjKX0sci5FdmVudD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzIGluc3RhbmNlb2Ygci5FdmVudD8oYSYmYS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9YSx0aGlzLnR5cGU9YS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWEuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09YS5kZWZhdWx0UHJldmVudGVkJiZhLnJldHVyblZhbHVlPT09ITE/dWE6dmEsdGhpcy50YXJnZXQ9YS50YXJnZXQmJjM9PT1hLnRhcmdldC5ub2RlVHlwZT9hLnRhcmdldC5wYXJlbnROb2RlOmEudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1hLmN1cnJlbnRUYXJnZXQsdGhpcy5yZWxhdGVkVGFyZ2V0PWEucmVsYXRlZFRhcmdldCk6dGhpcy50eXBlPWEsYiYmci5leHRlbmQodGhpcyxiKSx0aGlzLnRpbWVTdGFtcD1hJiZhLnRpbWVTdGFtcHx8ci5ub3coKSx2b2lkKHRoaXNbci5leHBhbmRvXT0hMCkpOm5ldyByLkV2ZW50KGEsYil9LHIuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpyLkV2ZW50LGlzRGVmYXVsdFByZXZlbnRlZDp2YSxpc1Byb3BhZ2F0aW9uU3RvcHBlZDp2YSxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDp2YSxpc1NpbXVsYXRlZDohMSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD11YSxhJiYhdGhpcy5pc1NpbXVsYXRlZCYmYS5wcmV2ZW50RGVmYXVsdCgpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD11YSxhJiYhdGhpcy5pc1NpbXVsYXRlZCYmYS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9dWEsYSYmIXRoaXMuaXNTaW11bGF0ZWQmJmEuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LHIuZWFjaCh7YWx0S2V5OiEwLGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxjaGFuZ2VkVG91Y2hlczohMCxjdHJsS2V5OiEwLGRldGFpbDohMCxldmVudFBoYXNlOiEwLG1ldGFLZXk6ITAscGFnZVg6ITAscGFnZVk6ITAsc2hpZnRLZXk6ITAsdmlldzohMCxcImNoYXJcIjohMCxjaGFyQ29kZTohMCxrZXk6ITAsa2V5Q29kZTohMCxidXR0b246ITAsYnV0dG9uczohMCxjbGllbnRYOiEwLGNsaWVudFk6ITAsb2Zmc2V0WDohMCxvZmZzZXRZOiEwLHBvaW50ZXJJZDohMCxwb2ludGVyVHlwZTohMCxzY3JlZW5YOiEwLHNjcmVlblk6ITAsdGFyZ2V0VG91Y2hlczohMCx0b0VsZW1lbnQ6ITAsdG91Y2hlczohMCx3aGljaDpmdW5jdGlvbihhKXt2YXIgYj1hLmJ1dHRvbjtyZXR1cm4gbnVsbD09YS53aGljaCYmcmEudGVzdChhLnR5cGUpP251bGwhPWEuY2hhckNvZGU/YS5jaGFyQ29kZTphLmtleUNvZGU6IWEud2hpY2gmJnZvaWQgMCE9PWImJnNhLnRlc3QoYS50eXBlKT8xJmI/MToyJmI/Mzo0JmI/MjowOmEud2hpY2h9fSxyLmV2ZW50LmFkZFByb3ApLHIuZWFjaCh7bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwiLHBvaW50ZXJlbnRlcjpcInBvaW50ZXJvdmVyXCIscG9pbnRlcmxlYXZlOlwicG9pbnRlcm91dFwifSxmdW5jdGlvbihhLGIpe3IuZXZlbnQuc3BlY2lhbFthXT17ZGVsZWdhdGVUeXBlOmIsYmluZFR5cGU6YixoYW5kbGU6ZnVuY3Rpb24oYSl7dmFyIGMsZD10aGlzLGU9YS5yZWxhdGVkVGFyZ2V0LGY9YS5oYW5kbGVPYmo7cmV0dXJuIGUmJihlPT09ZHx8ci5jb250YWlucyhkLGUpKXx8KGEudHlwZT1mLm9yaWdUeXBlLGM9Zi5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxhLnR5cGU9YiksY319fSksci5mbi5leHRlbmQoe29uOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB4YSh0aGlzLGEsYixjLGQpfSxvbmU6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIHhhKHRoaXMsYSxiLGMsZCwxKX0sb2ZmOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlO2lmKGEmJmEucHJldmVudERlZmF1bHQmJmEuaGFuZGxlT2JqKXJldHVybiBkPWEuaGFuZGxlT2JqLHIoYS5kZWxlZ2F0ZVRhcmdldCkub2ZmKGQubmFtZXNwYWNlP2Qub3JpZ1R5cGUrXCIuXCIrZC5uYW1lc3BhY2U6ZC5vcmlnVHlwZSxkLnNlbGVjdG9yLGQuaGFuZGxlciksdGhpcztpZihcIm9iamVjdFwiPT10eXBlb2YgYSl7Zm9yKGUgaW4gYSl0aGlzLm9mZihlLGIsYVtlXSk7cmV0dXJuIHRoaXN9cmV0dXJuIGIhPT0hMSYmXCJmdW5jdGlvblwiIT10eXBlb2YgYnx8KGM9YixiPXZvaWQgMCksYz09PSExJiYoYz12YSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ci5ldmVudC5yZW1vdmUodGhpcyxhLGMsYil9KX19KTt2YXIgeWE9LzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksemE9LzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksQWE9L2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxCYT0vXnRydWVcXC8oLiopLyxDYT0vXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7ZnVuY3Rpb24gRGEoYSxiKXtyZXR1cm4gci5ub2RlTmFtZShhLFwidGFibGVcIikmJnIubm9kZU5hbWUoMTEhPT1iLm5vZGVUeXBlP2I6Yi5maXJzdENoaWxkLFwidHJcIik/YS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdfHxhOmF9ZnVuY3Rpb24gRWEoYSl7cmV0dXJuIGEudHlwZT0obnVsbCE9PWEuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkrXCIvXCIrYS50eXBlLGF9ZnVuY3Rpb24gRmEoYSl7dmFyIGI9QmEuZXhlYyhhLnR5cGUpO3JldHVybiBiP2EudHlwZT1iWzFdOmEucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKSxhfWZ1bmN0aW9uIEdhKGEsYil7dmFyIGMsZCxlLGYsZyxoLGksajtpZigxPT09Yi5ub2RlVHlwZSl7aWYoVi5oYXNEYXRhKGEpJiYoZj1WLmFjY2VzcyhhKSxnPVYuc2V0KGIsZiksaj1mLmV2ZW50cykpe2RlbGV0ZSBnLmhhbmRsZSxnLmV2ZW50cz17fTtmb3IoZSBpbiBqKWZvcihjPTAsZD1qW2VdLmxlbmd0aDtjPGQ7YysrKXIuZXZlbnQuYWRkKGIsZSxqW2VdW2NdKX1XLmhhc0RhdGEoYSkmJihoPVcuYWNjZXNzKGEpLGk9ci5leHRlbmQoe30saCksVy5zZXQoYixpKSl9fWZ1bmN0aW9uIEhhKGEsYil7dmFyIGM9Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wiaW5wdXRcIj09PWMmJmlhLnRlc3QoYS50eXBlKT9iLmNoZWNrZWQ9YS5jaGVja2VkOlwiaW5wdXRcIiE9PWMmJlwidGV4dGFyZWFcIiE9PWN8fChiLmRlZmF1bHRWYWx1ZT1hLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gSWEoYSxiLGMsZCl7Yj1nLmFwcGx5KFtdLGIpO3ZhciBlLGYsaCxpLGosayxsPTAsbT1hLmxlbmd0aCxuPW0tMSxxPWJbMF0scz1yLmlzRnVuY3Rpb24ocSk7aWYoc3x8bT4xJiZcInN0cmluZ1wiPT10eXBlb2YgcSYmIW8uY2hlY2tDbG9uZSYmQWEudGVzdChxKSlyZXR1cm4gYS5lYWNoKGZ1bmN0aW9uKGUpe3ZhciBmPWEuZXEoZSk7cyYmKGJbMF09cS5jYWxsKHRoaXMsZSxmLmh0bWwoKSkpLElhKGYsYixjLGQpfSk7aWYobSYmKGU9cGEoYixhWzBdLm93bmVyRG9jdW1lbnQsITEsYSxkKSxmPWUuZmlyc3RDaGlsZCwxPT09ZS5jaGlsZE5vZGVzLmxlbmd0aCYmKGU9ZiksZnx8ZCkpe2ZvcihoPXIubWFwKG1hKGUsXCJzY3JpcHRcIiksRWEpLGk9aC5sZW5ndGg7bDxtO2wrKylqPWUsbCE9PW4mJihqPXIuY2xvbmUoaiwhMCwhMCksaSYmci5tZXJnZShoLG1hKGosXCJzY3JpcHRcIikpKSxjLmNhbGwoYVtsXSxqLGwpO2lmKGkpZm9yKGs9aFtoLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LHIubWFwKGgsRmEpLGw9MDtsPGk7bCsrKWo9aFtsXSxrYS50ZXN0KGoudHlwZXx8XCJcIikmJiFWLmFjY2VzcyhqLFwiZ2xvYmFsRXZhbFwiKSYmci5jb250YWlucyhrLGopJiYoai5zcmM/ci5fZXZhbFVybCYmci5fZXZhbFVybChqLnNyYyk6cChqLnRleHRDb250ZW50LnJlcGxhY2UoQ2EsXCJcIiksaykpfXJldHVybiBhfWZ1bmN0aW9uIEphKGEsYixjKXtmb3IodmFyIGQsZT1iP3IuZmlsdGVyKGIsYSk6YSxmPTA7bnVsbCE9KGQ9ZVtmXSk7ZisrKWN8fDEhPT1kLm5vZGVUeXBlfHxyLmNsZWFuRGF0YShtYShkKSksZC5wYXJlbnROb2RlJiYoYyYmci5jb250YWlucyhkLm93bmVyRG9jdW1lbnQsZCkmJm5hKG1hKGQsXCJzY3JpcHRcIikpLGQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkKSk7cmV0dXJuIGF9ci5leHRlbmQoe2h0bWxQcmVmaWx0ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSh5YSxcIjwkMT48LyQyPlwiKX0sY2xvbmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGg9YS5jbG9uZU5vZGUoITApLGk9ci5jb250YWlucyhhLm93bmVyRG9jdW1lbnQsYSk7aWYoIShvLm5vQ2xvbmVDaGVja2VkfHwxIT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlfHxyLmlzWE1MRG9jKGEpKSlmb3IoZz1tYShoKSxmPW1hKGEpLGQ9MCxlPWYubGVuZ3RoO2Q8ZTtkKyspSGEoZltkXSxnW2RdKTtpZihiKWlmKGMpZm9yKGY9Znx8bWEoYSksZz1nfHxtYShoKSxkPTAsZT1mLmxlbmd0aDtkPGU7ZCsrKUdhKGZbZF0sZ1tkXSk7ZWxzZSBHYShhLGgpO3JldHVybiBnPW1hKGgsXCJzY3JpcHRcIiksZy5sZW5ndGg+MCYmbmEoZywhaSYmbWEoYSxcInNjcmlwdFwiKSksaH0sY2xlYW5EYXRhOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYixjLGQsZT1yLmV2ZW50LnNwZWNpYWwsZj0wO3ZvaWQgMCE9PShjPWFbZl0pO2YrKylpZihUKGMpKXtpZihiPWNbVi5leHBhbmRvXSl7aWYoYi5ldmVudHMpZm9yKGQgaW4gYi5ldmVudHMpZVtkXT9yLmV2ZW50LnJlbW92ZShjLGQpOnIucmVtb3ZlRXZlbnQoYyxkLGIuaGFuZGxlKTtjW1YuZXhwYW5kb109dm9pZCAwfWNbVy5leHBhbmRvXSYmKGNbVy5leHBhbmRvXT12b2lkIDApfX19KSxyLmZuLmV4dGVuZCh7ZGV0YWNoOmZ1bmN0aW9uKGEpe3JldHVybiBKYSh0aGlzLGEsITApfSxyZW1vdmU6ZnVuY3Rpb24oYSl7cmV0dXJuIEphKHRoaXMsYSl9LHRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFModGhpcyxmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YT9yLnRleHQodGhpcyk6dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8KHRoaXMudGV4dENvbnRlbnQ9YSl9KX0sbnVsbCxhLGFyZ3VtZW50cy5sZW5ndGgpfSxhcHBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gSWEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciBiPURhKHRoaXMsYSk7Yi5hcHBlbmRDaGlsZChhKX19KX0scHJlcGVuZDpmdW5jdGlvbigpe3JldHVybiBJYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihhKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7dmFyIGI9RGEodGhpcyxhKTtiLmluc2VydEJlZm9yZShhLGIuZmlyc3RDaGlsZCl9fSl9LGJlZm9yZTpmdW5jdGlvbigpe3JldHVybiBJYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzKX0pfSxhZnRlcjpmdW5jdGlvbigpe3JldHVybiBJYSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihhKXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSx0aGlzLm5leHRTaWJsaW5nKX0pfSxlbXB0eTpmdW5jdGlvbigpe2Zvcih2YXIgYSxiPTA7bnVsbCE9KGE9dGhpc1tiXSk7YisrKTE9PT1hLm5vZGVUeXBlJiYoci5jbGVhbkRhdGEobWEoYSwhMSkpLGEudGV4dENvbnRlbnQ9XCJcIik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9bnVsbCE9YSYmYSxiPW51bGw9PWI/YTpiLHRoaXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIHIuY2xvbmUodGhpcyxhLGIpfSl9LGh0bWw6ZnVuY3Rpb24oYSl7cmV0dXJuIFModGhpcyxmdW5jdGlvbihhKXt2YXIgYj10aGlzWzBdfHx7fSxjPTAsZD10aGlzLmxlbmd0aDtpZih2b2lkIDA9PT1hJiYxPT09Yi5ub2RlVHlwZSlyZXR1cm4gYi5pbm5lckhUTUw7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEmJiF6YS50ZXN0KGEpJiYhbGFbKGphLmV4ZWMoYSl8fFtcIlwiLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpXSl7YT1yLmh0bWxQcmVmaWx0ZXIoYSk7dHJ5e2Zvcig7YzxkO2MrKyliPXRoaXNbY118fHt9LDE9PT1iLm5vZGVUeXBlJiYoci5jbGVhbkRhdGEobWEoYiwhMSkpLGIuaW5uZXJIVE1MPWEpO2I9MH1jYXRjaChlKXt9fWImJnRoaXMuZW1wdHkoKS5hcHBlbmQoYSl9LG51bGwsYSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgYT1bXTtyZXR1cm4gSWEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5wYXJlbnROb2RlO3IuaW5BcnJheSh0aGlzLGEpPDAmJihyLmNsZWFuRGF0YShtYSh0aGlzKSksYyYmYy5yZXBsYWNlQ2hpbGQoYix0aGlzKSl9LGEpfX0pLHIuZWFjaCh7YXBwZW5kVG86XCJhcHBlbmRcIixwcmVwZW5kVG86XCJwcmVwZW5kXCIsaW5zZXJ0QmVmb3JlOlwiYmVmb3JlXCIsaW5zZXJ0QWZ0ZXI6XCJhZnRlclwiLHJlcGxhY2VBbGw6XCJyZXBsYWNlV2l0aFwifSxmdW5jdGlvbihhLGIpe3IuZm5bYV09ZnVuY3Rpb24oYSl7Zm9yKHZhciBjLGQ9W10sZT1yKGEpLGY9ZS5sZW5ndGgtMSxnPTA7Zzw9ZjtnKyspYz1nPT09Zj90aGlzOnRoaXMuY2xvbmUoITApLHIoZVtnXSlbYl0oYyksaC5hcHBseShkLGMuZ2V0KCkpO3JldHVybiB0aGlzLnB1c2hTdGFjayhkKX19KTt2YXIgS2E9L15tYXJnaW4vLExhPW5ldyBSZWdFeHAoXCJeKFwiK18rXCIpKD8hcHgpW2EteiVdKyRcIixcImlcIiksTWE9ZnVuY3Rpb24oYil7dmFyIGM9Yi5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O3JldHVybiBjJiZjLm9wZW5lcnx8KGM9YSksYy5nZXRDb21wdXRlZFN0eWxlKGIpfTshZnVuY3Rpb24oKXtmdW5jdGlvbiBiKCl7aWYoaSl7aS5zdHlsZS5jc3NUZXh0PVwiYm94LXNpemluZzpib3JkZXItYm94O3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7bWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDt0b3A6MSU7d2lkdGg6NTAlXCIsaS5pbm5lckhUTUw9XCJcIixxYS5hcHBlbmRDaGlsZChoKTt2YXIgYj1hLmdldENvbXB1dGVkU3R5bGUoaSk7Yz1cIjElXCIhPT1iLnRvcCxnPVwiMnB4XCI9PT1iLm1hcmdpbkxlZnQsZT1cIjRweFwiPT09Yi53aWR0aCxpLnN0eWxlLm1hcmdpblJpZ2h0PVwiNTAlXCIsZj1cIjRweFwiPT09Yi5tYXJnaW5SaWdodCxxYS5yZW1vdmVDaGlsZChoKSxpPW51bGx9fXZhciBjLGUsZixnLGg9ZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGk9ZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2kuc3R5bGUmJihpLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiY29udGVudC1ib3hcIixpLmNsb25lTm9kZSghMCkuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJcIixvLmNsZWFyQ2xvbmVTdHlsZT1cImNvbnRlbnQtYm94XCI9PT1pLnN0eWxlLmJhY2tncm91bmRDbGlwLGguc3R5bGUuY3NzVGV4dD1cImJvcmRlcjowO3dpZHRoOjhweDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHg7cGFkZGluZzowO21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlXCIsaC5hcHBlbmRDaGlsZChpKSxyLmV4dGVuZChvLHtwaXhlbFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGIoKSxjfSxib3hTaXppbmdSZWxpYWJsZTpmdW5jdGlvbigpe3JldHVybiBiKCksZX0scGl4ZWxNYXJnaW5SaWdodDpmdW5jdGlvbigpe3JldHVybiBiKCksZn0scmVsaWFibGVNYXJnaW5MZWZ0OmZ1bmN0aW9uKCl7cmV0dXJuIGIoKSxnfX0pKX0oKTtmdW5jdGlvbiBOYShhLGIsYyl7dmFyIGQsZSxmLGcsaD1hLnN0eWxlO3JldHVybiBjPWN8fE1hKGEpLGMmJihnPWMuZ2V0UHJvcGVydHlWYWx1ZShiKXx8Y1tiXSxcIlwiIT09Z3x8ci5jb250YWlucyhhLm93bmVyRG9jdW1lbnQsYSl8fChnPXIuc3R5bGUoYSxiKSksIW8ucGl4ZWxNYXJnaW5SaWdodCgpJiZMYS50ZXN0KGcpJiZLYS50ZXN0KGIpJiYoZD1oLndpZHRoLGU9aC5taW5XaWR0aCxmPWgubWF4V2lkdGgsaC5taW5XaWR0aD1oLm1heFdpZHRoPWgud2lkdGg9ZyxnPWMud2lkdGgsaC53aWR0aD1kLGgubWluV2lkdGg9ZSxoLm1heFdpZHRoPWYpKSx2b2lkIDAhPT1nP2crXCJcIjpnfWZ1bmN0aW9uIE9hKGEsYil7cmV0dXJue2dldDpmdW5jdGlvbigpe3JldHVybiBhKCk/dm9pZCBkZWxldGUgdGhpcy5nZXQ6KHRoaXMuZ2V0PWIpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19fXZhciBQYT0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sUWE9e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix2aXNpYmlsaXR5OlwiaGlkZGVuXCIsZGlzcGxheTpcImJsb2NrXCJ9LFJhPXtsZXR0ZXJTcGFjaW5nOlwiMFwiLGZvbnRXZWlnaHQ6XCI0MDBcIn0sU2E9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLFRhPWQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZTtmdW5jdGlvbiBVYShhKXtpZihhIGluIFRhKXJldHVybiBhO3ZhciBiPWFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpLGM9U2EubGVuZ3RoO3doaWxlKGMtLSlpZihhPVNhW2NdK2IsYSBpbiBUYSlyZXR1cm4gYX1mdW5jdGlvbiBWYShhLGIsYyl7dmFyIGQ9YWEuZXhlYyhiKTtyZXR1cm4gZD9NYXRoLm1heCgwLGRbMl0tKGN8fDApKSsoZFszXXx8XCJweFwiKTpifWZ1bmN0aW9uIFdhKGEsYixjLGQsZSl7dmFyIGYsZz0wO2ZvcihmPWM9PT0oZD9cImJvcmRlclwiOlwiY29udGVudFwiKT80Olwid2lkdGhcIj09PWI/MTowO2Y8NDtmKz0yKVwibWFyZ2luXCI9PT1jJiYoZys9ci5jc3MoYSxjK2JhW2ZdLCEwLGUpKSxkPyhcImNvbnRlbnRcIj09PWMmJihnLT1yLmNzcyhhLFwicGFkZGluZ1wiK2JhW2ZdLCEwLGUpKSxcIm1hcmdpblwiIT09YyYmKGctPXIuY3NzKGEsXCJib3JkZXJcIitiYVtmXStcIldpZHRoXCIsITAsZSkpKTooZys9ci5jc3MoYSxcInBhZGRpbmdcIitiYVtmXSwhMCxlKSxcInBhZGRpbmdcIiE9PWMmJihnKz1yLmNzcyhhLFwiYm9yZGVyXCIrYmFbZl0rXCJXaWR0aFwiLCEwLGUpKSk7cmV0dXJuIGd9ZnVuY3Rpb24gWGEoYSxiLGMpe3ZhciBkLGU9ITAsZj1NYShhKSxnPVwiYm9yZGVyLWJveFwiPT09ci5jc3MoYSxcImJveFNpemluZ1wiLCExLGYpO2lmKGEuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJihkPWEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbYl0pLGQ8PTB8fG51bGw9PWQpe2lmKGQ9TmEoYSxiLGYpLChkPDB8fG51bGw9PWQpJiYoZD1hLnN0eWxlW2JdKSxMYS50ZXN0KGQpKXJldHVybiBkO2U9ZyYmKG8uYm94U2l6aW5nUmVsaWFibGUoKXx8ZD09PWEuc3R5bGVbYl0pLGQ9cGFyc2VGbG9hdChkKXx8MH1yZXR1cm4gZCtXYShhLGIsY3x8KGc/XCJib3JkZXJcIjpcImNvbnRlbnRcIiksZSxmKStcInB4XCJ9ci5leHRlbmQoe2Nzc0hvb2tzOntvcGFjaXR5OntnZXQ6ZnVuY3Rpb24oYSxiKXtpZihiKXt2YXIgYz1OYShhLFwib3BhY2l0eVwiKTtyZXR1cm5cIlwiPT09Yz9cIjFcIjpjfX19fSxjc3NOdW1iZXI6e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGNvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZsZXhHcm93OiEwLGZsZXhTaHJpbms6ITAsZm9udFdlaWdodDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITB9LGNzc1Byb3BzOntcImZsb2F0XCI6XCJjc3NGbG9hdFwifSxzdHlsZTpmdW5jdGlvbihhLGIsYyxkKXtpZihhJiYzIT09YS5ub2RlVHlwZSYmOCE9PWEubm9kZVR5cGUmJmEuc3R5bGUpe3ZhciBlLGYsZyxoPXIuY2FtZWxDYXNlKGIpLGk9YS5zdHlsZTtyZXR1cm4gYj1yLmNzc1Byb3BzW2hdfHwoci5jc3NQcm9wc1toXT1VYShoKXx8aCksZz1yLmNzc0hvb2tzW2JdfHxyLmNzc0hvb2tzW2hdLHZvaWQgMD09PWM/ZyYmXCJnZXRcImluIGcmJnZvaWQgMCE9PShlPWcuZ2V0KGEsITEsZCkpP2U6aVtiXTooZj10eXBlb2YgYyxcInN0cmluZ1wiPT09ZiYmKGU9YWEuZXhlYyhjKSkmJmVbMV0mJihjPWVhKGEsYixlKSxmPVwibnVtYmVyXCIpLG51bGwhPWMmJmM9PT1jJiYoXCJudW1iZXJcIj09PWYmJihjKz1lJiZlWzNdfHwoci5jc3NOdW1iZXJbaF0/XCJcIjpcInB4XCIpKSxvLmNsZWFyQ2xvbmVTdHlsZXx8XCJcIiE9PWN8fDAhPT1iLmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpfHwoaVtiXT1cImluaGVyaXRcIiksZyYmXCJzZXRcImluIGcmJnZvaWQgMD09PShjPWcuc2V0KGEsYyxkKSl8fChpW2JdPWMpKSx2b2lkIDApfX0sY3NzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlLGYsZyxoPXIuY2FtZWxDYXNlKGIpO3JldHVybiBiPXIuY3NzUHJvcHNbaF18fChyLmNzc1Byb3BzW2hdPVVhKGgpfHxoKSxnPXIuY3NzSG9va3NbYl18fHIuY3NzSG9va3NbaF0sZyYmXCJnZXRcImluIGcmJihlPWcuZ2V0KGEsITAsYykpLHZvaWQgMD09PWUmJihlPU5hKGEsYixkKSksXCJub3JtYWxcIj09PWUmJmIgaW4gUmEmJihlPVJhW2JdKSxcIlwiPT09Y3x8Yz8oZj1wYXJzZUZsb2F0KGUpLGM9PT0hMHx8aXNGaW5pdGUoZik/Znx8MDplKTplfX0pLHIuZWFjaChbXCJoZWlnaHRcIixcIndpZHRoXCJdLGZ1bmN0aW9uKGEsYil7ci5jc3NIb29rc1tiXT17Z2V0OmZ1bmN0aW9uKGEsYyxkKXtpZihjKXJldHVybiFQYS50ZXN0KHIuY3NzKGEsXCJkaXNwbGF5XCIpKXx8YS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCYmYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aD9YYShhLGIsZCk6ZGEoYSxRYSxmdW5jdGlvbigpe3JldHVybiBYYShhLGIsZCl9KX0sc2V0OmZ1bmN0aW9uKGEsYyxkKXt2YXIgZSxmPWQmJk1hKGEpLGc9ZCYmV2EoYSxiLGQsXCJib3JkZXItYm94XCI9PT1yLmNzcyhhLFwiYm94U2l6aW5nXCIsITEsZiksZik7cmV0dXJuIGcmJihlPWFhLmV4ZWMoYykpJiZcInB4XCIhPT0oZVszXXx8XCJweFwiKSYmKGEuc3R5bGVbYl09YyxjPXIuY3NzKGEsYikpLFZhKGEsYyxnKX19fSksci5jc3NIb29rcy5tYXJnaW5MZWZ0PU9hKG8ucmVsaWFibGVNYXJnaW5MZWZ0LGZ1bmN0aW9uKGEsYil7aWYoYilyZXR1cm4ocGFyc2VGbG9hdChOYShhLFwibWFyZ2luTGVmdFwiKSl8fGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdC1kYShhLHttYXJnaW5MZWZ0OjB9LGZ1bmN0aW9uKCl7cmV0dXJuIGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdH0pKStcInB4XCJ9KSxyLmVhY2goe21hcmdpbjpcIlwiLHBhZGRpbmc6XCJcIixib3JkZXI6XCJXaWR0aFwifSxmdW5jdGlvbihhLGIpe3IuY3NzSG9va3NbYStiXT17ZXhwYW5kOmZ1bmN0aW9uKGMpe2Zvcih2YXIgZD0wLGU9e30sZj1cInN0cmluZ1wiPT10eXBlb2YgYz9jLnNwbGl0KFwiIFwiKTpbY107ZDw0O2QrKyllW2ErYmFbZF0rYl09ZltkXXx8ZltkLTJdfHxmWzBdO3JldHVybiBlfX0sS2EudGVzdChhKXx8KHIuY3NzSG9va3NbYStiXS5zZXQ9VmEpfSksci5mbi5leHRlbmQoe2NzczpmdW5jdGlvbihhLGIpe3JldHVybiBTKHRoaXMsZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj17fSxnPTA7aWYoci5pc0FycmF5KGIpKXtmb3IoZD1NYShhKSxlPWIubGVuZ3RoO2c8ZTtnKyspZltiW2ddXT1yLmNzcyhhLGJbZ10sITEsZCk7cmV0dXJuIGZ9cmV0dXJuIHZvaWQgMCE9PWM/ci5zdHlsZShhLGIsYyk6ci5jc3MoYSxiKX0sYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9fSk7ZnVuY3Rpb24gWWEoYSxiLGMsZCxlKXtyZXR1cm4gbmV3IFlhLnByb3RvdHlwZS5pbml0KGEsYixjLGQsZSl9ci5Ud2Vlbj1ZYSxZYS5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOllhLGluaXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuZWxlbT1hLHRoaXMucHJvcD1jLHRoaXMuZWFzaW5nPWV8fHIuZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz1iLHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1kLHRoaXMudW5pdD1mfHwoci5jc3NOdW1iZXJbY10/XCJcIjpcInB4XCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgYT1ZYS5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gYSYmYS5nZXQ/YS5nZXQodGhpcyk6WWEucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGEpe3ZhciBiLGM9WWEucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz1iPXIuZWFzaW5nW3RoaXMuZWFzaW5nXShhLHRoaXMub3B0aW9ucy5kdXJhdGlvbiphLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOnRoaXMucG9zPWI9YSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqYit0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxjJiZjLnNldD9jLnNldCh0aGlzKTpZYS5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSxZYS5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGU9WWEucHJvdG90eXBlLFlhLnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm4gMSE9PWEuZWxlbS5ub2RlVHlwZXx8bnVsbCE9YS5lbGVtW2EucHJvcF0mJm51bGw9PWEuZWxlbS5zdHlsZVthLnByb3BdP2EuZWxlbVthLnByb3BdOihiPXIuY3NzKGEuZWxlbSxhLnByb3AsXCJcIiksYiYmXCJhdXRvXCIhPT1iP2I6MCl9LHNldDpmdW5jdGlvbihhKXtyLmZ4LnN0ZXBbYS5wcm9wXT9yLmZ4LnN0ZXBbYS5wcm9wXShhKToxIT09YS5lbGVtLm5vZGVUeXBlfHxudWxsPT1hLmVsZW0uc3R5bGVbci5jc3NQcm9wc1thLnByb3BdXSYmIXIuY3NzSG9va3NbYS5wcm9wXT9hLmVsZW1bYS5wcm9wXT1hLm5vdzpyLnN0eWxlKGEuZWxlbSxhLnByb3AsYS5ub3crYS51bml0KX19fSxZYS5wcm9wSG9va3Muc2Nyb2xsVG9wPVlhLnByb3BIb29rcy5zY3JvbGxMZWZ0PXtzZXQ6ZnVuY3Rpb24oYSl7YS5lbGVtLm5vZGVUeXBlJiZhLmVsZW0ucGFyZW50Tm9kZSYmKGEuZWxlbVthLnByb3BdPWEubm93KX19LHIuZWFzaW5nPXtsaW5lYXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHN3aW5nOmZ1bmN0aW9uKGEpe3JldHVybi41LU1hdGguY29zKGEqTWF0aC5QSSkvMn0sX2RlZmF1bHQ6XCJzd2luZ1wifSxyLmZ4PVlhLnByb3RvdHlwZS5pbml0LHIuZnguc3RlcD17fTt2YXIgWmEsJGEsX2E9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLGFiPS9xdWV1ZUhvb2tzJC87ZnVuY3Rpb24gYmIoKXskYSYmKGEucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGJiKSxyLmZ4LnRpY2soKSl9ZnVuY3Rpb24gY2IoKXtyZXR1cm4gYS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7WmE9dm9pZCAwfSksWmE9ci5ub3coKX1mdW5jdGlvbiBkYihhLGIpe3ZhciBjLGQ9MCxlPXtoZWlnaHQ6YX07Zm9yKGI9Yj8xOjA7ZDw0O2QrPTItYiljPWJhW2RdLGVbXCJtYXJnaW5cIitjXT1lW1wicGFkZGluZ1wiK2NdPWE7cmV0dXJuIGImJihlLm9wYWNpdHk9ZS53aWR0aD1hKSxlfWZ1bmN0aW9uIGViKGEsYixjKXtmb3IodmFyIGQsZT0oaGIudHdlZW5lcnNbYl18fFtdKS5jb25jYXQoaGIudHdlZW5lcnNbXCIqXCJdKSxmPTAsZz1lLmxlbmd0aDtmPGc7ZisrKWlmKGQ9ZVtmXS5jYWxsKGMsYixhKSlyZXR1cm4gZH1mdW5jdGlvbiBmYihhLGIsYyl7dmFyIGQsZSxmLGcsaCxpLGosayxsPVwid2lkdGhcImluIGJ8fFwiaGVpZ2h0XCJpbiBiLG09dGhpcyxuPXt9LG89YS5zdHlsZSxwPWEubm9kZVR5cGUmJmNhKGEpLHE9Vi5nZXQoYSxcImZ4c2hvd1wiKTtjLnF1ZXVlfHwoZz1yLl9xdWV1ZUhvb2tzKGEsXCJmeFwiKSxudWxsPT1nLnVucXVldWVkJiYoZy51bnF1ZXVlZD0wLGg9Zy5lbXB0eS5maXJlLGcuZW1wdHkuZmlyZT1mdW5jdGlvbigpe2cudW5xdWV1ZWR8fGgoKX0pLGcudW5xdWV1ZWQrKyxtLmFsd2F5cyhmdW5jdGlvbigpe20uYWx3YXlzKGZ1bmN0aW9uKCl7Zy51bnF1ZXVlZC0tLHIucXVldWUoYSxcImZ4XCIpLmxlbmd0aHx8Zy5lbXB0eS5maXJlKCl9KX0pKTtmb3IoZCBpbiBiKWlmKGU9YltkXSxfYS50ZXN0KGUpKXtpZihkZWxldGUgYltkXSxmPWZ8fFwidG9nZ2xlXCI9PT1lLGU9PT0ocD9cImhpZGVcIjpcInNob3dcIikpe2lmKFwic2hvd1wiIT09ZXx8IXF8fHZvaWQgMD09PXFbZF0pY29udGludWU7cD0hMH1uW2RdPXEmJnFbZF18fHIuc3R5bGUoYSxkKX1pZihpPSFyLmlzRW1wdHlPYmplY3QoYiksaXx8IXIuaXNFbXB0eU9iamVjdChuKSl7bCYmMT09PWEubm9kZVR5cGUmJihjLm92ZXJmbG93PVtvLm92ZXJmbG93LG8ub3ZlcmZsb3dYLG8ub3ZlcmZsb3dZXSxqPXEmJnEuZGlzcGxheSxudWxsPT1qJiYoaj1WLmdldChhLFwiZGlzcGxheVwiKSksaz1yLmNzcyhhLFwiZGlzcGxheVwiKSxcIm5vbmVcIj09PWsmJihqP2s9ajooaGEoW2FdLCEwKSxqPWEuc3R5bGUuZGlzcGxheXx8aixrPXIuY3NzKGEsXCJkaXNwbGF5XCIpLGhhKFthXSkpKSwoXCJpbmxpbmVcIj09PWt8fFwiaW5saW5lLWJsb2NrXCI9PT1rJiZudWxsIT1qKSYmXCJub25lXCI9PT1yLmNzcyhhLFwiZmxvYXRcIikmJihpfHwobS5kb25lKGZ1bmN0aW9uKCl7by5kaXNwbGF5PWp9KSxudWxsPT1qJiYoaz1vLmRpc3BsYXksaj1cIm5vbmVcIj09PWs/XCJcIjprKSksby5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxjLm92ZXJmbG93JiYoby5vdmVyZmxvdz1cImhpZGRlblwiLG0uYWx3YXlzKGZ1bmN0aW9uKCl7by5vdmVyZmxvdz1jLm92ZXJmbG93WzBdLG8ub3ZlcmZsb3dYPWMub3ZlcmZsb3dbMV0sby5vdmVyZmxvd1k9Yy5vdmVyZmxvd1syXX0pKSxpPSExO2ZvcihkIGluIG4paXx8KHE/XCJoaWRkZW5cImluIHEmJihwPXEuaGlkZGVuKTpxPVYuYWNjZXNzKGEsXCJmeHNob3dcIix7ZGlzcGxheTpqfSksZiYmKHEuaGlkZGVuPSFwKSxwJiZoYShbYV0sITApLG0uZG9uZShmdW5jdGlvbigpe3B8fGhhKFthXSksVi5yZW1vdmUoYSxcImZ4c2hvd1wiKTtmb3IoZCBpbiBuKXIuc3R5bGUoYSxkLG5bZF0pfSkpLGk9ZWIocD9xW2RdOjAsZCxtKSxkIGluIHF8fChxW2RdPWkuc3RhcnQscCYmKGkuZW5kPWkuc3RhcnQsaS5zdGFydD0wKSl9fWZ1bmN0aW9uIGdiKGEsYil7dmFyIGMsZCxlLGYsZztmb3IoYyBpbiBhKWlmKGQ9ci5jYW1lbENhc2UoYyksZT1iW2RdLGY9YVtjXSxyLmlzQXJyYXkoZikmJihlPWZbMV0sZj1hW2NdPWZbMF0pLGMhPT1kJiYoYVtkXT1mLGRlbGV0ZSBhW2NdKSxnPXIuY3NzSG9va3NbZF0sZyYmXCJleHBhbmRcImluIGcpe2Y9Zy5leHBhbmQoZiksZGVsZXRlIGFbZF07Zm9yKGMgaW4gZiljIGluIGF8fChhW2NdPWZbY10sYltjXT1lKX1lbHNlIGJbZF09ZX1mdW5jdGlvbiBoYihhLGIsYyl7dmFyIGQsZSxmPTAsZz1oYi5wcmVmaWx0ZXJzLmxlbmd0aCxoPXIuRGVmZXJyZWQoKS5hbHdheXMoZnVuY3Rpb24oKXtkZWxldGUgaS5lbGVtfSksaT1mdW5jdGlvbigpe2lmKGUpcmV0dXJuITE7Zm9yKHZhciBiPVphfHxjYigpLGM9TWF0aC5tYXgoMCxqLnN0YXJ0VGltZStqLmR1cmF0aW9uLWIpLGQ9Yy9qLmR1cmF0aW9ufHwwLGY9MS1kLGc9MCxpPWoudHdlZW5zLmxlbmd0aDtnPGk7ZysrKWoudHdlZW5zW2ddLnJ1bihmKTtyZXR1cm4gaC5ub3RpZnlXaXRoKGEsW2osZixjXSksZjwxJiZpP2M6KGgucmVzb2x2ZVdpdGgoYSxbal0pLCExKX0saj1oLnByb21pc2Uoe2VsZW06YSxwcm9wczpyLmV4dGVuZCh7fSxiKSxvcHRzOnIuZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9LGVhc2luZzpyLmVhc2luZy5fZGVmYXVsdH0sYyksb3JpZ2luYWxQcm9wZXJ0aWVzOmIsb3JpZ2luYWxPcHRpb25zOmMsc3RhcnRUaW1lOlphfHxjYigpLGR1cmF0aW9uOmMuZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9ci5Ud2VlbihhLGoub3B0cyxiLGMsai5vcHRzLnNwZWNpYWxFYXNpbmdbYl18fGoub3B0cy5lYXNpbmcpO3JldHVybiBqLnR3ZWVucy5wdXNoKGQpLGR9LHN0b3A6ZnVuY3Rpb24oYil7dmFyIGM9MCxkPWI/ai50d2VlbnMubGVuZ3RoOjA7aWYoZSlyZXR1cm4gdGhpcztmb3IoZT0hMDtjPGQ7YysrKWoudHdlZW5zW2NdLnJ1bigxKTtyZXR1cm4gYj8oaC5ub3RpZnlXaXRoKGEsW2osMSwwXSksaC5yZXNvbHZlV2l0aChhLFtqLGJdKSk6aC5yZWplY3RXaXRoKGEsW2osYl0pLHRoaXN9fSksaz1qLnByb3BzO2ZvcihnYihrLGoub3B0cy5zcGVjaWFsRWFzaW5nKTtmPGc7ZisrKWlmKGQ9aGIucHJlZmlsdGVyc1tmXS5jYWxsKGosYSxrLGoub3B0cykpcmV0dXJuIHIuaXNGdW5jdGlvbihkLnN0b3ApJiYoci5fcXVldWVIb29rcyhqLmVsZW0sai5vcHRzLnF1ZXVlKS5zdG9wPXIucHJveHkoZC5zdG9wLGQpKSxkO3JldHVybiByLm1hcChrLGViLGopLHIuaXNGdW5jdGlvbihqLm9wdHMuc3RhcnQpJiZqLm9wdHMuc3RhcnQuY2FsbChhLGopLHIuZngudGltZXIoci5leHRlbmQoaSx7ZWxlbTphLGFuaW06aixxdWV1ZTpqLm9wdHMucXVldWV9KSksai5wcm9ncmVzcyhqLm9wdHMucHJvZ3Jlc3MpLmRvbmUoai5vcHRzLmRvbmUsai5vcHRzLmNvbXBsZXRlKS5mYWlsKGoub3B0cy5mYWlsKS5hbHdheXMoai5vcHRzLmFsd2F5cyl9ci5BbmltYXRpb249ci5leHRlbmQoaGIse3R3ZWVuZXJzOntcIipcIjpbZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmNyZWF0ZVR3ZWVuKGEsYik7cmV0dXJuIGVhKGMuZWxlbSxhLGFhLmV4ZWMoYiksYyksY31dfSx0d2VlbmVyOmZ1bmN0aW9uKGEsYil7ci5pc0Z1bmN0aW9uKGEpPyhiPWEsYT1bXCIqXCJdKTphPWEubWF0Y2goSyk7Zm9yKHZhciBjLGQ9MCxlPWEubGVuZ3RoO2Q8ZTtkKyspYz1hW2RdLGhiLnR3ZWVuZXJzW2NdPWhiLnR3ZWVuZXJzW2NdfHxbXSxoYi50d2VlbmVyc1tjXS51bnNoaWZ0KGIpfSxwcmVmaWx0ZXJzOltmYl0scHJlZmlsdGVyOmZ1bmN0aW9uKGEsYil7Yj9oYi5wcmVmaWx0ZXJzLnVuc2hpZnQoYSk6aGIucHJlZmlsdGVycy5wdXNoKGEpfX0pLHIuc3BlZWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBlPWEmJlwib2JqZWN0XCI9PXR5cGVvZiBhP3IuZXh0ZW5kKHt9LGEpOntjb21wbGV0ZTpjfHwhYyYmYnx8ci5pc0Z1bmN0aW9uKGEpJiZhLGR1cmF0aW9uOmEsZWFzaW5nOmMmJmJ8fGImJiFyLmlzRnVuY3Rpb24oYikmJmJ9O3JldHVybiByLmZ4Lm9mZnx8ZC5oaWRkZW4/ZS5kdXJhdGlvbj0wOlwibnVtYmVyXCIhPXR5cGVvZiBlLmR1cmF0aW9uJiYoZS5kdXJhdGlvbiBpbiByLmZ4LnNwZWVkcz9lLmR1cmF0aW9uPXIuZnguc3BlZWRzW2UuZHVyYXRpb25dOmUuZHVyYXRpb249ci5meC5zcGVlZHMuX2RlZmF1bHQpLG51bGwhPWUucXVldWUmJmUucXVldWUhPT0hMHx8KGUucXVldWU9XCJmeFwiKSxlLm9sZD1lLmNvbXBsZXRlLGUuY29tcGxldGU9ZnVuY3Rpb24oKXtyLmlzRnVuY3Rpb24oZS5vbGQpJiZlLm9sZC5jYWxsKHRoaXMpLGUucXVldWUmJnIuZGVxdWV1ZSh0aGlzLGUucXVldWUpfSxlfSxyLmZuLmV4dGVuZCh7ZmFkZVRvOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB0aGlzLmZpbHRlcihjYSkuY3NzKFwib3BhY2l0eVwiLDApLnNob3coKS5lbmQoKS5hbmltYXRlKHtvcGFjaXR5OmJ9LGEsYyxkKX0sYW5pbWF0ZTpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1yLmlzRW1wdHlPYmplY3QoYSksZj1yLnNwZWVkKGIsYyxkKSxnPWZ1bmN0aW9uKCl7dmFyIGI9aGIodGhpcyxyLmV4dGVuZCh7fSxhKSxmKTsoZXx8Vi5nZXQodGhpcyxcImZpbmlzaFwiKSkmJmIuc3RvcCghMCl9O3JldHVybiBnLmZpbmlzaD1nLGV8fGYucXVldWU9PT0hMT90aGlzLmVhY2goZyk6dGhpcy5xdWV1ZShmLnF1ZXVlLGcpfSxzdG9wOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1mdW5jdGlvbihhKXt2YXIgYj1hLnN0b3A7ZGVsZXRlIGEuc3RvcCxiKGMpfTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgYSYmKGM9YixiPWEsYT12b2lkIDApLGImJmEhPT0hMSYmdGhpcy5xdWV1ZShhfHxcImZ4XCIsW10pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBiPSEwLGU9bnVsbCE9YSYmYStcInF1ZXVlSG9va3NcIixmPXIudGltZXJzLGc9Vi5nZXQodGhpcyk7aWYoZSlnW2VdJiZnW2VdLnN0b3AmJmQoZ1tlXSk7ZWxzZSBmb3IoZSBpbiBnKWdbZV0mJmdbZV0uc3RvcCYmYWIudGVzdChlKSYmZChnW2VdKTtmb3IoZT1mLmxlbmd0aDtlLS07KWZbZV0uZWxlbSE9PXRoaXN8fG51bGwhPWEmJmZbZV0ucXVldWUhPT1hfHwoZltlXS5hbmltLnN0b3AoYyksYj0hMSxmLnNwbGljZShlLDEpKTshYiYmY3x8ci5kZXF1ZXVlKHRoaXMsYSl9KX0sZmluaXNoOmZ1bmN0aW9uKGEpe3JldHVybiBhIT09ITEmJihhPWF8fFwiZnhcIiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGIsYz1WLmdldCh0aGlzKSxkPWNbYStcInF1ZXVlXCJdLGU9Y1thK1wicXVldWVIb29rc1wiXSxmPXIudGltZXJzLGc9ZD9kLmxlbmd0aDowO2ZvcihjLmZpbmlzaD0hMCxyLnF1ZXVlKHRoaXMsYSxbXSksZSYmZS5zdG9wJiZlLnN0b3AuY2FsbCh0aGlzLCEwKSxiPWYubGVuZ3RoO2ItLTspZltiXS5lbGVtPT09dGhpcyYmZltiXS5xdWV1ZT09PWEmJihmW2JdLmFuaW0uc3RvcCghMCksZi5zcGxpY2UoYiwxKSk7Zm9yKGI9MDtiPGc7YisrKWRbYl0mJmRbYl0uZmluaXNoJiZkW2JdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSBjLmZpbmlzaH0pfX0pLHIuZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oYSxiKXt2YXIgYz1yLmZuW2JdO3IuZm5bYl09ZnVuY3Rpb24oYSxkLGUpe3JldHVybiBudWxsPT1hfHxcImJvb2xlYW5cIj09dHlwZW9mIGE/Yy5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGRiKGIsITApLGEsZCxlKX19KSxyLmVhY2goe3NsaWRlRG93bjpkYihcInNob3dcIiksc2xpZGVVcDpkYihcImhpZGVcIiksc2xpZGVUb2dnbGU6ZGIoXCJ0b2dnbGVcIiksZmFkZUluOntvcGFjaXR5Olwic2hvd1wifSxmYWRlT3V0OntvcGFjaXR5OlwiaGlkZVwifSxmYWRlVG9nZ2xlOntvcGFjaXR5OlwidG9nZ2xlXCJ9fSxmdW5jdGlvbihhLGIpe3IuZm5bYV09ZnVuY3Rpb24oYSxjLGQpe3JldHVybiB0aGlzLmFuaW1hdGUoYixhLGMsZCl9fSksci50aW1lcnM9W10sci5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGEsYj0wLGM9ci50aW1lcnM7Zm9yKFphPXIubm93KCk7YjxjLmxlbmd0aDtiKyspYT1jW2JdLGEoKXx8Y1tiXSE9PWF8fGMuc3BsaWNlKGItLSwxKTtjLmxlbmd0aHx8ci5meC5zdG9wKCksWmE9dm9pZCAwfSxyLmZ4LnRpbWVyPWZ1bmN0aW9uKGEpe3IudGltZXJzLnB1c2goYSksYSgpP3IuZnguc3RhcnQoKTpyLnRpbWVycy5wb3AoKX0sci5meC5pbnRlcnZhbD0xMyxyLmZ4LnN0YXJ0PWZ1bmN0aW9uKCl7JGF8fCgkYT1hLnJlcXVlc3RBbmltYXRpb25GcmFtZT9hLnJlcXVlc3RBbmltYXRpb25GcmFtZShiYik6YS5zZXRJbnRlcnZhbChyLmZ4LnRpY2ssci5meC5pbnRlcnZhbCkpfSxyLmZ4LnN0b3A9ZnVuY3Rpb24oKXthLmNhbmNlbEFuaW1hdGlvbkZyYW1lP2EuY2FuY2VsQW5pbWF0aW9uRnJhbWUoJGEpOmEuY2xlYXJJbnRlcnZhbCgkYSksJGE9bnVsbH0sci5meC5zcGVlZHM9e3Nsb3c6NjAwLGZhc3Q6MjAwLF9kZWZhdWx0OjQwMH0sci5mbi5kZWxheT1mdW5jdGlvbihiLGMpe3JldHVybiBiPXIuZng/ci5meC5zcGVlZHNbYl18fGI6YixjPWN8fFwiZnhcIix0aGlzLnF1ZXVlKGMsZnVuY3Rpb24oYyxkKXt2YXIgZT1hLnNldFRpbWVvdXQoYyxiKTtkLnN0b3A9ZnVuY3Rpb24oKXthLmNsZWFyVGltZW91dChlKX19KX0sZnVuY3Rpb24oKXt2YXIgYT1kLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxiPWQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKSxjPWIuYXBwZW5kQ2hpbGQoZC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKTthLnR5cGU9XCJjaGVja2JveFwiLG8uY2hlY2tPbj1cIlwiIT09YS52YWx1ZSxvLm9wdFNlbGVjdGVkPWMuc2VsZWN0ZWQsYT1kLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxhLnZhbHVlPVwidFwiLGEudHlwZT1cInJhZGlvXCIsby5yYWRpb1ZhbHVlPVwidFwiPT09YS52YWx1ZX0oKTt2YXIgaWIsamI9ci5leHByLmF0dHJIYW5kbGU7ci5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUyh0aGlzLHIuYXR0cixhLGIsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ci5yZW1vdmVBdHRyKHRoaXMsYSl9KX19KSxyLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPWEubm9kZVR5cGU7aWYoMyE9PWYmJjghPT1mJiYyIT09ZilyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgYS5nZXRBdHRyaWJ1dGU/ci5wcm9wKGEsYixjKTooMT09PWYmJnIuaXNYTUxEb2MoYSl8fChlPXIuYXR0ckhvb2tzW2IudG9Mb3dlckNhc2UoKV18fChyLmV4cHIubWF0Y2guYm9vbC50ZXN0KGIpP2liOnZvaWQgMCkpLFxudm9pZCAwIT09Yz9udWxsPT09Yz92b2lkIHIucmVtb3ZlQXR0cihhLGIpOmUmJlwic2V0XCJpbiBlJiZ2b2lkIDAhPT0oZD1lLnNldChhLGMsYikpP2Q6KGEuc2V0QXR0cmlidXRlKGIsYytcIlwiKSxjKTplJiZcImdldFwiaW4gZSYmbnVsbCE9PShkPWUuZ2V0KGEsYikpP2Q6KGQ9ci5maW5kLmF0dHIoYSxiKSxudWxsPT1kP3ZvaWQgMDpkKSl9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGEsYil7aWYoIW8ucmFkaW9WYWx1ZSYmXCJyYWRpb1wiPT09YiYmci5ub2RlTmFtZShhLFwiaW5wdXRcIikpe3ZhciBjPWEudmFsdWU7cmV0dXJuIGEuc2V0QXR0cmlidXRlKFwidHlwZVwiLGIpLGMmJihhLnZhbHVlPWMpLGJ9fX19LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPTAsZT1iJiZiLm1hdGNoKEspO2lmKGUmJjE9PT1hLm5vZGVUeXBlKXdoaWxlKGM9ZVtkKytdKWEucmVtb3ZlQXR0cmlidXRlKGMpfX0pLGliPXtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBiPT09ITE/ci5yZW1vdmVBdHRyKGEsYyk6YS5zZXRBdHRyaWJ1dGUoYyxjKSxjfX0sci5lYWNoKHIuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXFx3Ky9nKSxmdW5jdGlvbihhLGIpe3ZhciBjPWpiW2JdfHxyLmZpbmQuYXR0cjtqYltiXT1mdW5jdGlvbihhLGIsZCl7dmFyIGUsZixnPWIudG9Mb3dlckNhc2UoKTtyZXR1cm4gZHx8KGY9amJbZ10samJbZ109ZSxlPW51bGwhPWMoYSxiLGQpP2c6bnVsbCxqYltnXT1mKSxlfX0pO3ZhciBrYj0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLGxiPS9eKD86YXxhcmVhKSQvaTtyLmZuLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihhLGIpe3JldHVybiBTKHRoaXMsci5wcm9wLGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfSxyZW1vdmVQcm9wOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtkZWxldGUgdGhpc1tyLnByb3BGaXhbYV18fGFdfSl9fSksci5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKDMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuIDE9PT1mJiZyLmlzWE1MRG9jKGEpfHwoYj1yLnByb3BGaXhbYl18fGIsZT1yLnByb3BIb29rc1tiXSksdm9pZCAwIT09Yz9lJiZcInNldFwiaW4gZSYmdm9pZCAwIT09KGQ9ZS5zZXQoYSxjLGIpKT9kOmFbYl09YzplJiZcImdldFwiaW4gZSYmbnVsbCE9PShkPWUuZ2V0KGEsYikpP2Q6YVtiXX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXIuZmluZC5hdHRyKGEsXCJ0YWJpbmRleFwiKTtyZXR1cm4gYj9wYXJzZUludChiLDEwKTprYi50ZXN0KGEubm9kZU5hbWUpfHxsYi50ZXN0KGEubm9kZU5hbWUpJiZhLmhyZWY/MDotMX19fSxwcm9wRml4OntcImZvclwiOlwiaHRtbEZvclwiLFwiY2xhc3NcIjpcImNsYXNzTmFtZVwifX0pLG8ub3B0U2VsZWN0ZWR8fChyLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPWEucGFyZW50Tm9kZTtyZXR1cm4gYiYmYi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxudWxsfSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO2ImJihiLnNlbGVjdGVkSW5kZXgsYi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksci5lYWNoKFtcInRhYkluZGV4XCIsXCJyZWFkT25seVwiLFwibWF4TGVuZ3RoXCIsXCJjZWxsU3BhY2luZ1wiLFwiY2VsbFBhZGRpbmdcIixcInJvd1NwYW5cIixcImNvbFNwYW5cIixcInVzZU1hcFwiLFwiZnJhbWVCb3JkZXJcIixcImNvbnRlbnRFZGl0YWJsZVwiXSxmdW5jdGlvbigpe3IucHJvcEZpeFt0aGlzLnRvTG93ZXJDYXNlKCldPXRoaXN9KTtmdW5jdGlvbiBtYihhKXt2YXIgYj1hLm1hdGNoKEspfHxbXTtyZXR1cm4gYi5qb2luKFwiIFwiKX1mdW5jdGlvbiBuYihhKXtyZXR1cm4gYS5nZXRBdHRyaWJ1dGUmJmEuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCJ9ci5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoLGk9MDtpZihyLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXtyKHRoaXMpLmFkZENsYXNzKGEuY2FsbCh0aGlzLGIsbmIodGhpcykpKX0pO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhJiZhKXtiPWEubWF0Y2goSyl8fFtdO3doaWxlKGM9dGhpc1tpKytdKWlmKGU9bmIoYyksZD0xPT09Yy5ub2RlVHlwZSYmXCIgXCIrbWIoZSkrXCIgXCIpe2c9MDt3aGlsZShmPWJbZysrXSlkLmluZGV4T2YoXCIgXCIrZitcIiBcIik8MCYmKGQrPWYrXCIgXCIpO2g9bWIoZCksZSE9PWgmJmMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIixoKX19cmV0dXJuIHRoaXN9LHJlbW92ZUNsYXNzOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlLGYsZyxoLGk9MDtpZihyLmlzRnVuY3Rpb24oYSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihiKXtyKHRoaXMpLnJlbW92ZUNsYXNzKGEuY2FsbCh0aGlzLGIsbmIodGhpcykpKX0pO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmF0dHIoXCJjbGFzc1wiLFwiXCIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhJiZhKXtiPWEubWF0Y2goSyl8fFtdO3doaWxlKGM9dGhpc1tpKytdKWlmKGU9bmIoYyksZD0xPT09Yy5ub2RlVHlwZSYmXCIgXCIrbWIoZSkrXCIgXCIpe2c9MDt3aGlsZShmPWJbZysrXSl3aGlsZShkLmluZGV4T2YoXCIgXCIrZitcIiBcIik+LTEpZD1kLnJlcGxhY2UoXCIgXCIrZitcIiBcIixcIiBcIik7aD1tYihkKSxlIT09aCYmYy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGgpfX1yZXR1cm4gdGhpc30sdG9nZ2xlQ2xhc3M6ZnVuY3Rpb24oYSxiKXt2YXIgYz10eXBlb2YgYTtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGImJlwic3RyaW5nXCI9PT1jP2I/dGhpcy5hZGRDbGFzcyhhKTp0aGlzLnJlbW92ZUNsYXNzKGEpOnIuaXNGdW5jdGlvbihhKT90aGlzLmVhY2goZnVuY3Rpb24oYyl7cih0aGlzKS50b2dnbGVDbGFzcyhhLmNhbGwodGhpcyxjLG5iKHRoaXMpLGIpLGIpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGIsZCxlLGY7aWYoXCJzdHJpbmdcIj09PWMpe2Q9MCxlPXIodGhpcyksZj1hLm1hdGNoKEspfHxbXTt3aGlsZShiPWZbZCsrXSllLmhhc0NsYXNzKGIpP2UucmVtb3ZlQ2xhc3MoYik6ZS5hZGRDbGFzcyhiKX1lbHNlIHZvaWQgMCE9PWEmJlwiYm9vbGVhblwiIT09Y3x8KGI9bmIodGhpcyksYiYmVi5zZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIixiKSx0aGlzLnNldEF0dHJpYnV0ZSYmdGhpcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGJ8fGE9PT0hMT9cIlwiOlYuZ2V0KHRoaXMsXCJfX2NsYXNzTmFtZV9fXCIpfHxcIlwiKSl9KX0saGFzQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkPTA7Yj1cIiBcIithK1wiIFwiO3doaWxlKGM9dGhpc1tkKytdKWlmKDE9PT1jLm5vZGVUeXBlJiYoXCIgXCIrbWIobmIoYykpK1wiIFwiKS5pbmRleE9mKGIpPi0xKXJldHVybiEwO3JldHVybiExfX0pO3ZhciBvYj0vXFxyL2c7ci5mbi5leHRlbmQoe3ZhbDpmdW5jdGlvbihhKXt2YXIgYixjLGQsZT10aGlzWzBdO3tpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiBkPXIuaXNGdW5jdGlvbihhKSx0aGlzLmVhY2goZnVuY3Rpb24oYyl7dmFyIGU7MT09PXRoaXMubm9kZVR5cGUmJihlPWQ/YS5jYWxsKHRoaXMsYyxyKHRoaXMpLnZhbCgpKTphLG51bGw9PWU/ZT1cIlwiOlwibnVtYmVyXCI9PXR5cGVvZiBlP2UrPVwiXCI6ci5pc0FycmF5KGUpJiYoZT1yLm1hcChlLGZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP1wiXCI6YStcIlwifSkpLGI9ci52YWxIb29rc1t0aGlzLnR5cGVdfHxyLnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmXCJzZXRcImluIGImJnZvaWQgMCE9PWIuc2V0KHRoaXMsZSxcInZhbHVlXCIpfHwodGhpcy52YWx1ZT1lKSl9KTtpZihlKXJldHVybiBiPXIudmFsSG9va3NbZS50eXBlXXx8ci52YWxIb29rc1tlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLGImJlwiZ2V0XCJpbiBiJiZ2b2lkIDAhPT0oYz1iLmdldChlLFwidmFsdWVcIikpP2M6KGM9ZS52YWx1ZSxcInN0cmluZ1wiPT10eXBlb2YgYz9jLnJlcGxhY2Uob2IsXCJcIik6bnVsbD09Yz9cIlwiOmMpfX19KSxyLmV4dGVuZCh7dmFsSG9va3M6e29wdGlvbjp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiPXIuZmluZC5hdHRyKGEsXCJ2YWx1ZVwiKTtyZXR1cm4gbnVsbCE9Yj9iOm1iKHIudGV4dChhKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihhKXt2YXIgYixjLGQsZT1hLm9wdGlvbnMsZj1hLnNlbGVjdGVkSW5kZXgsZz1cInNlbGVjdC1vbmVcIj09PWEudHlwZSxoPWc/bnVsbDpbXSxpPWc/ZisxOmUubGVuZ3RoO2ZvcihkPWY8MD9pOmc/ZjowO2Q8aTtkKyspaWYoYz1lW2RdLChjLnNlbGVjdGVkfHxkPT09ZikmJiFjLmRpc2FibGVkJiYoIWMucGFyZW50Tm9kZS5kaXNhYmxlZHx8IXIubm9kZU5hbWUoYy5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZihiPXIoYykudmFsKCksZylyZXR1cm4gYjtoLnB1c2goYil9cmV0dXJuIGh9LHNldDpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZT1hLm9wdGlvbnMsZj1yLm1ha2VBcnJheShiKSxnPWUubGVuZ3RoO3doaWxlKGctLSlkPWVbZ10sKGQuc2VsZWN0ZWQ9ci5pbkFycmF5KHIudmFsSG9va3Mub3B0aW9uLmdldChkKSxmKT4tMSkmJihjPSEwKTtyZXR1cm4gY3x8KGEuc2VsZWN0ZWRJbmRleD0tMSksZn19fX0pLHIuZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXtyLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oYSxiKXtpZihyLmlzQXJyYXkoYikpcmV0dXJuIGEuY2hlY2tlZD1yLmluQXJyYXkocihhKS52YWwoKSxiKT4tMX19LG8uY2hlY2tPbnx8KHIudmFsSG9va3NbdGhpc10uZ2V0PWZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT09YS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKT9cIm9uXCI6YS52YWx1ZX0pfSk7dmFyIHBiPS9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztyLmV4dGVuZChyLmV2ZW50LHt0cmlnZ2VyOmZ1bmN0aW9uKGIsYyxlLGYpe3ZhciBnLGgsaSxqLGssbSxuLG89W2V8fGRdLHA9bC5jYWxsKGIsXCJ0eXBlXCIpP2IudHlwZTpiLHE9bC5jYWxsKGIsXCJuYW1lc3BhY2VcIik/Yi5uYW1lc3BhY2Uuc3BsaXQoXCIuXCIpOltdO2lmKGg9aT1lPWV8fGQsMyE9PWUubm9kZVR5cGUmJjghPT1lLm5vZGVUeXBlJiYhcGIudGVzdChwK3IuZXZlbnQudHJpZ2dlcmVkKSYmKHAuaW5kZXhPZihcIi5cIik+LTEmJihxPXAuc3BsaXQoXCIuXCIpLHA9cS5zaGlmdCgpLHEuc29ydCgpKSxrPXAuaW5kZXhPZihcIjpcIik8MCYmXCJvblwiK3AsYj1iW3IuZXhwYW5kb10/YjpuZXcgci5FdmVudChwLFwib2JqZWN0XCI9PXR5cGVvZiBiJiZiKSxiLmlzVHJpZ2dlcj1mPzI6MyxiLm5hbWVzcGFjZT1xLmpvaW4oXCIuXCIpLGIucm5hbWVzcGFjZT1iLm5hbWVzcGFjZT9uZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrcS5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIik6bnVsbCxiLnJlc3VsdD12b2lkIDAsYi50YXJnZXR8fChiLnRhcmdldD1lKSxjPW51bGw9PWM/W2JdOnIubWFrZUFycmF5KGMsW2JdKSxuPXIuZXZlbnQuc3BlY2lhbFtwXXx8e30sZnx8IW4udHJpZ2dlcnx8bi50cmlnZ2VyLmFwcGx5KGUsYykhPT0hMSkpe2lmKCFmJiYhbi5ub0J1YmJsZSYmIXIuaXNXaW5kb3coZSkpe2ZvcihqPW4uZGVsZWdhdGVUeXBlfHxwLHBiLnRlc3QoaitwKXx8KGg9aC5wYXJlbnROb2RlKTtoO2g9aC5wYXJlbnROb2RlKW8ucHVzaChoKSxpPWg7aT09PShlLm93bmVyRG9jdW1lbnR8fGQpJiZvLnB1c2goaS5kZWZhdWx0Vmlld3x8aS5wYXJlbnRXaW5kb3d8fGEpfWc9MDt3aGlsZSgoaD1vW2crK10pJiYhYi5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWIudHlwZT1nPjE/ajpuLmJpbmRUeXBlfHxwLG09KFYuZ2V0KGgsXCJldmVudHNcIil8fHt9KVtiLnR5cGVdJiZWLmdldChoLFwiaGFuZGxlXCIpLG0mJm0uYXBwbHkoaCxjKSxtPWsmJmhba10sbSYmbS5hcHBseSYmVChoKSYmKGIucmVzdWx0PW0uYXBwbHkoaCxjKSxiLnJlc3VsdD09PSExJiZiLnByZXZlbnREZWZhdWx0KCkpO3JldHVybiBiLnR5cGU9cCxmfHxiLmlzRGVmYXVsdFByZXZlbnRlZCgpfHxuLl9kZWZhdWx0JiZuLl9kZWZhdWx0LmFwcGx5KG8ucG9wKCksYykhPT0hMXx8IVQoZSl8fGsmJnIuaXNGdW5jdGlvbihlW3BdKSYmIXIuaXNXaW5kb3coZSkmJihpPWVba10saSYmKGVba109bnVsbCksci5ldmVudC50cmlnZ2VyZWQ9cCxlW3BdKCksci5ldmVudC50cmlnZ2VyZWQ9dm9pZCAwLGkmJihlW2tdPWkpKSxiLnJlc3VsdH19LHNpbXVsYXRlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1yLmV4dGVuZChuZXcgci5FdmVudCxjLHt0eXBlOmEsaXNTaW11bGF0ZWQ6ITB9KTtyLmV2ZW50LnRyaWdnZXIoZCxudWxsLGIpfX0pLHIuZm4uZXh0ZW5kKHt0cmlnZ2VyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3IuZXZlbnQudHJpZ2dlcihhLGIsdGhpcyl9KX0sdHJpZ2dlckhhbmRsZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzWzBdO2lmKGMpcmV0dXJuIHIuZXZlbnQudHJpZ2dlcihhLGIsYywhMCl9fSksci5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihhLGIpe3IuZm5bYl09ZnVuY3Rpb24oYSxjKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4wP3RoaXMub24oYixudWxsLGEsYyk6dGhpcy50cmlnZ2VyKGIpfX0pLHIuZm4uZXh0ZW5kKHtob3ZlcjpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoYSkubW91c2VsZWF2ZShifHxhKX19KSxvLmZvY3VzaW49XCJvbmZvY3VzaW5cImluIGEsby5mb2N1c2lufHxyLmVhY2goe2ZvY3VzOlwiZm9jdXNpblwiLGJsdXI6XCJmb2N1c291dFwifSxmdW5jdGlvbihhLGIpe3ZhciBjPWZ1bmN0aW9uKGEpe3IuZXZlbnQuc2ltdWxhdGUoYixhLnRhcmdldCxyLmV2ZW50LmZpeChhKSl9O3IuZXZlbnQuc3BlY2lhbFtiXT17c2V0dXA6ZnVuY3Rpb24oKXt2YXIgZD10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsZT1WLmFjY2VzcyhkLGIpO2V8fGQuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApLFYuYWNjZXNzKGQsYiwoZXx8MCkrMSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLGU9Vi5hY2Nlc3MoZCxiKS0xO2U/Vi5hY2Nlc3MoZCxiLGUpOihkLnJlbW92ZUV2ZW50TGlzdGVuZXIoYSxjLCEwKSxWLnJlbW92ZShkLGIpKX19fSk7dmFyIHFiPWEubG9jYXRpb24scmI9ci5ub3coKSxzYj0vXFw/LztyLnBhcnNlWE1MPWZ1bmN0aW9uKGIpe3ZhciBjO2lmKCFifHxcInN0cmluZ1wiIT10eXBlb2YgYilyZXR1cm4gbnVsbDt0cnl7Yz0obmV3IGEuRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcoYixcInRleHQveG1sXCIpfWNhdGNoKGQpe2M9dm9pZCAwfXJldHVybiBjJiYhYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcnNlcmVycm9yXCIpLmxlbmd0aHx8ci5lcnJvcihcIkludmFsaWQgWE1MOiBcIitiKSxjfTt2YXIgdGI9L1xcW1xcXSQvLHViPS9cXHI/XFxuL2csdmI9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLHdiPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiB4YihhLGIsYyxkKXt2YXIgZTtpZihyLmlzQXJyYXkoYikpci5lYWNoKGIsZnVuY3Rpb24oYixlKXtjfHx0Yi50ZXN0KGEpP2QoYSxlKTp4YihhK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9ZT9iOlwiXCIpK1wiXVwiLGUsYyxkKX0pO2Vsc2UgaWYoY3x8XCJvYmplY3RcIiE9PXIudHlwZShiKSlkKGEsYik7ZWxzZSBmb3IoZSBpbiBiKXhiKGErXCJbXCIrZStcIl1cIixiW2VdLGMsZCl9ci5wYXJhbT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1mdW5jdGlvbihhLGIpe3ZhciBjPXIuaXNGdW5jdGlvbihiKT9iKCk6YjtkW2QubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoYSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KG51bGw9PWM/XCJcIjpjKX07aWYoci5pc0FycmF5KGEpfHxhLmpxdWVyeSYmIXIuaXNQbGFpbk9iamVjdChhKSlyLmVhY2goYSxmdW5jdGlvbigpe2UodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IoYyBpbiBhKXhiKGMsYVtjXSxiLGUpO3JldHVybiBkLmpvaW4oXCImXCIpfSxyLmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHIucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT1yLnByb3AodGhpcyxcImVsZW1lbnRzXCIpO3JldHVybiBhP3IubWFrZUFycmF5KGEpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgYT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIXIodGhpcykuaXMoXCI6ZGlzYWJsZWRcIikmJndiLnRlc3QodGhpcy5ub2RlTmFtZSkmJiF2Yi50ZXN0KGEpJiYodGhpcy5jaGVja2VkfHwhaWEudGVzdChhKSl9KS5tYXAoZnVuY3Rpb24oYSxiKXt2YXIgYz1yKHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1jP251bGw6ci5pc0FycmF5KGMpP3IubWFwKGMsZnVuY3Rpb24oYSl7cmV0dXJue25hbWU6Yi5uYW1lLHZhbHVlOmEucmVwbGFjZSh1YixcIlxcclxcblwiKX19KTp7bmFtZTpiLm5hbWUsdmFsdWU6Yy5yZXBsYWNlKHViLFwiXFxyXFxuXCIpfX0pLmdldCgpfX0pO3ZhciB5Yj0vJTIwL2csemI9LyMuKiQvLEFiPS8oWz8mXSlfPVteJl0qLyxCYj0vXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL2dtLENiPS9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLERiPS9eKD86R0VUfEhFQUQpJC8sRWI9L15cXC9cXC8vLEZiPXt9LEdiPXt9LEhiPVwiKi9cIi5jb25jYXQoXCIqXCIpLEliPWQuY3JlYXRlRWxlbWVudChcImFcIik7SWIuaHJlZj1xYi5ocmVmO2Z1bmN0aW9uIEpiKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe1wic3RyaW5nXCIhPXR5cGVvZiBiJiYoYz1iLGI9XCIqXCIpO3ZhciBkLGU9MCxmPWIudG9Mb3dlckNhc2UoKS5tYXRjaChLKXx8W107aWYoci5pc0Z1bmN0aW9uKGMpKXdoaWxlKGQ9ZltlKytdKVwiK1wiPT09ZFswXT8oZD1kLnNsaWNlKDEpfHxcIipcIiwoYVtkXT1hW2RdfHxbXSkudW5zaGlmdChjKSk6KGFbZF09YVtkXXx8W10pLnB1c2goYyl9fWZ1bmN0aW9uIEtiKGEsYixjLGQpe3ZhciBlPXt9LGY9YT09PUdiO2Z1bmN0aW9uIGcoaCl7dmFyIGk7cmV0dXJuIGVbaF09ITAsci5lYWNoKGFbaF18fFtdLGZ1bmN0aW9uKGEsaCl7dmFyIGo9aChiLGMsZCk7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGp8fGZ8fGVbal0/Zj8hKGk9aik6dm9pZCAwOihiLmRhdGFUeXBlcy51bnNoaWZ0KGopLGcoaiksITEpfSksaX1yZXR1cm4gZyhiLmRhdGFUeXBlc1swXSl8fCFlW1wiKlwiXSYmZyhcIipcIil9ZnVuY3Rpb24gTGIoYSxiKXt2YXIgYyxkLGU9ci5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnN8fHt9O2ZvcihjIGluIGIpdm9pZCAwIT09YltjXSYmKChlW2NdP2E6ZHx8KGQ9e30pKVtjXT1iW2NdKTtyZXR1cm4gZCYmci5leHRlbmQoITAsYSxkKSxhfWZ1bmN0aW9uIE1iKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuY29udGVudHMsaT1hLmRhdGFUeXBlczt3aGlsZShcIipcIj09PWlbMF0paS5zaGlmdCgpLHZvaWQgMD09PWQmJihkPWEubWltZVR5cGV8fGIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIikpO2lmKGQpZm9yKGUgaW4gaClpZihoW2VdJiZoW2VdLnRlc3QoZCkpe2kudW5zaGlmdChlKTticmVha31pZihpWzBdaW4gYylmPWlbMF07ZWxzZXtmb3IoZSBpbiBjKXtpZighaVswXXx8YS5jb252ZXJ0ZXJzW2UrXCIgXCIraVswXV0pe2Y9ZTticmVha31nfHwoZz1lKX1mPWZ8fGd9aWYoZilyZXR1cm4gZiE9PWlbMF0mJmkudW5zaGlmdChmKSxjW2ZdfWZ1bmN0aW9uIE5iKGEsYixjLGQpe3ZhciBlLGYsZyxoLGksaj17fSxrPWEuZGF0YVR5cGVzLnNsaWNlKCk7aWYoa1sxXSlmb3IoZyBpbiBhLmNvbnZlcnRlcnMpaltnLnRvTG93ZXJDYXNlKCldPWEuY29udmVydGVyc1tnXTtmPWsuc2hpZnQoKTt3aGlsZShmKWlmKGEucmVzcG9uc2VGaWVsZHNbZl0mJihjW2EucmVzcG9uc2VGaWVsZHNbZl1dPWIpLCFpJiZkJiZhLmRhdGFGaWx0ZXImJihiPWEuZGF0YUZpbHRlcihiLGEuZGF0YVR5cGUpKSxpPWYsZj1rLnNoaWZ0KCkpaWYoXCIqXCI9PT1mKWY9aTtlbHNlIGlmKFwiKlwiIT09aSYmaSE9PWYpe2lmKGc9altpK1wiIFwiK2ZdfHxqW1wiKiBcIitmXSwhZylmb3IoZSBpbiBqKWlmKGg9ZS5zcGxpdChcIiBcIiksaFsxXT09PWYmJihnPWpbaStcIiBcIitoWzBdXXx8altcIiogXCIraFswXV0pKXtnPT09ITA/Zz1qW2VdOmpbZV0hPT0hMCYmKGY9aFswXSxrLnVuc2hpZnQoaFsxXSkpO2JyZWFrfWlmKGchPT0hMClpZihnJiZhW1widGhyb3dzXCJdKWI9ZyhiKTtlbHNlIHRyeXtiPWcoYil9Y2F0Y2gobCl7cmV0dXJue3N0YXRlOlwicGFyc2VyZXJyb3JcIixlcnJvcjpnP2w6XCJObyBjb252ZXJzaW9uIGZyb20gXCIraStcIiB0byBcIitmfX19cmV0dXJue3N0YXRlOlwic3VjY2Vzc1wiLGRhdGE6Yn19ci5leHRlbmQoe2FjdGl2ZTowLGxhc3RNb2RpZmllZDp7fSxldGFnOnt9LGFqYXhTZXR0aW5nczp7dXJsOnFiLmhyZWYsdHlwZTpcIkdFVFwiLGlzTG9jYWw6Q2IudGVzdChxYi5wcm90b2NvbCksZ2xvYmFsOiEwLHByb2Nlc3NEYXRhOiEwLGFzeW5jOiEwLGNvbnRlbnRUeXBlOlwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsYWNjZXB0czp7XCIqXCI6SGIsdGV4dDpcInRleHQvcGxhaW5cIixodG1sOlwidGV4dC9odG1sXCIseG1sOlwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLGpzb246XCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIn0sY29udGVudHM6e3htbDovXFxieG1sXFxiLyxodG1sOi9cXGJodG1sLyxqc29uOi9cXGJqc29uXFxiL30scmVzcG9uc2VGaWVsZHM6e3htbDpcInJlc3BvbnNlWE1MXCIsdGV4dDpcInJlc3BvbnNlVGV4dFwiLGpzb246XCJyZXNwb25zZUpTT05cIn0sY29udmVydGVyczp7XCIqIHRleHRcIjpTdHJpbmcsXCJ0ZXh0IGh0bWxcIjohMCxcInRleHQganNvblwiOkpTT04ucGFyc2UsXCJ0ZXh0IHhtbFwiOnIucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihhLGIpe3JldHVybiBiP0xiKExiKGEsci5hamF4U2V0dGluZ3MpLGIpOkxiKHIuYWpheFNldHRpbmdzLGEpfSxhamF4UHJlZmlsdGVyOkpiKEZiKSxhamF4VHJhbnNwb3J0OkpiKEdiKSxhamF4OmZ1bmN0aW9uKGIsYyl7XCJvYmplY3RcIj09dHlwZW9mIGImJihjPWIsYj12b2lkIDApLGM9Y3x8e307dmFyIGUsZixnLGgsaSxqLGssbCxtLG4sbz1yLmFqYXhTZXR1cCh7fSxjKSxwPW8uY29udGV4dHx8byxxPW8uY29udGV4dCYmKHAubm9kZVR5cGV8fHAuanF1ZXJ5KT9yKHApOnIuZXZlbnQscz1yLkRlZmVycmVkKCksdD1yLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHU9by5zdGF0dXNDb2RlfHx7fSx2PXt9LHc9e30seD1cImNhbmNlbGVkXCIseT17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGEpe3ZhciBiO2lmKGspe2lmKCFoKXtoPXt9O3doaWxlKGI9QmIuZXhlYyhnKSloW2JbMV0udG9Mb3dlckNhc2UoKV09YlsyXX1iPWhbYS50b0xvd2VyQ2FzZSgpXX1yZXR1cm4gbnVsbD09Yj9udWxsOmJ9LGdldEFsbFJlc3BvbnNlSGVhZGVyczpmdW5jdGlvbigpe3JldHVybiBrP2c6bnVsbH0sc2V0UmVxdWVzdEhlYWRlcjpmdW5jdGlvbihhLGIpe3JldHVybiBudWxsPT1rJiYoYT13W2EudG9Mb3dlckNhc2UoKV09d1thLnRvTG93ZXJDYXNlKCldfHxhLHZbYV09YiksdGhpc30sb3ZlcnJpZGVNaW1lVHlwZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09ayYmKG8ubWltZVR5cGU9YSksdGhpc30sc3RhdHVzQ29kZTpmdW5jdGlvbihhKXt2YXIgYjtpZihhKWlmKGspeS5hbHdheXMoYVt5LnN0YXR1c10pO2Vsc2UgZm9yKGIgaW4gYSl1W2JdPVt1W2JdLGFbYl1dO3JldHVybiB0aGlzfSxhYm9ydDpmdW5jdGlvbihhKXt2YXIgYj1hfHx4O3JldHVybiBlJiZlLmFib3J0KGIpLEEoMCxiKSx0aGlzfX07aWYocy5wcm9taXNlKHkpLG8udXJsPSgoYnx8by51cmx8fHFiLmhyZWYpK1wiXCIpLnJlcGxhY2UoRWIscWIucHJvdG9jb2wrXCIvL1wiKSxvLnR5cGU9Yy5tZXRob2R8fGMudHlwZXx8by5tZXRob2R8fG8udHlwZSxvLmRhdGFUeXBlcz0oby5kYXRhVHlwZXx8XCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2goSyl8fFtcIlwiXSxudWxsPT1vLmNyb3NzRG9tYWluKXtqPWQuY3JlYXRlRWxlbWVudChcImFcIik7dHJ5e2ouaHJlZj1vLnVybCxqLmhyZWY9ai5ocmVmLG8uY3Jvc3NEb21haW49SWIucHJvdG9jb2wrXCIvL1wiK0liLmhvc3QhPWoucHJvdG9jb2wrXCIvL1wiK2ouaG9zdH1jYXRjaCh6KXtvLmNyb3NzRG9tYWluPSEwfX1pZihvLmRhdGEmJm8ucHJvY2Vzc0RhdGEmJlwic3RyaW5nXCIhPXR5cGVvZiBvLmRhdGEmJihvLmRhdGE9ci5wYXJhbShvLmRhdGEsby50cmFkaXRpb25hbCkpLEtiKEZiLG8sYyx5KSxrKXJldHVybiB5O2w9ci5ldmVudCYmby5nbG9iYWwsbCYmMD09PXIuYWN0aXZlKysmJnIuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSxvLnR5cGU9by50eXBlLnRvVXBwZXJDYXNlKCksby5oYXNDb250ZW50PSFEYi50ZXN0KG8udHlwZSksZj1vLnVybC5yZXBsYWNlKHpiLFwiXCIpLG8uaGFzQ29udGVudD9vLmRhdGEmJm8ucHJvY2Vzc0RhdGEmJjA9PT0oby5jb250ZW50VHlwZXx8XCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSYmKG8uZGF0YT1vLmRhdGEucmVwbGFjZSh5YixcIitcIikpOihuPW8udXJsLnNsaWNlKGYubGVuZ3RoKSxvLmRhdGEmJihmKz0oc2IudGVzdChmKT9cIiZcIjpcIj9cIikrby5kYXRhLGRlbGV0ZSBvLmRhdGEpLG8uY2FjaGU9PT0hMSYmKGY9Zi5yZXBsYWNlKEFiLFwiJDFcIiksbj0oc2IudGVzdChmKT9cIiZcIjpcIj9cIikrXCJfPVwiK3JiKysgK24pLG8udXJsPWYrbiksby5pZk1vZGlmaWVkJiYoci5sYXN0TW9kaWZpZWRbZl0mJnkuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsci5sYXN0TW9kaWZpZWRbZl0pLHIuZXRhZ1tmXSYmeS5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLHIuZXRhZ1tmXSkpLChvLmRhdGEmJm8uaGFzQ29udGVudCYmby5jb250ZW50VHlwZSE9PSExfHxjLmNvbnRlbnRUeXBlKSYmeS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsby5jb250ZW50VHlwZSkseS5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsby5kYXRhVHlwZXNbMF0mJm8uYWNjZXB0c1tvLmRhdGFUeXBlc1swXV0/by5hY2NlcHRzW28uZGF0YVR5cGVzWzBdXSsoXCIqXCIhPT1vLmRhdGFUeXBlc1swXT9cIiwgXCIrSGIrXCI7IHE9MC4wMVwiOlwiXCIpOm8uYWNjZXB0c1tcIipcIl0pO2ZvcihtIGluIG8uaGVhZGVycyl5LnNldFJlcXVlc3RIZWFkZXIobSxvLmhlYWRlcnNbbV0pO2lmKG8uYmVmb3JlU2VuZCYmKG8uYmVmb3JlU2VuZC5jYWxsKHAseSxvKT09PSExfHxrKSlyZXR1cm4geS5hYm9ydCgpO2lmKHg9XCJhYm9ydFwiLHQuYWRkKG8uY29tcGxldGUpLHkuZG9uZShvLnN1Y2Nlc3MpLHkuZmFpbChvLmVycm9yKSxlPUtiKEdiLG8sYyx5KSl7aWYoeS5yZWFkeVN0YXRlPTEsbCYmcS50cmlnZ2VyKFwiYWpheFNlbmRcIixbeSxvXSksaylyZXR1cm4geTtvLmFzeW5jJiZvLnRpbWVvdXQ+MCYmKGk9YS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7eS5hYm9ydChcInRpbWVvdXRcIil9LG8udGltZW91dCkpO3RyeXtrPSExLGUuc2VuZCh2LEEpfWNhdGNoKHope2lmKGspdGhyb3cgejtBKC0xLHopfX1lbHNlIEEoLTEsXCJObyBUcmFuc3BvcnRcIik7ZnVuY3Rpb24gQShiLGMsZCxoKXt2YXIgaixtLG4sdix3LHg9YztrfHwoaz0hMCxpJiZhLmNsZWFyVGltZW91dChpKSxlPXZvaWQgMCxnPWh8fFwiXCIseS5yZWFkeVN0YXRlPWI+MD80OjAsaj1iPj0yMDAmJmI8MzAwfHwzMDQ9PT1iLGQmJih2PU1iKG8seSxkKSksdj1OYihvLHYseSxqKSxqPyhvLmlmTW9kaWZpZWQmJih3PXkuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpLHcmJihyLmxhc3RNb2RpZmllZFtmXT13KSx3PXkuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpLHcmJihyLmV0YWdbZl09dykpLDIwND09PWJ8fFwiSEVBRFwiPT09by50eXBlP3g9XCJub2NvbnRlbnRcIjozMDQ9PT1iP3g9XCJub3Rtb2RpZmllZFwiOih4PXYuc3RhdGUsbT12LmRhdGEsbj12LmVycm9yLGo9IW4pKToobj14LCFiJiZ4fHwoeD1cImVycm9yXCIsYjwwJiYoYj0wKSkpLHkuc3RhdHVzPWIseS5zdGF0dXNUZXh0PShjfHx4KStcIlwiLGo/cy5yZXNvbHZlV2l0aChwLFttLHgseV0pOnMucmVqZWN0V2l0aChwLFt5LHgsbl0pLHkuc3RhdHVzQ29kZSh1KSx1PXZvaWQgMCxsJiZxLnRyaWdnZXIoaj9cImFqYXhTdWNjZXNzXCI6XCJhamF4RXJyb3JcIixbeSxvLGo/bTpuXSksdC5maXJlV2l0aChwLFt5LHhdKSxsJiYocS50cmlnZ2VyKFwiYWpheENvbXBsZXRlXCIsW3ksb10pLC0tci5hY3RpdmV8fHIuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpKSl9cmV0dXJuIHl9LGdldEpTT046ZnVuY3Rpb24oYSxiLGMpe3JldHVybiByLmdldChhLGIsYyxcImpzb25cIil9LGdldFNjcmlwdDpmdW5jdGlvbihhLGIpe3JldHVybiByLmdldChhLHZvaWQgMCxiLFwic2NyaXB0XCIpfX0pLHIuZWFjaChbXCJnZXRcIixcInBvc3RcIl0sZnVuY3Rpb24oYSxiKXtyW2JdPWZ1bmN0aW9uKGEsYyxkLGUpe3JldHVybiByLmlzRnVuY3Rpb24oYykmJihlPWV8fGQsZD1jLGM9dm9pZCAwKSxyLmFqYXgoci5leHRlbmQoe3VybDphLHR5cGU6YixkYXRhVHlwZTplLGRhdGE6YyxzdWNjZXNzOmR9LHIuaXNQbGFpbk9iamVjdChhKSYmYSkpfX0pLHIuX2V2YWxVcmw9ZnVuY3Rpb24oYSl7cmV0dXJuIHIuYWpheCh7dXJsOmEsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsY2FjaGU6ITAsYXN5bmM6ITEsZ2xvYmFsOiExLFwidGhyb3dzXCI6ITB9KX0sci5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oYSl7dmFyIGI7cmV0dXJuIHRoaXNbMF0mJihyLmlzRnVuY3Rpb24oYSkmJihhPWEuY2FsbCh0aGlzWzBdKSksYj1yKGEsdGhpc1swXS5vd25lckRvY3VtZW50KS5lcSgwKS5jbG9uZSghMCksdGhpc1swXS5wYXJlbnROb2RlJiZiLmluc2VydEJlZm9yZSh0aGlzWzBdKSxiLm1hcChmdW5jdGlvbigpe3ZhciBhPXRoaXM7d2hpbGUoYS5maXJzdEVsZW1lbnRDaGlsZClhPWEuZmlyc3RFbGVtZW50Q2hpbGQ7cmV0dXJuIGF9KS5hcHBlbmQodGhpcykpLHRoaXN9LHdyYXBJbm5lcjpmdW5jdGlvbihhKXtyZXR1cm4gci5pc0Z1bmN0aW9uKGEpP3RoaXMuZWFjaChmdW5jdGlvbihiKXtyKHRoaXMpLndyYXBJbm5lcihhLmNhbGwodGhpcyxiKSl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYj1yKHRoaXMpLGM9Yi5jb250ZW50cygpO2MubGVuZ3RoP2Mud3JhcEFsbChhKTpiLmFwcGVuZChhKX0pfSx3cmFwOmZ1bmN0aW9uKGEpe3ZhciBiPXIuaXNGdW5jdGlvbihhKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGMpe3IodGhpcykud3JhcEFsbChiP2EuY2FsbCh0aGlzLGMpOmEpfSl9LHVud3JhcDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wYXJlbnQoYSkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7cih0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSxyLmV4cHIucHNldWRvcy5oaWRkZW49ZnVuY3Rpb24oYSl7cmV0dXJuIXIuZXhwci5wc2V1ZG9zLnZpc2libGUoYSl9LHIuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oYSl7cmV0dXJuISEoYS5vZmZzZXRXaWR0aHx8YS5vZmZzZXRIZWlnaHR8fGEuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSxyLmFqYXhTZXR0aW5ncy54aHI9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG5ldyBhLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGIpe319O3ZhciBPYj17MDoyMDAsMTIyMzoyMDR9LFBiPXIuYWpheFNldHRpbmdzLnhocigpO28uY29ycz0hIVBiJiZcIndpdGhDcmVkZW50aWFsc1wiaW4gUGIsby5hamF4PVBiPSEhUGIsci5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGIpe3ZhciBjLGQ7aWYoby5jb3JzfHxQYiYmIWIuY3Jvc3NEb21haW4pcmV0dXJue3NlbmQ6ZnVuY3Rpb24oZSxmKXt2YXIgZyxoPWIueGhyKCk7aWYoaC5vcGVuKGIudHlwZSxiLnVybCxiLmFzeW5jLGIudXNlcm5hbWUsYi5wYXNzd29yZCksYi54aHJGaWVsZHMpZm9yKGcgaW4gYi54aHJGaWVsZHMpaFtnXT1iLnhockZpZWxkc1tnXTtiLm1pbWVUeXBlJiZoLm92ZXJyaWRlTWltZVR5cGUmJmgub3ZlcnJpZGVNaW1lVHlwZShiLm1pbWVUeXBlKSxiLmNyb3NzRG9tYWlufHxlW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXXx8KGVbXCJYLVJlcXVlc3RlZC1XaXRoXCJdPVwiWE1MSHR0cFJlcXVlc3RcIik7Zm9yKGcgaW4gZSloLnNldFJlcXVlc3RIZWFkZXIoZyxlW2ddKTtjPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbigpe2MmJihjPWQ9aC5vbmxvYWQ9aC5vbmVycm9yPWgub25hYm9ydD1oLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLFwiYWJvcnRcIj09PWE/aC5hYm9ydCgpOlwiZXJyb3JcIj09PWE/XCJudW1iZXJcIiE9dHlwZW9mIGguc3RhdHVzP2YoMCxcImVycm9yXCIpOmYoaC5zdGF0dXMsaC5zdGF0dXNUZXh0KTpmKE9iW2guc3RhdHVzXXx8aC5zdGF0dXMsaC5zdGF0dXNUZXh0LFwidGV4dFwiIT09KGgucmVzcG9uc2VUeXBlfHxcInRleHRcIil8fFwic3RyaW5nXCIhPXR5cGVvZiBoLnJlc3BvbnNlVGV4dD97YmluYXJ5OmgucmVzcG9uc2V9Ont0ZXh0OmgucmVzcG9uc2VUZXh0fSxoLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9fSxoLm9ubG9hZD1jKCksZD1oLm9uZXJyb3I9YyhcImVycm9yXCIpLHZvaWQgMCE9PWgub25hYm9ydD9oLm9uYWJvcnQ9ZDpoLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1oLnJlYWR5U3RhdGUmJmEuc2V0VGltZW91dChmdW5jdGlvbigpe2MmJmQoKX0pfSxjPWMoXCJhYm9ydFwiKTt0cnl7aC5zZW5kKGIuaGFzQ29udGVudCYmYi5kYXRhfHxudWxsKX1jYXRjaChpKXtpZihjKXRocm93IGl9fSxhYm9ydDpmdW5jdGlvbigpe2MmJmMoKX19fSksci5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGEpe2EuY3Jvc3NEb21haW4mJihhLmNvbnRlbnRzLnNjcmlwdD0hMSl9KSxyLmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OlwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIn0sY29udGVudHM6e3NjcmlwdDovXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi99LGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbihhKXtyZXR1cm4gci5nbG9iYWxFdmFsKGEpLGF9fX0pLHIuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLGZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEuY2FjaGUmJihhLmNhY2hlPSExKSxhLmNyb3NzRG9tYWluJiYoYS50eXBlPVwiR0VUXCIpfSksci5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsZnVuY3Rpb24oYSl7aWYoYS5jcm9zc0RvbWFpbil7dmFyIGIsYztyZXR1cm57c2VuZDpmdW5jdGlvbihlLGYpe2I9cihcIjxzY3JpcHQ+XCIpLnByb3Aoe2NoYXJzZXQ6YS5zY3JpcHRDaGFyc2V0LHNyYzphLnVybH0pLm9uKFwibG9hZCBlcnJvclwiLGM9ZnVuY3Rpb24oYSl7Yi5yZW1vdmUoKSxjPW51bGwsYSYmZihcImVycm9yXCI9PT1hLnR5cGU/NDA0OjIwMCxhLnR5cGUpfSksZC5oZWFkLmFwcGVuZENoaWxkKGJbMF0pfSxhYm9ydDpmdW5jdGlvbigpe2MmJmMoKX19fX0pO3ZhciBRYj1bXSxSYj0vKD0pXFw/KD89JnwkKXxcXD9cXD8vO3IuYWpheFNldHVwKHtqc29ucDpcImNhbGxiYWNrXCIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBhPVFiLnBvcCgpfHxyLmV4cGFuZG8rXCJfXCIrcmIrKztyZXR1cm4gdGhpc1thXT0hMCxhfX0pLHIuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIixmdW5jdGlvbihiLGMsZCl7dmFyIGUsZixnLGg9Yi5qc29ucCE9PSExJiYoUmIudGVzdChiLnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2YgYi5kYXRhJiYwPT09KGIuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJlJiLnRlc3QoYi5kYXRhKSYmXCJkYXRhXCIpO2lmKGh8fFwianNvbnBcIj09PWIuZGF0YVR5cGVzWzBdKXJldHVybiBlPWIuanNvbnBDYWxsYmFjaz1yLmlzRnVuY3Rpb24oYi5qc29ucENhbGxiYWNrKT9iLmpzb25wQ2FsbGJhY2soKTpiLmpzb25wQ2FsbGJhY2ssaD9iW2hdPWJbaF0ucmVwbGFjZShSYixcIiQxXCIrZSk6Yi5qc29ucCE9PSExJiYoYi51cmwrPShzYi50ZXN0KGIudXJsKT9cIiZcIjpcIj9cIikrYi5qc29ucCtcIj1cIitlKSxiLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXT1mdW5jdGlvbigpe3JldHVybiBnfHxyLmVycm9yKGUrXCIgd2FzIG5vdCBjYWxsZWRcIiksZ1swXX0sYi5kYXRhVHlwZXNbMF09XCJqc29uXCIsZj1hW2VdLGFbZV09ZnVuY3Rpb24oKXtnPWFyZ3VtZW50c30sZC5hbHdheXMoZnVuY3Rpb24oKXt2b2lkIDA9PT1mP3IoYSkucmVtb3ZlUHJvcChlKTphW2VdPWYsYltlXSYmKGIuanNvbnBDYWxsYmFjaz1jLmpzb25wQ2FsbGJhY2ssUWIucHVzaChlKSksZyYmci5pc0Z1bmN0aW9uKGYpJiZmKGdbMF0pLGc9Zj12b2lkIDB9KSxcInNjcmlwdFwifSksby5jcmVhdGVIVE1MRG9jdW1lbnQ9ZnVuY3Rpb24oKXt2YXIgYT1kLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5O3JldHVybiBhLmlubmVySFRNTD1cIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCIsMj09PWEuY2hpbGROb2Rlcy5sZW5ndGh9KCksci5wYXJzZUhUTUw9ZnVuY3Rpb24oYSxiLGMpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhKXJldHVybltdO1wiYm9vbGVhblwiPT10eXBlb2YgYiYmKGM9YixiPSExKTt2YXIgZSxmLGc7cmV0dXJuIGJ8fChvLmNyZWF0ZUhUTUxEb2N1bWVudD8oYj1kLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSxlPWIuY3JlYXRlRWxlbWVudChcImJhc2VcIiksZS5ocmVmPWQubG9jYXRpb24uaHJlZixiLmhlYWQuYXBwZW5kQ2hpbGQoZSkpOmI9ZCksZj1CLmV4ZWMoYSksZz0hYyYmW10sZj9bYi5jcmVhdGVFbGVtZW50KGZbMV0pXTooZj1wYShbYV0sYixnKSxnJiZnLmxlbmd0aCYmcihnKS5yZW1vdmUoKSxyLm1lcmdlKFtdLGYuY2hpbGROb2RlcykpfSxyLmZuLmxvYWQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnPXRoaXMsaD1hLmluZGV4T2YoXCIgXCIpO3JldHVybiBoPi0xJiYoZD1tYihhLnNsaWNlKGgpKSxhPWEuc2xpY2UoMCxoKSksci5pc0Z1bmN0aW9uKGIpPyhjPWIsYj12b2lkIDApOmImJlwib2JqZWN0XCI9PXR5cGVvZiBiJiYoZT1cIlBPU1RcIiksZy5sZW5ndGg+MCYmci5hamF4KHt1cmw6YSx0eXBlOmV8fFwiR0VUXCIsZGF0YVR5cGU6XCJodG1sXCIsZGF0YTpifSkuZG9uZShmdW5jdGlvbihhKXtmPWFyZ3VtZW50cyxnLmh0bWwoZD9yKFwiPGRpdj5cIikuYXBwZW5kKHIucGFyc2VIVE1MKGEpKS5maW5kKGQpOmEpfSkuYWx3YXlzKGMmJmZ1bmN0aW9uKGEsYil7Zy5lYWNoKGZ1bmN0aW9uKCl7Yy5hcHBseSh0aGlzLGZ8fFthLnJlc3BvbnNlVGV4dCxiLGFdKX0pfSksdGhpc30sci5lYWNoKFtcImFqYXhTdGFydFwiLFwiYWpheFN0b3BcIixcImFqYXhDb21wbGV0ZVwiLFwiYWpheEVycm9yXCIsXCJhamF4U3VjY2Vzc1wiLFwiYWpheFNlbmRcIl0sZnVuY3Rpb24oYSxiKXtyLmZuW2JdPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm9uKGIsYSl9fSksci5leHByLnBzZXVkb3MuYW5pbWF0ZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHIuZ3JlcChyLnRpbWVycyxmdW5jdGlvbihiKXtyZXR1cm4gYT09PWIuZWxlbX0pLmxlbmd0aH07ZnVuY3Rpb24gU2IoYSl7cmV0dXJuIHIuaXNXaW5kb3coYSk/YTo5PT09YS5ub2RlVHlwZSYmYS5kZWZhdWx0Vmlld31yLm9mZnNldD17c2V0T2Zmc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoLGksaixrPXIuY3NzKGEsXCJwb3NpdGlvblwiKSxsPXIoYSksbT17fTtcInN0YXRpY1wiPT09ayYmKGEuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKSxoPWwub2Zmc2V0KCksZj1yLmNzcyhhLFwidG9wXCIpLGk9ci5jc3MoYSxcImxlZnRcIiksaj0oXCJhYnNvbHV0ZVwiPT09a3x8XCJmaXhlZFwiPT09aykmJihmK2kpLmluZGV4T2YoXCJhdXRvXCIpPi0xLGo/KGQ9bC5wb3NpdGlvbigpLGc9ZC50b3AsZT1kLmxlZnQpOihnPXBhcnNlRmxvYXQoZil8fDAsZT1wYXJzZUZsb2F0KGkpfHwwKSxyLmlzRnVuY3Rpb24oYikmJihiPWIuY2FsbChhLGMsci5leHRlbmQoe30saCkpKSxudWxsIT1iLnRvcCYmKG0udG9wPWIudG9wLWgudG9wK2cpLG51bGwhPWIubGVmdCYmKG0ubGVmdD1iLmxlZnQtaC5sZWZ0K2UpLFwidXNpbmdcImluIGI/Yi51c2luZy5jYWxsKGEsbSk6bC5jc3MobSl9fSxyLmZuLmV4dGVuZCh7b2Zmc2V0OmZ1bmN0aW9uKGEpe2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PWE/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oYil7ci5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsYSxiKX0pO3ZhciBiLGMsZCxlLGY9dGhpc1swXTtpZihmKXJldHVybiBmLmdldENsaWVudFJlY3RzKCkubGVuZ3RoPyhkPWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksZC53aWR0aHx8ZC5oZWlnaHQ/KGU9Zi5vd25lckRvY3VtZW50LGM9U2IoZSksYj1lLmRvY3VtZW50RWxlbWVudCx7dG9wOmQudG9wK2MucGFnZVlPZmZzZXQtYi5jbGllbnRUb3AsbGVmdDpkLmxlZnQrYy5wYWdlWE9mZnNldC1iLmNsaWVudExlZnR9KTpkKTp7dG9wOjAsbGVmdDowfX0scG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzWzBdKXt2YXIgYSxiLGM9dGhpc1swXSxkPXt0b3A6MCxsZWZ0OjB9O3JldHVyblwiZml4ZWRcIj09PXIuY3NzKGMsXCJwb3NpdGlvblwiKT9iPWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk6KGE9dGhpcy5vZmZzZXRQYXJlbnQoKSxiPXRoaXMub2Zmc2V0KCksci5ub2RlTmFtZShhWzBdLFwiaHRtbFwiKXx8KGQ9YS5vZmZzZXQoKSksZD17dG9wOmQudG9wK3IuY3NzKGFbMF0sXCJib3JkZXJUb3BXaWR0aFwiLCEwKSxsZWZ0OmQubGVmdCtyLmNzcyhhWzBdLFwiYm9yZGVyTGVmdFdpZHRoXCIsITApfSkse3RvcDpiLnRvcC1kLnRvcC1yLmNzcyhjLFwibWFyZ2luVG9wXCIsITApLGxlZnQ6Yi5sZWZ0LWQubGVmdC1yLmNzcyhjLFwibWFyZ2luTGVmdFwiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9mZnNldFBhcmVudDt3aGlsZShhJiZcInN0YXRpY1wiPT09ci5jc3MoYSxcInBvc2l0aW9uXCIpKWE9YS5vZmZzZXRQYXJlbnQ7cmV0dXJuIGF8fHFhfSl9fSksci5lYWNoKHtzY3JvbGxMZWZ0OlwicGFnZVhPZmZzZXRcIixzY3JvbGxUb3A6XCJwYWdlWU9mZnNldFwifSxmdW5jdGlvbihhLGIpe3ZhciBjPVwicGFnZVlPZmZzZXRcIj09PWI7ci5mblthXT1mdW5jdGlvbihkKXtyZXR1cm4gUyh0aGlzLGZ1bmN0aW9uKGEsZCxlKXt2YXIgZj1TYihhKTtyZXR1cm4gdm9pZCAwPT09ZT9mP2ZbYl06YVtkXTp2b2lkKGY/Zi5zY3JvbGxUbyhjP2YucGFnZVhPZmZzZXQ6ZSxjP2U6Zi5wYWdlWU9mZnNldCk6YVtkXT1lKX0sYSxkLGFyZ3VtZW50cy5sZW5ndGgpfX0pLHIuZWFjaChbXCJ0b3BcIixcImxlZnRcIl0sZnVuY3Rpb24oYSxiKXtyLmNzc0hvb2tzW2JdPU9hKG8ucGl4ZWxQb3NpdGlvbixmdW5jdGlvbihhLGMpe2lmKGMpcmV0dXJuIGM9TmEoYSxiKSxMYS50ZXN0KGMpP3IoYSkucG9zaXRpb24oKVtiXStcInB4XCI6Y30pfSksci5lYWNoKHtIZWlnaHQ6XCJoZWlnaHRcIixXaWR0aDpcIndpZHRoXCJ9LGZ1bmN0aW9uKGEsYil7ci5lYWNoKHtwYWRkaW5nOlwiaW5uZXJcIithLGNvbnRlbnQ6YixcIlwiOlwib3V0ZXJcIithfSxmdW5jdGlvbihjLGQpe3IuZm5bZF09ZnVuY3Rpb24oZSxmKXt2YXIgZz1hcmd1bWVudHMubGVuZ3RoJiYoY3x8XCJib29sZWFuXCIhPXR5cGVvZiBlKSxoPWN8fChlPT09ITB8fGY9PT0hMD9cIm1hcmdpblwiOlwiYm9yZGVyXCIpO3JldHVybiBTKHRoaXMsZnVuY3Rpb24oYixjLGUpe3ZhciBmO3JldHVybiByLmlzV2luZG93KGIpPzA9PT1kLmluZGV4T2YoXCJvdXRlclwiKT9iW1wiaW5uZXJcIithXTpiLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiK2FdOjk9PT1iLm5vZGVUeXBlPyhmPWIuZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KGIuYm9keVtcInNjcm9sbFwiK2FdLGZbXCJzY3JvbGxcIithXSxiLmJvZHlbXCJvZmZzZXRcIithXSxmW1wib2Zmc2V0XCIrYV0sZltcImNsaWVudFwiK2FdKSk6dm9pZCAwPT09ZT9yLmNzcyhiLGMsaCk6ci5zdHlsZShiLGMsZSxoKX0sYixnP2U6dm9pZCAwLGcpfX0pfSksci5mbi5leHRlbmQoe2JpbmQ6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aGlzLm9uKGEsbnVsbCxiLGMpfSx1bmJpbmQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5vZmYoYSxudWxsLGIpfSxkZWxlZ2F0ZTpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4gdGhpcy5vbihiLGEsYyxkKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKGEsXCIqKlwiKTp0aGlzLm9mZihiLGF8fFwiKipcIixjKX19KSxyLnBhcnNlSlNPTj1KU09OLnBhcnNlLFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKFwianF1ZXJ5XCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gcn0pO3ZhciBUYj1hLmpRdWVyeSxVYj1hLiQ7cmV0dXJuIHIubm9Db25mbGljdD1mdW5jdGlvbihiKXtyZXR1cm4gYS4kPT09ciYmKGEuJD1VYiksYiYmYS5qUXVlcnk9PT1yJiYoYS5qUXVlcnk9VGIpLHJ9LGJ8fChhLmpRdWVyeT1hLiQ9cikscn0pO1xuIiwiLyohXG4gKiBqUXVlcnkgTW91c2V3aGVlbCAzLjEuMTJcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKi9cblxuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIE5vZGUvQ29tbW9uSlMgc3R5bGUgZm9yIEJyb3dzZXJpZnlcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxufShmdW5jdGlvbiAoJCkge1xuXG4gICAgdmFyIHRvRml4ICA9IFsnd2hlZWwnLCAnbW91c2V3aGVlbCcsICdET01Nb3VzZVNjcm9sbCcsICdNb3pNb3VzZVBpeGVsU2Nyb2xsJ10sXG4gICAgICAgIHRvQmluZCA9ICggJ29ud2hlZWwnIGluIGRvY3VtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50TW9kZSA+PSA5ICkgP1xuICAgICAgICAgICAgICAgICAgICBbJ3doZWVsJ10gOiBbJ21vdXNld2hlZWwnLCAnRG9tTW91c2VTY3JvbGwnLCAnTW96TW91c2VQaXhlbFNjcm9sbCddLFxuICAgICAgICBzbGljZSAgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UsXG4gICAgICAgIG51bGxMb3dlc3REZWx0YVRpbWVvdXQsIGxvd2VzdERlbHRhO1xuXG4gICAgaWYgKCAkLmV2ZW50LmZpeEhvb2tzICkge1xuICAgICAgICBmb3IgKCB2YXIgaSA9IHRvRml4Lmxlbmd0aDsgaTsgKSB7XG4gICAgICAgICAgICAkLmV2ZW50LmZpeEhvb2tzWyB0b0ZpeFstLWldIF0gPSAkLmV2ZW50Lm1vdXNlSG9va3M7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3BlY2lhbCA9ICQuZXZlbnQuc3BlY2lhbC5tb3VzZXdoZWVsID0ge1xuICAgICAgICB2ZXJzaW9uOiAnMy4xLjEyJyxcblxuICAgICAgICBzZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciApIHtcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IHRvQmluZC5sZW5ndGg7IGk7ICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoIHRvQmluZFstLWldLCBoYW5kbGVyLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbm1vdXNld2hlZWwgPSBoYW5kbGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGxpbmUgaGVpZ2h0IGFuZCBwYWdlIGhlaWdodCBmb3IgdGhpcyBwYXJ0aWN1bGFyIGVsZW1lbnRcbiAgICAgICAgICAgICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcsIHNwZWNpYWwuZ2V0TGluZUhlaWdodCh0aGlzKSk7XG4gICAgICAgICAgICAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtcGFnZS1oZWlnaHQnLCBzcGVjaWFsLmdldFBhZ2VIZWlnaHQodGhpcykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gdG9CaW5kLmxlbmd0aDsgaTsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciggdG9CaW5kWy0taV0sIGhhbmRsZXIsIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubW91c2V3aGVlbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCB0aGUgZGF0YSB3ZSBhZGRlZCB0byB0aGUgZWxlbWVudFxuICAgICAgICAgICAgJC5yZW1vdmVEYXRhKHRoaXMsICdtb3VzZXdoZWVsLWxpbmUtaGVpZ2h0Jyk7XG4gICAgICAgICAgICAkLnJlbW92ZURhdGEodGhpcywgJ21vdXNld2hlZWwtcGFnZS1oZWlnaHQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRMaW5lSGVpZ2h0OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICB2YXIgJGVsZW0gPSAkKGVsZW0pLFxuICAgICAgICAgICAgICAgICRwYXJlbnQgPSAkZWxlbVsnb2Zmc2V0UGFyZW50JyBpbiAkLmZuID8gJ29mZnNldFBhcmVudCcgOiAncGFyZW50J10oKTtcbiAgICAgICAgICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAkcGFyZW50ID0gJCgnYm9keScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KCRwYXJlbnQuY3NzKCdmb250U2l6ZScpLCAxMCkgfHwgcGFyc2VJbnQoJGVsZW0uY3NzKCdmb250U2l6ZScpLCAxMCkgfHwgMTY7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0UGFnZUhlaWdodDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgcmV0dXJuICQoZWxlbSkuaGVpZ2h0KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIGFkanVzdE9sZERlbHRhczogdHJ1ZSwgLy8gc2VlIHNob3VsZEFkanVzdE9sZERlbHRhcygpIGJlbG93XG4gICAgICAgICAgICBub3JtYWxpemVPZmZzZXQ6IHRydWUgIC8vIGNhbGxzIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmb3IgZWFjaCBldmVudFxuICAgICAgICB9XG4gICAgfTtcblxuICAgICQuZm4uZXh0ZW5kKHtcbiAgICAgICAgbW91c2V3aGVlbDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIHJldHVybiBmbiA/IHRoaXMuYmluZCgnbW91c2V3aGVlbCcsIGZuKSA6IHRoaXMudHJpZ2dlcignbW91c2V3aGVlbCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVubW91c2V3aGVlbDogZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVuYmluZCgnbW91c2V3aGVlbCcsIGZuKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIHZhciBvcmdFdmVudCAgID0gZXZlbnQgfHwgd2luZG93LmV2ZW50LFxuICAgICAgICAgICAgYXJncyAgICAgICA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGRlbHRhICAgICAgPSAwLFxuICAgICAgICAgICAgZGVsdGFYICAgICA9IDAsXG4gICAgICAgICAgICBkZWx0YVkgICAgID0gMCxcbiAgICAgICAgICAgIGFic0RlbHRhICAgPSAwLFxuICAgICAgICAgICAgb2Zmc2V0WCAgICA9IDAsXG4gICAgICAgICAgICBvZmZzZXRZICAgID0gMDtcbiAgICAgICAgZXZlbnQgPSAkLmV2ZW50LmZpeChvcmdFdmVudCk7XG4gICAgICAgIGV2ZW50LnR5cGUgPSAnbW91c2V3aGVlbCc7XG5cbiAgICAgICAgLy8gT2xkIHNjaG9vbCBzY3JvbGx3aGVlbCBkZWx0YVxuICAgICAgICBpZiAoICdkZXRhaWwnICAgICAgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LmRldGFpbCAqIC0xOyAgICAgIH1cbiAgICAgICAgaWYgKCAnd2hlZWxEZWx0YScgIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVkgPSBvcmdFdmVudC53aGVlbERlbHRhOyAgICAgICB9XG4gICAgICAgIGlmICggJ3doZWVsRGVsdGFZJyBpbiBvcmdFdmVudCApIHsgZGVsdGFZID0gb3JnRXZlbnQud2hlZWxEZWx0YVk7ICAgICAgfVxuICAgICAgICBpZiAoICd3aGVlbERlbHRhWCcgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWCA9IG9yZ0V2ZW50LndoZWVsRGVsdGFYICogLTE7IH1cblxuICAgICAgICAvLyBGaXJlZm94IDwgMTcgaG9yaXpvbnRhbCBzY3JvbGxpbmcgcmVsYXRlZCB0byBET01Nb3VzZVNjcm9sbCBldmVudFxuICAgICAgICBpZiAoICdheGlzJyBpbiBvcmdFdmVudCAmJiBvcmdFdmVudC5heGlzID09PSBvcmdFdmVudC5IT1JJWk9OVEFMX0FYSVMgKSB7XG4gICAgICAgICAgICBkZWx0YVggPSBkZWx0YVkgKiAtMTtcbiAgICAgICAgICAgIGRlbHRhWSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgZGVsdGEgdG8gYmUgZGVsdGFZIG9yIGRlbHRhWCBpZiBkZWx0YVkgaXMgMCBmb3IgYmFja3dhcmRzIGNvbXBhdGFiaWxpdGl5XG4gICAgICAgIGRlbHRhID0gZGVsdGFZID09PSAwID8gZGVsdGFYIDogZGVsdGFZO1xuXG4gICAgICAgIC8vIE5ldyBzY2hvb2wgd2hlZWwgZGVsdGEgKHdoZWVsIGV2ZW50KVxuICAgICAgICBpZiAoICdkZWx0YVknIGluIG9yZ0V2ZW50ICkge1xuICAgICAgICAgICAgZGVsdGFZID0gb3JnRXZlbnQuZGVsdGFZICogLTE7XG4gICAgICAgICAgICBkZWx0YSAgPSBkZWx0YVk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCAnZGVsdGFYJyBpbiBvcmdFdmVudCApIHtcbiAgICAgICAgICAgIGRlbHRhWCA9IG9yZ0V2ZW50LmRlbHRhWDtcbiAgICAgICAgICAgIGlmICggZGVsdGFZID09PSAwICkgeyBkZWx0YSAgPSBkZWx0YVggKiAtMTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm8gY2hhbmdlIGFjdHVhbGx5IGhhcHBlbmVkLCBubyByZWFzb24gdG8gZ28gYW55IGZ1cnRoZXJcbiAgICAgICAgaWYgKCBkZWx0YVkgPT09IDAgJiYgZGVsdGFYID09PSAwICkgeyByZXR1cm47IH1cblxuICAgICAgICAvLyBOZWVkIHRvIGNvbnZlcnQgbGluZXMgYW5kIHBhZ2VzIHRvIHBpeGVscyBpZiB3ZSBhcmVuJ3QgYWxyZWFkeSBpbiBwaXhlbHNcbiAgICAgICAgLy8gVGhlcmUgYXJlIHRocmVlIGRlbHRhIG1vZGVzOlxuICAgICAgICAvLyAgICogZGVsdGFNb2RlIDAgaXMgYnkgcGl4ZWxzLCBub3RoaW5nIHRvIGRvXG4gICAgICAgIC8vICAgKiBkZWx0YU1vZGUgMSBpcyBieSBsaW5lc1xuICAgICAgICAvLyAgICogZGVsdGFNb2RlIDIgaXMgYnkgcGFnZXNcbiAgICAgICAgaWYgKCBvcmdFdmVudC5kZWx0YU1vZGUgPT09IDEgKSB7XG4gICAgICAgICAgICB2YXIgbGluZUhlaWdodCA9ICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcpO1xuICAgICAgICAgICAgZGVsdGEgICo9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVkgKj0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIGRlbHRhWCAqPSBsaW5lSGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKCBvcmdFdmVudC5kZWx0YU1vZGUgPT09IDIgKSB7XG4gICAgICAgICAgICB2YXIgcGFnZUhlaWdodCA9ICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1wYWdlLWhlaWdodCcpO1xuICAgICAgICAgICAgZGVsdGEgICo9IHBhZ2VIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVkgKj0gcGFnZUhlaWdodDtcbiAgICAgICAgICAgIGRlbHRhWCAqPSBwYWdlSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgbG93ZXN0IGFic29sdXRlIGRlbHRhIHRvIG5vcm1hbGl6ZSB0aGUgZGVsdGEgdmFsdWVzXG4gICAgICAgIGFic0RlbHRhID0gTWF0aC5tYXgoIE1hdGguYWJzKGRlbHRhWSksIE1hdGguYWJzKGRlbHRhWCkgKTtcblxuICAgICAgICBpZiAoICFsb3dlc3REZWx0YSB8fCBhYnNEZWx0YSA8IGxvd2VzdERlbHRhICkge1xuICAgICAgICAgICAgbG93ZXN0RGVsdGEgPSBhYnNEZWx0YTtcblxuICAgICAgICAgICAgLy8gQWRqdXN0IG9sZGVyIGRlbHRhcyBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgIGlmICggc2hvdWxkQWRqdXN0T2xkRGVsdGFzKG9yZ0V2ZW50LCBhYnNEZWx0YSkgKSB7XG4gICAgICAgICAgICAgICAgbG93ZXN0RGVsdGEgLz0gNDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGp1c3Qgb2xkZXIgZGVsdGFzIGlmIG5lY2Vzc2FyeVxuICAgICAgICBpZiAoIHNob3VsZEFkanVzdE9sZERlbHRhcyhvcmdFdmVudCwgYWJzRGVsdGEpICkge1xuICAgICAgICAgICAgLy8gRGl2aWRlIGFsbCB0aGUgdGhpbmdzIGJ5IDQwIVxuICAgICAgICAgICAgZGVsdGEgIC89IDQwO1xuICAgICAgICAgICAgZGVsdGFYIC89IDQwO1xuICAgICAgICAgICAgZGVsdGFZIC89IDQwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGEgd2hvbGUsIG5vcm1hbGl6ZWQgdmFsdWUgZm9yIHRoZSBkZWx0YXNcbiAgICAgICAgZGVsdGEgID0gTWF0aFsgZGVsdGEgID49IDEgPyAnZmxvb3InIDogJ2NlaWwnIF0oZGVsdGEgIC8gbG93ZXN0RGVsdGEpO1xuICAgICAgICBkZWx0YVggPSBNYXRoWyBkZWx0YVggPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YVggLyBsb3dlc3REZWx0YSk7XG4gICAgICAgIGRlbHRhWSA9IE1hdGhbIGRlbHRhWSA+PSAxID8gJ2Zsb29yJyA6ICdjZWlsJyBdKGRlbHRhWSAvIGxvd2VzdERlbHRhKTtcblxuICAgICAgICAvLyBOb3JtYWxpc2Ugb2Zmc2V0WCBhbmQgb2Zmc2V0WSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICggc3BlY2lhbC5zZXR0aW5ncy5ub3JtYWxpemVPZmZzZXQgJiYgdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QgKSB7XG4gICAgICAgICAgICB2YXIgYm91bmRpbmdSZWN0ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIG9mZnNldFggPSBldmVudC5jbGllbnRYIC0gYm91bmRpbmdSZWN0LmxlZnQ7XG4gICAgICAgICAgICBvZmZzZXRZID0gZXZlbnQuY2xpZW50WSAtIGJvdW5kaW5nUmVjdC50b3A7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgaW5mb3JtYXRpb24gdG8gdGhlIGV2ZW50IG9iamVjdFxuICAgICAgICBldmVudC5kZWx0YVggPSBkZWx0YVg7XG4gICAgICAgIGV2ZW50LmRlbHRhWSA9IGRlbHRhWTtcbiAgICAgICAgZXZlbnQuZGVsdGFGYWN0b3IgPSBsb3dlc3REZWx0YTtcbiAgICAgICAgZXZlbnQub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgICAgIGV2ZW50Lm9mZnNldFkgPSBvZmZzZXRZO1xuICAgICAgICAvLyBHbyBhaGVhZCBhbmQgc2V0IGRlbHRhTW9kZSB0byAwIHNpbmNlIHdlIGNvbnZlcnRlZCB0byBwaXhlbHNcbiAgICAgICAgLy8gQWx0aG91Z2ggdGhpcyBpcyBhIGxpdHRsZSBvZGQgc2luY2Ugd2Ugb3ZlcndyaXRlIHRoZSBkZWx0YVgvWVxuICAgICAgICAvLyBwcm9wZXJ0aWVzIHdpdGggbm9ybWFsaXplZCBkZWx0YXMuXG4gICAgICAgIGV2ZW50LmRlbHRhTW9kZSA9IDA7XG5cbiAgICAgICAgLy8gQWRkIGV2ZW50IGFuZCBkZWx0YSB0byB0aGUgZnJvbnQgb2YgdGhlIGFyZ3VtZW50c1xuICAgICAgICBhcmdzLnVuc2hpZnQoZXZlbnQsIGRlbHRhLCBkZWx0YVgsIGRlbHRhWSk7XG5cbiAgICAgICAgLy8gQ2xlYXJvdXQgbG93ZXN0RGVsdGEgYWZ0ZXIgc29tZXRpbWUgdG8gYmV0dGVyXG4gICAgICAgIC8vIGhhbmRsZSBtdWx0aXBsZSBkZXZpY2UgdHlwZXMgdGhhdCBnaXZlIGRpZmZlcmVudFxuICAgICAgICAvLyBhIGRpZmZlcmVudCBsb3dlc3REZWx0YVxuICAgICAgICAvLyBFeDogdHJhY2twYWQgPSAzIGFuZCBtb3VzZSB3aGVlbCA9IDEyMFxuICAgICAgICBpZiAobnVsbExvd2VzdERlbHRhVGltZW91dCkgeyBjbGVhclRpbWVvdXQobnVsbExvd2VzdERlbHRhVGltZW91dCk7IH1cbiAgICAgICAgbnVsbExvd2VzdERlbHRhVGltZW91dCA9IHNldFRpbWVvdXQobnVsbExvd2VzdERlbHRhLCAyMDApO1xuXG4gICAgICAgIHJldHVybiAoJC5ldmVudC5kaXNwYXRjaCB8fCAkLmV2ZW50LmhhbmRsZSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbnVsbExvd2VzdERlbHRhKCkge1xuICAgICAgICBsb3dlc3REZWx0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvdWxkQWRqdXN0T2xkRGVsdGFzKG9yZ0V2ZW50LCBhYnNEZWx0YSkge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIGFuIG9sZGVyIGV2ZW50IGFuZCB0aGUgZGVsdGEgaXMgZGl2aXNhYmxlIGJ5IDEyMCxcbiAgICAgICAgLy8gdGhlbiB3ZSBhcmUgYXNzdW1pbmcgdGhhdCB0aGUgYnJvd3NlciBpcyB0cmVhdGluZyB0aGlzIGFzIGFuXG4gICAgICAgIC8vIG9sZGVyIG1vdXNlIHdoZWVsIGV2ZW50IGFuZCB0aGF0IHdlIHNob3VsZCBkaXZpZGUgdGhlIGRlbHRhc1xuICAgICAgICAvLyBieSA0MCB0byB0cnkgYW5kIGdldCBhIG1vcmUgdXNhYmxlIGRlbHRhRmFjdG9yLlxuICAgICAgICAvLyBTaWRlIG5vdGUsIHRoaXMgYWN0dWFsbHkgaW1wYWN0cyB0aGUgcmVwb3J0ZWQgc2Nyb2xsIGRpc3RhbmNlXG4gICAgICAgIC8vIGluIG9sZGVyIGJyb3dzZXJzIGFuZCBjYW4gY2F1c2Ugc2Nyb2xsaW5nIHRvIGJlIHNsb3dlciB0aGFuIG5hdGl2ZS5cbiAgICAgICAgLy8gVHVybiB0aGlzIG9mZiBieSBzZXR0aW5nICQuZXZlbnQuc3BlY2lhbC5tb3VzZXdoZWVsLnNldHRpbmdzLmFkanVzdE9sZERlbHRhcyB0byBmYWxzZS5cbiAgICAgICAgcmV0dXJuIHNwZWNpYWwuc2V0dGluZ3MuYWRqdXN0T2xkRGVsdGFzICYmIG9yZ0V2ZW50LnR5cGUgPT09ICdtb3VzZXdoZWVsJyAmJiBhYnNEZWx0YSAlIDEyMCA9PT0gMDtcbiAgICB9XG5cbn0pKTtcbiIsIi8qIVxuICogalNjcm9sbFBhbmUgLSB2Mi4wLjIzIC0gMjAxNi0wMS0yOFxuICogaHR0cDovL2pzY3JvbGxwYW5lLmtlbHZpbmx1Y2suY29tL1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBLZWx2aW4gTHVja1xuICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBsaWNlbnNlcy5cbiAqL1xuXG4vLyBTY3JpcHQ6IGpTY3JvbGxQYW5lIC0gY3Jvc3MgYnJvd3NlciBjdXN0b21pc2FibGUgc2Nyb2xsYmFyc1xuLy9cbi8vICpWZXJzaW9uOiAyLjAuMjMsIExhc3QgdXBkYXRlZDogMjAxNi0wMS0yOCpcbi8vXG4vLyBQcm9qZWN0IEhvbWUgLSBodHRwOi8vanNjcm9sbHBhbmUua2VsdmlubHVjay5jb20vXG4vLyBHaXRIdWIgICAgICAgLSBodHRwOi8vZ2l0aHViLmNvbS92aXRjaC9qU2Nyb2xsUGFuZVxuLy8gU291cmNlICAgICAgIC0gaHR0cDovL2dpdGh1Yi5jb20vdml0Y2gvalNjcm9sbFBhbmUvcmF3L21hc3Rlci9zY3JpcHQvanF1ZXJ5LmpzY3JvbGxwYW5lLmpzXG4vLyAoTWluaWZpZWQpICAgLSBodHRwOi8vZ2l0aHViLmNvbS92aXRjaC9qU2Nyb2xsUGFuZS9yYXcvbWFzdGVyL3NjcmlwdC9qcXVlcnkuanNjcm9sbHBhbmUubWluLmpzXG4vL1xuLy8gQWJvdXQ6IExpY2Vuc2Vcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTQgS2VsdmluIEx1Y2tcbi8vIER1YWwgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBvciBHUEwgVmVyc2lvbiAyIGxpY2Vuc2VzLlxuLy8gaHR0cDovL2pzY3JvbGxwYW5lLmtlbHZpbmx1Y2suY29tL01JVC1MSUNFTlNFLnR4dFxuLy8gaHR0cDovL2pzY3JvbGxwYW5lLmtlbHZpbmx1Y2suY29tL0dQTC1MSUNFTlNFLnR4dFxuLy9cbi8vIEFib3V0OiBFeGFtcGxlc1xuLy9cbi8vIEFsbCBleGFtcGxlcyBhbmQgZGVtb3MgYXJlIGF2YWlsYWJsZSB0aHJvdWdoIHRoZSBqU2Nyb2xsUGFuZSBleGFtcGxlIHNpdGUgYXQ6XG4vLyBodHRwOi8vanNjcm9sbHBhbmUua2VsdmlubHVjay5jb20vXG4vL1xuLy8gQWJvdXQ6IFN1cHBvcnQgYW5kIFRlc3Rpbmdcbi8vXG4vLyBUaGlzIHBsdWdpbiBpcyB0ZXN0ZWQgb24gdGhlIGJyb3dzZXJzIGJlbG93IGFuZCBoYXMgYmVlbiBmb3VuZCB0byB3b3JrIHJlbGlhYmx5IG9uIHRoZW0uIElmIHlvdSBydW5cbi8vIGludG8gYSBwcm9ibGVtIG9uIG9uZSBvZiB0aGUgc3VwcG9ydGVkIGJyb3dzZXJzIHRoZW4gcGxlYXNlIHZpc2l0IHRoZSBzdXBwb3J0IHNlY3Rpb24gb24gdGhlIGpTY3JvbGxQYW5lXG4vLyB3ZWJzaXRlIChodHRwOi8vanNjcm9sbHBhbmUua2VsdmlubHVjay5jb20vKSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBnZXR0aW5nIHN1cHBvcnQuIFlvdSBhcmUgYWxzb1xuLy8gd2VsY29tZSB0byBmb3JrIHRoZSBwcm9qZWN0IG9uIEdpdEh1YiBpZiB5b3UgY2FuIGNvbnRyaWJ1dGUgYSBmaXggZm9yIGEgZ2l2ZW4gaXNzdWUuXG4vL1xuLy8galF1ZXJ5IFZlcnNpb25zIC0gdGVzdGVkIGluIDEuNC4yKyAtIHJlcG9ydGVkIHRvIHdvcmsgaW4gMS4zLnhcbi8vIEJyb3dzZXJzIFRlc3RlZCAtIEZpcmVmb3ggMy42LjgsIFNhZmFyaSA1LCBPcGVyYSAxMC42LCBDaHJvbWUgNS4wLCBJRSA2LCA3LCA4XG4vL1xuLy8gQWJvdXQ6IFJlbGVhc2UgSGlzdG9yeVxuLy9cbi8vIDIuMC4yMyAtICgyMDE2LTAxLTI4KSBWYXJpb3VzIFxuLy8gMi4wLjIyIC0gKDIwMTUtMDQtMjUpIFJlc29sdmUgYSBtZW1vcnkgbGVhayBkdWUgdG8gYW4gZXZlbnQgaGFuZGxlciB0aGF0IGlzbid0IGNsZWFuZWQgdXAgaW4gZGVzdHJveSAodGhhbmtzIEB0aW1qbmgpXG4vLyAyLjAuMjEgLSAoMjAxNS0wMi0yNCkgU2ltcGxpZnkgVU1EIHBhdHRlcm46IGZpeGVzIGJyb3dzZXJpZnkgd2hlbiBsb2FkaW5nIGpRdWVyeSBvdXRzaWRlIG9mIGJ1bmRsZVxuLy8gMi4wLjIwIC0gKDIwMTQtMTAtMjMpIEFkZHMgQU1EIHN1cHBvcnQgKHRoYW5rcyBAY2FybG9zcmJlcnRvKSBhbmQgc3VwcG9ydCBmb3Igb3ZlcmZsb3cteC9vdmVyZmxvdy15ICh0aGFua3MgQGRhcmltcHVsc28pXG4vLyAyLjAuMTkgLSAoMjAxMy0xMS0xNikgQ2hhbmdlcyBmb3IgbW9yZSByZWxpYWJsZSBzY3JvbGwgYW1vdW50IHdpdGggbGF0ZXN0IG1vdXNld2hlZWwgcGx1Z2luICh0aGFua3MgQGJyYW5kb25hYXJvbilcbi8vIDIuMC4xOCAtICgyMDEzLTEwLTIzKSBGaXggZm9yIGlzc3VlIHdpdGggZ3V0dGVycyBhbmQgc2Nyb2xsVG9FbGVtZW50ICh0aGFua3MgQER1Yml5KVxuLy8gMi4wLjE3IC0gKDIwMTMtMDgtMTcpIFdvcmtpbmcgY29ycmVjdGx5IHdoZW4gYm94LXNpemluZyBpcyBzZXQgdG8gYm9yZGVyLWJveCAodGhhbmtzIEBwaWVodClcbi8vIDIuMC4xNiAtICgyMDEzLTA3LTMwKSBSZXNldHRpbmcgbGVmdCBwb3NpdGlvbiB3aGVuIHNjcm9sbCBpcyByZW1vdmVkLiBGaXhlcyAjMTg5XG4vLyAyLjAuMTUgLSAoMjAxMy0wNy0yOSkgRml4ZWQgaXNzdWUgd2l0aCBzY3JvbGxUb0VsZW1lbnQgd2hlcmUgdGhlIGRlc3RYIGFuZCBkZXN0WSBhcmUgdW5kZWZpbmVkLlxuLy8gMi4wLjE0IC0gKDIwMTMtMDUtMDEpIFVwZGF0ZWQgdG8gbW9zdCByZWNlbnQgbW91c2Ugd2hlZWwgcGx1Z2luIChzZWUgIzEwNikgYW5kIHJlbGF0ZWQgY2hhbmdlcyBmb3Igc2Vuc2libGUgc2Nyb2xsIHNwZWVkXG4vLyAyLjAuMTMgLSAoMjAxMy0wNS0wMSkgU3dpdGNoZWQgdG8gc2VtdmVyIGNvbXBhdGlibGUgdmVyc2lvbiBuYW1lXG4vLyAyLjAuMGJldGExMiAtICgyMDEyLTA5LTI3KSBmaXggZm9yIGpRdWVyeSAxLjgrXG4vLyAyLjAuMGJldGExMSAtICgyMDEyLTA1LTE0KVxuLy8gMi4wLjBiZXRhMTAgLSAoMjAxMS0wNC0xNykgY2xlYW5lciByZXF1aXJlZCBzaXplIGNhbGN1bGF0aW9uLCBpbXByb3ZlZCBrZXlib2FyZCBzdXBwb3J0LCBzdGlja1RvQm90dG9tL0xlZnQsIG90aGVyIHNtYWxsIGZpeGVzXG4vLyAyLjAuMGJldGE5IC0gKDIwMTEtMDEtMzEpIG5ldyBBUEkgbWV0aG9kcywgYnVnIGZpeGVzIGFuZCBjb3JyZWN0IGtleWJvYXJkIHN1cHBvcnQgZm9yIEZGL09TWFxuLy8gMi4wLjBiZXRhOCAtICgyMDExLTAxLTI5KSB0b3VjaHNjcmVlbiBzdXBwb3J0LCBpbXByb3ZlZCBrZXlib2FyZCBzdXBwb3J0XG4vLyAyLjAuMGJldGE3IC0gKDIwMTEtMDEtMjMpIHNjcm9sbCBzcGVlZCBjb25zaXN0ZW50ICh0aGFua3MgQWl2byBQYWFzKVxuLy8gMi4wLjBiZXRhNiAtICgyMDEwLTEyLTA3KSBzY3JvbGxUb0VsZW1lbnQgaG9yaXpvbnRhbCBzdXBwb3J0XG4vLyAyLjAuMGJldGE1IC0gKDIwMTAtMTAtMTgpIGpRdWVyeSAxLjQuMyBzdXBwb3J0LCB2YXJpb3VzIGJ1ZyBmaXhlc1xuLy8gMi4wLjBiZXRhNCAtICgyMDEwLTA5LTE3KSBjbGlja09uVHJhY2sgc3VwcG9ydCwgYnVnIGZpeGVzXG4vLyAyLjAuMGJldGEzIC0gKDIwMTAtMDgtMjcpIEhvcml6b250YWwgbW91c2V3aGVlbCwgbXdoZWVsSW50ZW50LCBrZXlib2FyZCBzdXBwb3J0LCBidWcgZml4ZXNcbi8vIDIuMC4wYmV0YTIgLSAoMjAxMC0wOC0yMSkgQnVnIGZpeGVzXG4vLyAyLjAuMGJldGExIC0gKDIwMTAtMDgtMTcpIFJld3JpdGUgdG8gZm9sbG93IG1vZGVybiBiZXN0IHByYWN0aWNlcyBhbmQgZW5hYmxlIGhvcml6b250YWwgc2Nyb2xsaW5nLCBpbml0aWFsbHkgaGlkZGVuXG4vL1x0XHRcdFx0XHRcdFx0IGVsZW1lbnRzIGFuZCBkeW5hbWljYWxseSBzaXplZCBlbGVtZW50cy5cbi8vIDEueCAtICgyMDA2LTEyLTMxIC0gMjAxMC0wNy0zMSkgSW5pdGlhbCB2ZXJzaW9uLCBob3N0ZWQgYXQgZ29vZ2xlY29kZSwgZGVwcmVjYXRlZFxuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgaWYgKCB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAvLyBOb2RlL0NvbW1vbkpTIHN0eWxlIGZvciBCcm93c2VyaWZ5XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICB9IGVsc2Uge1xuICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gIH1cbn0oZnVuY3Rpb24oJCl7XG5cblx0JC5mbi5qU2Nyb2xsUGFuZSA9IGZ1bmN0aW9uKHNldHRpbmdzKVxuXHR7XG5cdFx0Ly8gSlNjcm9sbFBhbmUgXCJjbGFzc1wiIC0gcHVibGljIG1ldGhvZHMgYXJlIGF2YWlsYWJsZSB0aHJvdWdoICQoJ3NlbGVjdG9yJykuZGF0YSgnanNwJylcblx0XHRmdW5jdGlvbiBKU2Nyb2xsUGFuZShlbGVtLCBzKVxuXHRcdHtcblx0XHRcdHZhciBzZXR0aW5ncywganNwID0gdGhpcywgcGFuZSwgcGFuZVdpZHRoLCBwYW5lSGVpZ2h0LCBjb250YWluZXIsIHNjcm9sbENvbnRhaW5lciwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0LFxuXHRcdFx0XHRwZXJjZW50SW5WaWV3SCwgcGVyY2VudEluVmlld1YsIGlzU2Nyb2xsYWJsZVYsIGlzU2Nyb2xsYWJsZUgsIHZlcnRpY2FsRHJhZywgZHJhZ01heFksXG5cdFx0XHRcdHZlcnRpY2FsRHJhZ1Bvc2l0aW9uLCBob3Jpem9udGFsRHJhZywgZHJhZ01heFgsIGhvcml6b250YWxEcmFnUG9zaXRpb24sXG5cdFx0XHRcdHZlcnRpY2FsQmFyLCB2ZXJ0aWNhbFRyYWNrLCBzY3JvbGxiYXJXaWR0aCwgdmVydGljYWxUcmFja0hlaWdodCwgdmVydGljYWxEcmFnSGVpZ2h0LCBhcnJvd1VwLCBhcnJvd0Rvd24sXG5cdFx0XHRcdGhvcml6b250YWxCYXIsIGhvcml6b250YWxUcmFjaywgaG9yaXpvbnRhbFRyYWNrV2lkdGgsIGhvcml6b250YWxEcmFnV2lkdGgsIGFycm93TGVmdCwgYXJyb3dSaWdodCxcblx0XHRcdFx0cmVpbml0aWFsaXNlSW50ZXJ2YWwsIG9yaWdpbmFsUGFkZGluZywgb3JpZ2luYWxQYWRkaW5nVG90YWxXaWR0aCwgcHJldmlvdXNDb250ZW50V2lkdGgsXG5cdFx0XHRcdHdhc0F0VG9wID0gdHJ1ZSwgd2FzQXRMZWZ0ID0gdHJ1ZSwgd2FzQXRCb3R0b20gPSBmYWxzZSwgd2FzQXRSaWdodCA9IGZhbHNlLFxuXHRcdFx0XHRvcmlnaW5hbEVsZW1lbnQgPSBlbGVtLmNsb25lKGZhbHNlLCBmYWxzZSkuZW1wdHkoKSxcblx0XHRcdFx0bXdFdmVudCA9ICQuZm4ubXdoZWVsSW50ZW50ID8gJ213aGVlbEludGVudC5qc3AnIDogJ21vdXNld2hlZWwuanNwJztcblxuXHRcdFx0aWYgKGVsZW0uY3NzKCdib3gtc2l6aW5nJykgPT09ICdib3JkZXItYm94Jykge1xuXHRcdFx0XHRvcmlnaW5hbFBhZGRpbmcgPSAwO1xuXHRcdFx0XHRvcmlnaW5hbFBhZGRpbmdUb3RhbFdpZHRoID0gMDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9yaWdpbmFsUGFkZGluZyA9IGVsZW0uY3NzKCdwYWRkaW5nVG9wJykgKyAnICcgK1xuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5jc3MoJ3BhZGRpbmdSaWdodCcpICsgJyAnICtcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW0uY3NzKCdwYWRkaW5nQm90dG9tJykgKyAnICcgK1xuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5jc3MoJ3BhZGRpbmdMZWZ0Jyk7XG5cdFx0XHRcdG9yaWdpbmFsUGFkZGluZ1RvdGFsV2lkdGggPSAocGFyc2VJbnQoZWxlbS5jc3MoJ3BhZGRpbmdMZWZ0JyksIDEwKSB8fCAwKSArXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KHBhcnNlSW50KGVsZW0uY3NzKCdwYWRkaW5nUmlnaHQnKSwgMTApIHx8IDApO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBpbml0aWFsaXNlKHMpXG5cdFx0XHR7XG5cblx0XHRcdFx0dmFyIC8qZmlyc3RDaGlsZCwgbGFzdENoaWxkLCAqL2lzTWFpbnRhaW5pbmdQb3NpdG9uLCBsYXN0Q29udGVudFgsIGxhc3RDb250ZW50WSxcblx0XHRcdFx0XHRcdGhhc0NvbnRhaW5pbmdTcGFjZUNoYW5nZWQsIG9yaWdpbmFsU2Nyb2xsVG9wLCBvcmlnaW5hbFNjcm9sbExlZnQsXG5cdFx0XHRcdFx0XHRtYWludGFpbkF0Qm90dG9tID0gZmFsc2UsIG1haW50YWluQXRSaWdodCA9IGZhbHNlO1xuXG5cdFx0XHRcdHNldHRpbmdzID0gcztcblxuXHRcdFx0XHRpZiAocGFuZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0b3JpZ2luYWxTY3JvbGxUb3AgPSBlbGVtLnNjcm9sbFRvcCgpO1xuXHRcdFx0XHRcdG9yaWdpbmFsU2Nyb2xsTGVmdCA9IGVsZW0uc2Nyb2xsTGVmdCgpO1xuXG5cdFx0XHRcdFx0ZWxlbS5jc3MoXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcblx0XHRcdFx0XHRcdFx0cGFkZGluZzogMFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Ly8gVE9ETzogRGVhbCB3aXRoIHdoZXJlIHdpZHRoLyBoZWlnaHQgaXMgMCBhcyBpdCBwcm9iYWJseSBtZWFucyB0aGUgZWxlbWVudCBpcyBoaWRkZW4gYW5kIHdlIHNob3VsZFxuXHRcdFx0XHRcdC8vIGNvbWUgYmFjayB0byBpdCBsYXRlciBhbmQgY2hlY2sgb25jZSBpdCBpcyB1bmhpZGRlbi4uLlxuXHRcdFx0XHRcdHBhbmVXaWR0aCA9IGVsZW0uaW5uZXJXaWR0aCgpICsgb3JpZ2luYWxQYWRkaW5nVG90YWxXaWR0aDtcblx0XHRcdFx0XHRwYW5lSGVpZ2h0ID0gZWxlbS5pbm5lckhlaWdodCgpO1xuXG5cdFx0XHRcdFx0ZWxlbS53aWR0aChwYW5lV2lkdGgpO1xuXG5cdFx0XHRcdFx0cGFuZSA9ICQoJzxkaXYgY2xhc3M9XCJqc3BQYW5lXCIgLz4nKS5jc3MoJ3BhZGRpbmcnLCBvcmlnaW5hbFBhZGRpbmcpLmFwcGVuZChlbGVtLmNoaWxkcmVuKCkpO1xuXHRcdFx0XHRcdGNvbnRhaW5lciA9ICQoJzxkaXYgY2xhc3M9XCJqc3BDb250YWluZXJcIiAvPicpXG5cdFx0XHRcdFx0XHQuY3NzKHtcblx0XHRcdFx0XHRcdFx0J3dpZHRoJzogcGFuZVdpZHRoICsgJ3B4Jyxcblx0XHRcdFx0XHRcdFx0J2hlaWdodCc6IHBhbmVIZWlnaHQgKyAncHgnXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0KS5hcHBlbmQocGFuZSkuYXBwZW5kVG8oZWxlbSk7XG5cblx0XHRcdFx0XHRzY3JvbGxDb250YWluZXIgPSBlbGVtLnBhcmVudCgnLnNjcm9sbC13cmFwcGVyJykuZmluZCgnLnNjcm9sbC1jb250YWluZXInKTtcblx0XHRcdFx0XHQvKlxuXHRcdFx0XHRcdC8vIE1vdmUgYW55IG1hcmdpbnMgZnJvbSB0aGUgZmlyc3QgYW5kIGxhc3QgY2hpbGRyZW4gdXAgdG8gdGhlIGNvbnRhaW5lciBzbyB0aGV5IGNhbiBzdGlsbFxuXHRcdFx0XHRcdC8vIGNvbGxhcHNlIHdpdGggbmVpZ2hib3VyaW5nIGVsZW1lbnRzIGFzIHRoZXkgd291bGQgYmVmb3JlIGpTY3JvbGxQYW5lXG5cdFx0XHRcdFx0Zmlyc3RDaGlsZCA9IHBhbmUuZmluZCgnOmZpcnN0LWNoaWxkJyk7XG5cdFx0XHRcdFx0bGFzdENoaWxkID0gcGFuZS5maW5kKCc6bGFzdC1jaGlsZCcpO1xuXHRcdFx0XHRcdGVsZW0uY3NzKFxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHQnbWFyZ2luLXRvcCc6IGZpcnN0Q2hpbGQuY3NzKCdtYXJnaW4tdG9wJyksXG5cdFx0XHRcdFx0XHRcdCdtYXJnaW4tYm90dG9tJzogbGFzdENoaWxkLmNzcygnbWFyZ2luLWJvdHRvbScpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRmaXJzdENoaWxkLmNzcygnbWFyZ2luLXRvcCcsIDApO1xuXHRcdFx0XHRcdGxhc3RDaGlsZC5jc3MoJ21hcmdpbi1ib3R0b20nLCAwKTtcblx0XHRcdFx0XHQqL1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0uY3NzKCd3aWR0aCcsICcnKTtcblxuXHRcdFx0XHRcdG1haW50YWluQXRCb3R0b20gPSBzZXR0aW5ncy5zdGlja1RvQm90dG9tICYmIGlzQ2xvc2VUb0JvdHRvbSgpO1xuXHRcdFx0XHRcdG1haW50YWluQXRSaWdodCAgPSBzZXR0aW5ncy5zdGlja1RvUmlnaHQgICYmIGlzQ2xvc2VUb1JpZ2h0KCk7XG5cblx0XHRcdFx0XHRoYXNDb250YWluaW5nU3BhY2VDaGFuZ2VkID0gZWxlbS5pbm5lcldpZHRoKCkgKyBvcmlnaW5hbFBhZGRpbmdUb3RhbFdpZHRoICE9IHBhbmVXaWR0aCB8fCBlbGVtLm91dGVySGVpZ2h0KCkgIT0gcGFuZUhlaWdodDtcblxuXHRcdFx0XHRcdGlmIChoYXNDb250YWluaW5nU3BhY2VDaGFuZ2VkKSB7XG5cdFx0XHRcdFx0XHRwYW5lV2lkdGggPSBlbGVtLmlubmVyV2lkdGgoKSArIG9yaWdpbmFsUGFkZGluZ1RvdGFsV2lkdGg7XG5cdFx0XHRcdFx0XHRwYW5lSGVpZ2h0ID0gZWxlbS5pbm5lckhlaWdodCgpO1xuXHRcdFx0XHRcdFx0Y29udGFpbmVyLmNzcyh7XG5cdFx0XHRcdFx0XHRcdHdpZHRoOiBwYW5lV2lkdGggKyAncHgnLFxuXHRcdFx0XHRcdFx0XHRoZWlnaHQ6IHBhbmVIZWlnaHQgKyAncHgnXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBJZiBub3RoaW5nIGNoYW5nZWQgc2luY2UgbGFzdCBjaGVjay4uLlxuXHRcdFx0XHRcdGlmICghaGFzQ29udGFpbmluZ1NwYWNlQ2hhbmdlZCAmJiBwcmV2aW91c0NvbnRlbnRXaWR0aCA9PSBjb250ZW50V2lkdGggJiYgcGFuZS5vdXRlckhlaWdodCgpID09IGNvbnRlbnRIZWlnaHQpIHtcblx0XHRcdFx0XHRcdGVsZW0ud2lkdGgocGFuZVdpZHRoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHJldmlvdXNDb250ZW50V2lkdGggPSBjb250ZW50V2lkdGg7XG5cblx0XHRcdFx0XHRwYW5lLmNzcygnd2lkdGgnLCAnJyk7XG5cdFx0XHRcdFx0ZWxlbS53aWR0aChwYW5lV2lkdGgpO1xuXG5cdFx0XHRcdFx0c2Nyb2xsQ29udGFpbmVyLmZpbmQoJz4uanNwVmVydGljYWxCYXIsPi5qc3BIb3Jpem9udGFsQmFyJykucmVtb3ZlKCkuZW5kKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRwYW5lLmNzcygnb3ZlcmZsb3cnLCAnYXV0bycpO1xuXHRcdFx0XHRpZiAocy5jb250ZW50V2lkdGgpIHtcblx0XHRcdFx0XHRjb250ZW50V2lkdGggPSBzLmNvbnRlbnRXaWR0aDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250ZW50V2lkdGggPSBwYW5lWzBdLnNjcm9sbFdpZHRoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRlbnRIZWlnaHQgPSBwYW5lWzBdLnNjcm9sbEhlaWdodDtcblx0XHRcdFx0cGFuZS5jc3MoJ292ZXJmbG93JywgJycpO1xuXG5cdFx0XHRcdHBlcmNlbnRJblZpZXdIID0gY29udGVudFdpZHRoIC8gcGFuZVdpZHRoO1xuXHRcdFx0XHRwZXJjZW50SW5WaWV3ViA9IGNvbnRlbnRIZWlnaHQgLyBwYW5lSGVpZ2h0O1xuXHRcdFx0XHRpc1Njcm9sbGFibGVWID0gcGVyY2VudEluVmlld1YgPiAxO1xuXG5cdFx0XHRcdGlzU2Nyb2xsYWJsZUggPSBwZXJjZW50SW5WaWV3SCA+IDE7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhwYW5lV2lkdGgsIHBhbmVIZWlnaHQsIGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCwgcGVyY2VudEluVmlld0gsIHBlcmNlbnRJblZpZXdWLCBpc1Njcm9sbGFibGVILCBpc1Njcm9sbGFibGVWKTtcblxuXHRcdFx0XHRpZiAoIShpc1Njcm9sbGFibGVIIHx8IGlzU2Nyb2xsYWJsZVYpKSB7XG5cdFx0XHRcdFx0ZWxlbS5yZW1vdmVDbGFzcygnanNwU2Nyb2xsYWJsZScpO1xuXHRcdFx0XHRcdHBhbmUuY3NzKHtcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG5cdFx0XHRcdFx0XHR3aWR0aDogY29udGFpbmVyLndpZHRoKCkgLSBvcmlnaW5hbFBhZGRpbmdUb3RhbFdpZHRoXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0cmVtb3ZlTW91c2V3aGVlbCgpO1xuXHRcdFx0XHRcdHJlbW92ZUZvY3VzSGFuZGxlcigpO1xuXHRcdFx0XHRcdHJlbW92ZUtleWJvYXJkTmF2KCk7XG5cdFx0XHRcdFx0cmVtb3ZlQ2xpY2tPblRyYWNrKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbS5hZGRDbGFzcygnanNwU2Nyb2xsYWJsZScpO1xuXG5cdFx0XHRcdFx0aXNNYWludGFpbmluZ1Bvc2l0b24gPSBzZXR0aW5ncy5tYWludGFpblBvc2l0aW9uICYmICh2ZXJ0aWNhbERyYWdQb3NpdGlvbiB8fCBob3Jpem9udGFsRHJhZ1Bvc2l0aW9uKTtcblx0XHRcdFx0XHRpZiAoaXNNYWludGFpbmluZ1Bvc2l0b24pIHtcblx0XHRcdFx0XHRcdGxhc3RDb250ZW50WCA9IGNvbnRlbnRQb3NpdGlvblgoKTtcblx0XHRcdFx0XHRcdGxhc3RDb250ZW50WSA9IGNvbnRlbnRQb3NpdGlvblkoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpbml0aWFsaXNlVmVydGljYWxTY3JvbGwoKTtcblx0XHRcdFx0XHRpbml0aWFsaXNlSG9yaXpvbnRhbFNjcm9sbCgpO1xuXHRcdFx0XHRcdHJlc2l6ZVNjcm9sbGJhcnMoKTtcblxuXHRcdFx0XHRcdGlmIChpc01haW50YWluaW5nUG9zaXRvbikge1xuXHRcdFx0XHRcdFx0c2Nyb2xsVG9YKG1haW50YWluQXRSaWdodCAgPyAoY29udGVudFdpZHRoICAtIHBhbmVXaWR0aCApIDogbGFzdENvbnRlbnRYLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRzY3JvbGxUb1kobWFpbnRhaW5BdEJvdHRvbSA/IChjb250ZW50SGVpZ2h0IC0gcGFuZUhlaWdodCkgOiBsYXN0Q29udGVudFksIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpbml0Rm9jdXNIYW5kbGVyKCk7XG5cdFx0XHRcdFx0aW5pdE1vdXNld2hlZWwoKTtcblx0XHRcdFx0XHRpbml0VG91Y2goKTtcblxuXHRcdFx0XHRcdGlmIChzZXR0aW5ncy5lbmFibGVLZXlib2FyZE5hdmlnYXRpb24pIHtcblx0XHRcdFx0XHRcdGluaXRLZXlib2FyZE5hdigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2V0dGluZ3MuY2xpY2tPblRyYWNrKSB7XG5cdFx0XHRcdFx0XHRpbml0Q2xpY2tPblRyYWNrKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b2JzZXJ2ZUhhc2goKTtcblx0XHRcdFx0XHRpZiAoc2V0dGluZ3MuaGlqYWNrSW50ZXJuYWxMaW5rcykge1xuXHRcdFx0XHRcdFx0aGlqYWNrSW50ZXJuYWxMaW5rcygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChzZXR0aW5ncy5hdXRvUmVpbml0aWFsaXNlICYmICFyZWluaXRpYWxpc2VJbnRlcnZhbCkge1xuXHRcdFx0XHRcdHJlaW5pdGlhbGlzZUludGVydmFsID0gc2V0SW50ZXJ2YWwoXG5cdFx0XHRcdFx0XHRmdW5jdGlvbigpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGluaXRpYWxpc2Uoc2V0dGluZ3MpO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHNldHRpbmdzLmF1dG9SZWluaXRpYWxpc2VEZWxheVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIXNldHRpbmdzLmF1dG9SZWluaXRpYWxpc2UgJiYgcmVpbml0aWFsaXNlSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRjbGVhckludGVydmFsKHJlaW5pdGlhbGlzZUludGVydmFsKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG9yaWdpbmFsU2Nyb2xsVG9wICYmIGVsZW0uc2Nyb2xsVG9wKDApICYmIHNjcm9sbFRvWShvcmlnaW5hbFNjcm9sbFRvcCwgZmFsc2UpO1xuXHRcdFx0XHRvcmlnaW5hbFNjcm9sbExlZnQgJiYgZWxlbS5zY3JvbGxMZWZ0KDApICYmIHNjcm9sbFRvWChvcmlnaW5hbFNjcm9sbExlZnQsIGZhbHNlKTtcblxuXHRcdFx0XHRlbGVtLnRyaWdnZXIoJ2pzcC1pbml0aWFsaXNlZCcsIFtpc1Njcm9sbGFibGVIIHx8IGlzU2Nyb2xsYWJsZVZdKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gaW5pdGlhbGlzZVZlcnRpY2FsU2Nyb2xsKClcblx0XHRcdHtcblx0XHRcdFx0aWYgKGlzU2Nyb2xsYWJsZVYpIHtcblxuXHRcdFx0XHRcdHNjcm9sbENvbnRhaW5lci5hcHBlbmQoXG5cdFx0XHRcdFx0XHQkKCc8ZGl2IGNsYXNzPVwianNwVmVydGljYWxCYXJcIiAvPicpLmFwcGVuZChcblx0XHRcdFx0XHRcdFx0JCgnPGRpdiBjbGFzcz1cImpzcENhcCBqc3BDYXBUb3BcIiAvPicpLFxuXHRcdFx0XHRcdFx0XHQkKCc8ZGl2IGNsYXNzPVwianNwVHJhY2tcIiAvPicpLmFwcGVuZChcblx0XHRcdFx0XHRcdFx0XHQkKCc8ZGl2IGNsYXNzPVwianNwRHJhZ1wiIC8+JykuYXBwZW5kKFxuXHRcdFx0XHRcdFx0XHRcdFx0JCgnPGRpdiBjbGFzcz1cImpzcERyYWdUb3BcIiAvPicpLFxuXHRcdFx0XHRcdFx0XHRcdFx0JCgnPGRpdiBjbGFzcz1cImpzcERyYWdCb3R0b21cIiAvPicpXG5cdFx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0XHQpLFxuXHRcdFx0XHRcdFx0XHQkKCc8ZGl2IGNsYXNzPVwianNwQ2FwIGpzcENhcEJvdHRvbVwiIC8+Jylcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0dmVydGljYWxCYXIgPSBzY3JvbGxDb250YWluZXIuZmluZCgnPi5qc3BWZXJ0aWNhbEJhcicpO1xuXHRcdFx0XHRcdHZlcnRpY2FsVHJhY2sgPSB2ZXJ0aWNhbEJhci5maW5kKCc+LmpzcFRyYWNrJyk7XG5cdFx0XHRcdFx0dmVydGljYWxEcmFnID0gdmVydGljYWxUcmFjay5maW5kKCc+LmpzcERyYWcnKTtcblxuXHRcdFx0XHRcdGlmIChzZXR0aW5ncy5zaG93QXJyb3dzKSB7XG5cdFx0XHRcdFx0XHRhcnJvd1VwID0gJCgnPGEgY2xhc3M9XCJqc3BBcnJvdyBqc3BBcnJvd1VwXCIgLz4nKS5iaW5kKFxuXHRcdFx0XHRcdFx0XHQnbW91c2Vkb3duLmpzcCcsIGdldEFycm93U2Nyb2xsKDAsIC0xKVxuXHRcdFx0XHRcdFx0KS5iaW5kKCdjbGljay5qc3AnLCBuaWwpO1xuXHRcdFx0XHRcdFx0YXJyb3dEb3duID0gJCgnPGEgY2xhc3M9XCJqc3BBcnJvdyBqc3BBcnJvd0Rvd25cIiAvPicpLmJpbmQoXG5cdFx0XHRcdFx0XHRcdCdtb3VzZWRvd24uanNwJywgZ2V0QXJyb3dTY3JvbGwoMCwgMSlcblx0XHRcdFx0XHRcdCkuYmluZCgnY2xpY2suanNwJywgbmlsKTtcblx0XHRcdFx0XHRcdGlmIChzZXR0aW5ncy5hcnJvd1Njcm9sbE9uSG92ZXIpIHtcblx0XHRcdFx0XHRcdFx0YXJyb3dVcC5iaW5kKCdtb3VzZW92ZXIuanNwJywgZ2V0QXJyb3dTY3JvbGwoMCwgLTEsIGFycm93VXApKTtcblx0XHRcdFx0XHRcdFx0YXJyb3dEb3duLmJpbmQoJ21vdXNlb3Zlci5qc3AnLCBnZXRBcnJvd1Njcm9sbCgwLCAxLCBhcnJvd0Rvd24pKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0YXBwZW5kQXJyb3dzKHZlcnRpY2FsVHJhY2ssIHNldHRpbmdzLnZlcnRpY2FsQXJyb3dQb3NpdGlvbnMsIGFycm93VXAsIGFycm93RG93bik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmVydGljYWxUcmFja0hlaWdodCA9IHBhbmVIZWlnaHQgLSA4MDtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQ29udGFpbmVyLmZpbmQoJz4uanNwVmVydGljYWxCYXI+LmpzcENhcDp2aXNpYmxlLD4uanNwVmVydGljYWxCYXI+LmpzcEFycm93JykuZWFjaChcblx0XHRcdFx0XHRcdGZ1bmN0aW9uKClcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0dmVydGljYWxUcmFja0hlaWdodCAtPSAkKHRoaXMpLm91dGVySGVpZ2h0KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0KTtcblxuXG5cdFx0XHRcdFx0dmVydGljYWxEcmFnLmhvdmVyKFxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24oKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR2ZXJ0aWNhbERyYWcuYWRkQ2xhc3MoJ2pzcEhvdmVyJyk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24oKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR2ZXJ0aWNhbERyYWcucmVtb3ZlQ2xhc3MoJ2pzcEhvdmVyJyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0KS5iaW5kKFxuXHRcdFx0XHRcdFx0J21vdXNlZG93bi5qc3AnLFxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24oZSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0Ly8gU3RvcCBJRSBmcm9tIGFsbG93aW5nIHRleHQgc2VsZWN0aW9uXG5cdFx0XHRcdFx0XHRcdCQoJ2h0bWwnKS5iaW5kKCdkcmFnc3RhcnQuanNwIHNlbGVjdHN0YXJ0LmpzcCcsIG5pbCk7XG5cblx0XHRcdFx0XHRcdFx0dmVydGljYWxEcmFnLmFkZENsYXNzKCdqc3BBY3RpdmUnKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgc3RhcnRZID0gZS5wYWdlWSAtIHZlcnRpY2FsRHJhZy5wb3NpdGlvbigpLnRvcDtcblxuXHRcdFx0XHRcdFx0XHQkKCdodG1sJykuYmluZChcblx0XHRcdFx0XHRcdFx0XHQnbW91c2Vtb3ZlLmpzcCcsXG5cdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oZSlcblx0XHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbkRyYWdZKGUucGFnZVkgLSBzdGFydFksIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdCkuYmluZCgnbW91c2V1cC5qc3AgbW91c2VsZWF2ZS5qc3AnLCBjYW5jZWxEcmFnKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0c2l6ZVZlcnRpY2FsU2Nyb2xsYmFyKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2l6ZVZlcnRpY2FsU2Nyb2xsYmFyKClcblx0XHRcdHtcblx0XHRcdFx0dmVydGljYWxUcmFjay5oZWlnaHQodmVydGljYWxUcmFja0hlaWdodCArICdweCcpO1xuXHRcdFx0XHR2ZXJ0aWNhbERyYWdQb3NpdGlvbiA9IDA7XG5cdFx0XHRcdHNjcm9sbGJhcldpZHRoID0gc2V0dGluZ3MudmVydGljYWxHdXR0ZXIgKyB2ZXJ0aWNhbFRyYWNrLm91dGVyV2lkdGgoKTtcblxuXHRcdFx0XHQvLyBNYWtlIHRoZSBwYW5lIHRoaW5uZXIgdG8gYWxsb3cgZm9yIHRoZSB2ZXJ0aWNhbCBzY3JvbGxiYXJcblx0XHRcdFx0cGFuZS53aWR0aChwYW5lV2lkdGggLSBzY3JvbGxiYXJXaWR0aCAtIG9yaWdpbmFsUGFkZGluZ1RvdGFsV2lkdGgpO1xuXG5cdFx0XHRcdC8vIEFkZCBtYXJnaW4gdG8gdGhlIGxlZnQgb2YgdGhlIHBhbmUgaWYgc2Nyb2xsYmFycyBhcmUgb24gdGhhdCBzaWRlICh0byBwb3NpdGlvblxuXHRcdFx0XHQvLyB0aGUgc2Nyb2xsYmFyIG9uIHRoZSBsZWZ0IG9yIHJpZ2h0IHNldCBpdCdzIGxlZnQgb3IgcmlnaHQgcHJvcGVydHkgaW4gQ1NTKVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGlmICh2ZXJ0aWNhbEJhci5wb3NpdGlvbigpLmxlZnQgPT09IDApIHtcblx0XHRcdFx0XHRcdHBhbmUuY3NzKCdtYXJnaW4tbGVmdCcsIHNjcm9sbGJhcldpZHRoICsgJ3B4Jyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBpbml0aWFsaXNlSG9yaXpvbnRhbFNjcm9sbCgpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChpc1Njcm9sbGFibGVIKSB7XG5cblx0XHRcdFx0XHRzY3JvbGxDb250YWluZXIuYXBwZW5kKFxuXHRcdFx0XHRcdFx0JCgnPGRpdiBjbGFzcz1cImpzcEhvcml6b250YWxCYXJcIiAvPicpLmFwcGVuZChcblx0XHRcdFx0XHRcdFx0JCgnPGRpdiBjbGFzcz1cImpzcENhcCBqc3BDYXBMZWZ0XCIgLz4nKSxcblx0XHRcdFx0XHRcdFx0JCgnPGRpdiBjbGFzcz1cImpzcFRyYWNrXCIgLz4nKS5hcHBlbmQoXG5cdFx0XHRcdFx0XHRcdFx0JCgnPGRpdiBjbGFzcz1cImpzcERyYWdcIiAvPicpLmFwcGVuZChcblx0XHRcdFx0XHRcdFx0XHRcdCQoJzxkaXYgY2xhc3M9XCJqc3BEcmFnTGVmdFwiIC8+JyksXG5cdFx0XHRcdFx0XHRcdFx0XHQkKCc8ZGl2IGNsYXNzPVwianNwRHJhZ1JpZ2h0XCIgLz4nKVxuXHRcdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRcdFx0JCgnPGRpdiBjbGFzcz1cImpzcENhcCBqc3BDYXBSaWdodFwiIC8+Jylcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0aG9yaXpvbnRhbEJhciA9IGNvbnRhaW5lci5maW5kKCc+LmpzcEhvcml6b250YWxCYXInKTtcblx0XHRcdFx0XHRob3Jpem9udGFsVHJhY2sgPSBob3Jpem9udGFsQmFyLmZpbmQoJz4uanNwVHJhY2snKTtcblx0XHRcdFx0XHRob3Jpem9udGFsRHJhZyA9IGhvcml6b250YWxUcmFjay5maW5kKCc+LmpzcERyYWcnKTtcblxuXHRcdFx0XHRcdGlmIChzZXR0aW5ncy5zaG93QXJyb3dzKSB7XG5cdFx0XHRcdFx0XHRhcnJvd0xlZnQgPSAkKCc8YSBjbGFzcz1cImpzcEFycm93IGpzcEFycm93TGVmdFwiIC8+JykuYmluZChcblx0XHRcdFx0XHRcdFx0J21vdXNlZG93bi5qc3AnLCBnZXRBcnJvd1Njcm9sbCgtMSwgMClcblx0XHRcdFx0XHRcdCkuYmluZCgnY2xpY2suanNwJywgbmlsKTtcblx0XHRcdFx0XHRcdGFycm93UmlnaHQgPSAkKCc8YSBjbGFzcz1cImpzcEFycm93IGpzcEFycm93UmlnaHRcIiAvPicpLmJpbmQoXG5cdFx0XHRcdFx0XHRcdCdtb3VzZWRvd24uanNwJywgZ2V0QXJyb3dTY3JvbGwoMSwgMClcblx0XHRcdFx0XHRcdCkuYmluZCgnY2xpY2suanNwJywgbmlsKTtcblx0XHRcdFx0XHRcdGlmIChzZXR0aW5ncy5hcnJvd1Njcm9sbE9uSG92ZXIpIHtcblx0XHRcdFx0XHRcdFx0YXJyb3dMZWZ0LmJpbmQoJ21vdXNlb3Zlci5qc3AnLCBnZXRBcnJvd1Njcm9sbCgtMSwgMCwgYXJyb3dMZWZ0KSk7XG5cdFx0XHRcdFx0XHRcdGFycm93UmlnaHQuYmluZCgnbW91c2VvdmVyLmpzcCcsIGdldEFycm93U2Nyb2xsKDEsIDAsIGFycm93UmlnaHQpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGFwcGVuZEFycm93cyhob3Jpem9udGFsVHJhY2ssIHNldHRpbmdzLmhvcml6b250YWxBcnJvd1Bvc2l0aW9ucywgYXJyb3dMZWZ0LCBhcnJvd1JpZ2h0KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRob3Jpem9udGFsRHJhZy5ob3Zlcihcblx0XHRcdFx0XHRcdGZ1bmN0aW9uKClcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0aG9yaXpvbnRhbERyYWcuYWRkQ2xhc3MoJ2pzcEhvdmVyJyk7XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24oKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRob3Jpem9udGFsRHJhZy5yZW1vdmVDbGFzcygnanNwSG92ZXInKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpLmJpbmQoXG5cdFx0XHRcdFx0XHQnbW91c2Vkb3duLmpzcCcsXG5cdFx0XHRcdFx0XHRmdW5jdGlvbihlKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHQvLyBTdG9wIElFIGZyb20gYWxsb3dpbmcgdGV4dCBzZWxlY3Rpb25cblx0XHRcdFx0XHRcdFx0JCgnaHRtbCcpLmJpbmQoJ2RyYWdzdGFydC5qc3Agc2VsZWN0c3RhcnQuanNwJywgbmlsKTtcblxuXHRcdFx0XHRcdFx0XHRob3Jpem9udGFsRHJhZy5hZGRDbGFzcygnanNwQWN0aXZlJyk7XG5cblx0XHRcdFx0XHRcdFx0dmFyIHN0YXJ0WCA9IGUucGFnZVggLSBob3Jpem9udGFsRHJhZy5wb3NpdGlvbigpLmxlZnQ7XG5cblx0XHRcdFx0XHRcdFx0JCgnaHRtbCcpLmJpbmQoXG5cdFx0XHRcdFx0XHRcdFx0J21vdXNlbW92ZS5qc3AnLFxuXHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKGUpXG5cdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0cG9zaXRpb25EcmFnWChlLnBhZ2VYIC0gc3RhcnRYLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHQpLmJpbmQoJ21vdXNldXAuanNwIG1vdXNlbGVhdmUuanNwJywgY2FuY2VsRHJhZyk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGhvcml6b250YWxUcmFja1dpZHRoID0gY29udGFpbmVyLmlubmVyV2lkdGgoKTtcblx0XHRcdFx0XHRzaXplSG9yaXpvbnRhbFNjcm9sbGJhcigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIHNpemVIb3Jpem9udGFsU2Nyb2xsYmFyKClcblx0XHRcdHtcbiAgICAgICAgICAgICAgICBzY3JvbGxDb250YWluZXIuZmluZCgnPi5qc3BIb3Jpem9udGFsQmFyPi5qc3BDYXA6dmlzaWJsZSw+LmpzcEhvcml6b250YWxCYXI+LmpzcEFycm93JykuZWFjaChcblx0XHRcdFx0XHRmdW5jdGlvbigpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aG9yaXpvbnRhbFRyYWNrV2lkdGggLT0gJCh0aGlzKS5vdXRlcldpZHRoKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGhvcml6b250YWxUcmFjay53aWR0aChob3Jpem9udGFsVHJhY2tXaWR0aCArICdweCcpO1xuXHRcdFx0XHRob3Jpem9udGFsRHJhZ1Bvc2l0aW9uID0gMDtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gcmVzaXplU2Nyb2xsYmFycygpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChpc1Njcm9sbGFibGVIICYmIGlzU2Nyb2xsYWJsZVYpIHtcblx0XHRcdFx0XHR2YXIgaG9yaXpvbnRhbFRyYWNrSGVpZ2h0ID0gaG9yaXpvbnRhbFRyYWNrLm91dGVySGVpZ2h0KCksXG5cdFx0XHRcdFx0XHR2ZXJ0aWNhbFRyYWNrV2lkdGggPSB2ZXJ0aWNhbFRyYWNrLm91dGVyV2lkdGgoKTtcblx0XHRcdFx0XHR2ZXJ0aWNhbFRyYWNrSGVpZ2h0IC09IGhvcml6b250YWxUcmFja0hlaWdodDtcblx0XHRcdFx0XHQkKGhvcml6b250YWxCYXIpLmZpbmQoJz4uanNwQ2FwOnZpc2libGUsPi5qc3BBcnJvdycpLmVhY2goXG5cdFx0XHRcdFx0XHRmdW5jdGlvbigpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdGhvcml6b250YWxUcmFja1dpZHRoICs9ICQodGhpcykub3V0ZXJXaWR0aCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0aG9yaXpvbnRhbFRyYWNrV2lkdGggLT0gdmVydGljYWxUcmFja1dpZHRoO1xuXHRcdFx0XHRcdHBhbmVIZWlnaHQgLT0gdmVydGljYWxUcmFja1dpZHRoO1xuXHRcdFx0XHRcdHBhbmVXaWR0aCAtPSBob3Jpem9udGFsVHJhY2tIZWlnaHQ7XG5cdFx0XHRcdFx0aG9yaXpvbnRhbFRyYWNrLnBhcmVudCgpLmFwcGVuZChcblx0XHRcdFx0XHRcdCQoJzxkaXYgY2xhc3M9XCJqc3BDb3JuZXJcIiAvPicpLmNzcygnd2lkdGgnLCBob3Jpem9udGFsVHJhY2tIZWlnaHQgKyAncHgnKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0c2l6ZVZlcnRpY2FsU2Nyb2xsYmFyKCk7XG5cdFx0XHRcdFx0c2l6ZUhvcml6b250YWxTY3JvbGxiYXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyByZWZsb3cgY29udGVudFxuXHRcdFx0XHRpZiAoaXNTY3JvbGxhYmxlSCkge1xuXHRcdFx0XHRcdHBhbmUud2lkdGgoKGNvbnRhaW5lci5vdXRlcldpZHRoKCkgLSBvcmlnaW5hbFBhZGRpbmdUb3RhbFdpZHRoKSArICdweCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRlbnRIZWlnaHQgPSBwYW5lLm91dGVySGVpZ2h0KCk7XG5cdFx0XHRcdHBlcmNlbnRJblZpZXdWID0gY29udGVudEhlaWdodCAvIHBhbmVIZWlnaHQ7XG5cblx0XHRcdFx0aWYgKGlzU2Nyb2xsYWJsZUgpIHtcblx0XHRcdFx0XHRob3Jpem9udGFsRHJhZ1dpZHRoID0gTWF0aC5jZWlsKDEgLyBwZXJjZW50SW5WaWV3SCAqIGhvcml6b250YWxUcmFja1dpZHRoKTtcblx0XHRcdFx0XHRpZiAoaG9yaXpvbnRhbERyYWdXaWR0aCA+IHNldHRpbmdzLmhvcml6b250YWxEcmFnTWF4V2lkdGgpIHtcblx0XHRcdFx0XHRcdGhvcml6b250YWxEcmFnV2lkdGggPSBzZXR0aW5ncy5ob3Jpem9udGFsRHJhZ01heFdpZHRoO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoaG9yaXpvbnRhbERyYWdXaWR0aCA8IHNldHRpbmdzLmhvcml6b250YWxEcmFnTWluV2lkdGgpIHtcblx0XHRcdFx0XHRcdGhvcml6b250YWxEcmFnV2lkdGggPSBzZXR0aW5ncy5ob3Jpem9udGFsRHJhZ01pbldpZHRoO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRob3Jpem9udGFsRHJhZy53aWR0aChob3Jpem9udGFsRHJhZ1dpZHRoICsgJ3B4Jyk7XG5cdFx0XHRcdFx0ZHJhZ01heFggPSBob3Jpem9udGFsVHJhY2tXaWR0aCAtIGhvcml6b250YWxEcmFnV2lkdGg7XG5cdFx0XHRcdFx0X3Bvc2l0aW9uRHJhZ1goaG9yaXpvbnRhbERyYWdQb3NpdGlvbik7IC8vIFRvIHVwZGF0ZSB0aGUgc3RhdGUgZm9yIHRoZSBhcnJvdyBidXR0b25zXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGlzU2Nyb2xsYWJsZVYpIHtcblx0XHRcdFx0XHR2ZXJ0aWNhbERyYWdIZWlnaHQgPSBNYXRoLmNlaWwoMSAvIHBlcmNlbnRJblZpZXdWICogdmVydGljYWxUcmFja0hlaWdodCk7XG5cdFx0XHRcdFx0aWYgKHZlcnRpY2FsRHJhZ0hlaWdodCA+IHNldHRpbmdzLnZlcnRpY2FsRHJhZ01heEhlaWdodCkge1xuXHRcdFx0XHRcdFx0dmVydGljYWxEcmFnSGVpZ2h0ID0gc2V0dGluZ3MudmVydGljYWxEcmFnTWF4SGVpZ2h0O1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodmVydGljYWxEcmFnSGVpZ2h0IDwgc2V0dGluZ3MudmVydGljYWxEcmFnTWluSGVpZ2h0KSB7XG5cdFx0XHRcdFx0XHR2ZXJ0aWNhbERyYWdIZWlnaHQgPSBzZXR0aW5ncy52ZXJ0aWNhbERyYWdNaW5IZWlnaHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZlcnRpY2FsRHJhZy5oZWlnaHQodmVydGljYWxEcmFnSGVpZ2h0ICsgJ3B4Jyk7XG5cdFx0XHRcdFx0ZHJhZ01heFkgPSB2ZXJ0aWNhbFRyYWNrSGVpZ2h0IC0gdmVydGljYWxEcmFnSGVpZ2h0O1xuXHRcdFx0XHRcdF9wb3NpdGlvbkRyYWdZKHZlcnRpY2FsRHJhZ1Bvc2l0aW9uKTsgLy8gVG8gdXBkYXRlIHRoZSBzdGF0ZSBmb3IgdGhlIGFycm93IGJ1dHRvbnNcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBhcHBlbmRBcnJvd3MoZWxlLCBwLCBhMSwgYTIpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBwMSA9IFwiYmVmb3JlXCIsIHAyID0gXCJhZnRlclwiLCBhVGVtcDtcblxuXHRcdFx0XHQvLyBTbmlmZiBmb3IgbWFjLi4uIElzIHRoZXJlIGEgYmV0dGVyIHdheSB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgYXJyb3dzIHdvdWxkIG5hdHVyYWxseSBhcHBlYXJcblx0XHRcdFx0Ly8gYXQgdGhlIHRvcCBvciB0aGUgYm90dG9tIG9mIHRoZSBiYXI/XG5cdFx0XHRcdGlmIChwID09IFwib3NcIikge1xuXHRcdFx0XHRcdHAgPSAvTWFjLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkgPyBcImFmdGVyXCIgOiBcInNwbGl0XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHAgPT0gcDEpIHtcblx0XHRcdFx0XHRwMiA9IHA7XG5cdFx0XHRcdH0gZWxzZSBpZiAocCA9PSBwMikge1xuXHRcdFx0XHRcdHAxID0gcDtcblx0XHRcdFx0XHRhVGVtcCA9IGExO1xuXHRcdFx0XHRcdGExID0gYTI7XG5cdFx0XHRcdFx0YTIgPSBhVGVtcDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZVtwMV0oYTEpW3AyXShhMik7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGdldEFycm93U2Nyb2xsKGRpclgsIGRpclksIGVsZSlcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGFycm93U2Nyb2xsKGRpclgsIGRpclksIHRoaXMsIGVsZSk7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBhcnJvd1Njcm9sbChkaXJYLCBkaXJZLCBhcnJvdywgZWxlKVxuXHRcdFx0e1xuXHRcdFx0XHRhcnJvdyA9ICQoYXJyb3cpLmFkZENsYXNzKCdqc3BBY3RpdmUnKTtcblxuXHRcdFx0XHR2YXIgZXZlLFxuXHRcdFx0XHRcdHNjcm9sbFRpbWVvdXQsXG5cdFx0XHRcdFx0aXNGaXJzdCA9IHRydWUsXG5cdFx0XHRcdFx0ZG9TY3JvbGwgPSBmdW5jdGlvbigpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWYgKGRpclggIT09IDApIHtcblx0XHRcdFx0XHRcdFx0anNwLnNjcm9sbEJ5WChkaXJYICogc2V0dGluZ3MuYXJyb3dCdXR0b25TcGVlZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoZGlyWSAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRqc3Auc2Nyb2xsQnlZKGRpclkgKiBzZXR0aW5ncy5hcnJvd0J1dHRvblNwZWVkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNjcm9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGRvU2Nyb2xsLCBpc0ZpcnN0ID8gc2V0dGluZ3MuaW5pdGlhbERlbGF5IDogc2V0dGluZ3MuYXJyb3dSZXBlYXRGcmVxKTtcblx0XHRcdFx0XHRcdGlzRmlyc3QgPSBmYWxzZTtcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdGRvU2Nyb2xsKCk7XG5cblx0XHRcdFx0ZXZlID0gZWxlID8gJ21vdXNlb3V0LmpzcCcgOiAnbW91c2V1cC5qc3AnO1xuXHRcdFx0XHRlbGUgPSBlbGUgfHwgJCgnaHRtbCcpO1xuXHRcdFx0XHRlbGUuYmluZChcblx0XHRcdFx0XHRldmUsXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGFycm93LnJlbW92ZUNsYXNzKCdqc3BBY3RpdmUnKTtcblx0XHRcdFx0XHRcdHNjcm9sbFRpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHNjcm9sbFRpbWVvdXQpO1xuXHRcdFx0XHRcdFx0c2Nyb2xsVGltZW91dCA9IG51bGw7XG5cdFx0XHRcdFx0XHRlbGUudW5iaW5kKGV2ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBpbml0Q2xpY2tPblRyYWNrKClcblx0XHRcdHtcblx0XHRcdFx0cmVtb3ZlQ2xpY2tPblRyYWNrKCk7XG5cdFx0XHRcdGlmIChpc1Njcm9sbGFibGVWKSB7XG5cdFx0XHRcdFx0dmVydGljYWxUcmFjay5iaW5kKFxuXHRcdFx0XHRcdFx0J21vdXNlZG93bi5qc3AnLFxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24oZSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0aWYgKGUub3JpZ2luYWxUYXJnZXQgPT09IHVuZGVmaW5lZCB8fCBlLm9yaWdpbmFsVGFyZ2V0ID09IGUuY3VycmVudFRhcmdldCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBjbGlja2VkVHJhY2sgPSAkKHRoaXMpLFxuXHRcdFx0XHRcdFx0XHRcdFx0b2Zmc2V0ID0gY2xpY2tlZFRyYWNrLm9mZnNldCgpLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uID0gZS5wYWdlWSAtIG9mZnNldC50b3AgLSB2ZXJ0aWNhbERyYWdQb3NpdGlvbixcblx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFRpbWVvdXQsXG5cdFx0XHRcdFx0XHRcdFx0XHRpc0ZpcnN0ID0gdHJ1ZSxcblx0XHRcdFx0XHRcdFx0XHRcdGRvU2Nyb2xsID0gZnVuY3Rpb24oKVxuXHRcdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgb2Zmc2V0ID0gY2xpY2tlZFRyYWNrLm9mZnNldCgpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvcyA9IGUucGFnZVkgLSBvZmZzZXQudG9wIC0gdmVydGljYWxEcmFnSGVpZ2h0IC8gMixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRjb250ZW50RHJhZ1kgPSBwYW5lSGVpZ2h0ICogc2V0dGluZ3Muc2Nyb2xsUGFnZVBlcmNlbnQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZHJhZ1kgPSBkcmFnTWF4WSAqIGNvbnRlbnREcmFnWSAvIChjb250ZW50SGVpZ2h0IC0gcGFuZUhlaWdodCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChkaXJlY3Rpb24gPCAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKHZlcnRpY2FsRHJhZ1Bvc2l0aW9uIC0gZHJhZ1kgPiBwb3MpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpzcC5zY3JvbGxCeVkoLWNvbnRlbnREcmFnWSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uRHJhZ1kocG9zKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZGlyZWN0aW9uID4gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICh2ZXJ0aWNhbERyYWdQb3NpdGlvbiArIGRyYWdZIDwgcG9zKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqc3Auc2Nyb2xsQnlZKGNvbnRlbnREcmFnWSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uRHJhZ1kocG9zKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FuY2VsQ2xpY2soKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0c2Nyb2xsVGltZW91dCA9IHNldFRpbWVvdXQoZG9TY3JvbGwsIGlzRmlyc3QgPyBzZXR0aW5ncy5pbml0aWFsRGVsYXkgOiBzZXR0aW5ncy50cmFja0NsaWNrUmVwZWF0RnJlcSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlzRmlyc3QgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRjYW5jZWxDbGljayA9IGZ1bmN0aW9uKClcblx0XHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0c2Nyb2xsVGltZW91dCAmJiBjbGVhclRpbWVvdXQoc2Nyb2xsVGltZW91dCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQkKGRvY3VtZW50KS51bmJpbmQoJ21vdXNldXAuanNwJywgY2FuY2VsQ2xpY2spO1xuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0XHRkb1Njcm9sbCgpO1xuXHRcdFx0XHRcdFx0XHRcdCQoZG9jdW1lbnQpLmJpbmQoJ21vdXNldXAuanNwJywgY2FuY2VsQ2xpY2spO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaXNTY3JvbGxhYmxlSCkge1xuXHRcdFx0XHRcdGhvcml6b250YWxUcmFjay5iaW5kKFxuXHRcdFx0XHRcdFx0J21vdXNlZG93bi5qc3AnLFxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24oZSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0aWYgKGUub3JpZ2luYWxUYXJnZXQgPT09IHVuZGVmaW5lZCB8fCBlLm9yaWdpbmFsVGFyZ2V0ID09IGUuY3VycmVudFRhcmdldCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBjbGlja2VkVHJhY2sgPSAkKHRoaXMpLFxuXHRcdFx0XHRcdFx0XHRcdFx0b2Zmc2V0ID0gY2xpY2tlZFRyYWNrLm9mZnNldCgpLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uID0gZS5wYWdlWCAtIG9mZnNldC5sZWZ0IC0gaG9yaXpvbnRhbERyYWdQb3NpdGlvbixcblx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFRpbWVvdXQsXG5cdFx0XHRcdFx0XHRcdFx0XHRpc0ZpcnN0ID0gdHJ1ZSxcblx0XHRcdFx0XHRcdFx0XHRcdGRvU2Nyb2xsID0gZnVuY3Rpb24oKVxuXHRcdFx0XHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YXIgb2Zmc2V0ID0gY2xpY2tlZFRyYWNrLm9mZnNldCgpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvcyA9IGUucGFnZVggLSBvZmZzZXQubGVmdCAtIGhvcml6b250YWxEcmFnV2lkdGggLyAyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnRlbnREcmFnWCA9IHBhbmVXaWR0aCAqIHNldHRpbmdzLnNjcm9sbFBhZ2VQZXJjZW50LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRyYWdYID0gZHJhZ01heFggKiBjb250ZW50RHJhZ1ggLyAoY29udGVudFdpZHRoIC0gcGFuZVdpZHRoKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGRpcmVjdGlvbiA8IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoaG9yaXpvbnRhbERyYWdQb3NpdGlvbiAtIGRyYWdYID4gcG9zKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqc3Auc2Nyb2xsQnlYKC1jb250ZW50RHJhZ1gpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbkRyYWdYKHBvcyk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGRpcmVjdGlvbiA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoaG9yaXpvbnRhbERyYWdQb3NpdGlvbiArIGRyYWdYIDwgcG9zKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqc3Auc2Nyb2xsQnlYKGNvbnRlbnREcmFnWCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHBvc2l0aW9uRHJhZ1gocG9zKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y2FuY2VsQ2xpY2soKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0c2Nyb2xsVGltZW91dCA9IHNldFRpbWVvdXQoZG9TY3JvbGwsIGlzRmlyc3QgPyBzZXR0aW5ncy5pbml0aWFsRGVsYXkgOiBzZXR0aW5ncy50cmFja0NsaWNrUmVwZWF0RnJlcSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlzRmlyc3QgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0XHRjYW5jZWxDbGljayA9IGZ1bmN0aW9uKClcblx0XHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0c2Nyb2xsVGltZW91dCAmJiBjbGVhclRpbWVvdXQoc2Nyb2xsVGltZW91dCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQkKGRvY3VtZW50KS51bmJpbmQoJ21vdXNldXAuanNwJywgY2FuY2VsQ2xpY2spO1xuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0XHRkb1Njcm9sbCgpO1xuXHRcdFx0XHRcdFx0XHRcdCQoZG9jdW1lbnQpLmJpbmQoJ21vdXNldXAuanNwJywgY2FuY2VsQ2xpY2spO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gcmVtb3ZlQ2xpY2tPblRyYWNrKClcblx0XHRcdHtcblx0XHRcdFx0aWYgKGhvcml6b250YWxUcmFjaykge1xuXHRcdFx0XHRcdGhvcml6b250YWxUcmFjay51bmJpbmQoJ21vdXNlZG93bi5qc3AnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodmVydGljYWxUcmFjaykge1xuXHRcdFx0XHRcdHZlcnRpY2FsVHJhY2sudW5iaW5kKCdtb3VzZWRvd24uanNwJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gY2FuY2VsRHJhZygpXG5cdFx0XHR7XG5cdFx0XHRcdCQoJ2h0bWwnKS51bmJpbmQoJ2RyYWdzdGFydC5qc3Agc2VsZWN0c3RhcnQuanNwIG1vdXNlbW92ZS5qc3AgbW91c2V1cC5qc3AgbW91c2VsZWF2ZS5qc3AnKTtcblxuXHRcdFx0XHRpZiAodmVydGljYWxEcmFnKSB7XG5cdFx0XHRcdFx0dmVydGljYWxEcmFnLnJlbW92ZUNsYXNzKCdqc3BBY3RpdmUnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaG9yaXpvbnRhbERyYWcpIHtcblx0XHRcdFx0XHRob3Jpem9udGFsRHJhZy5yZW1vdmVDbGFzcygnanNwQWN0aXZlJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gcG9zaXRpb25EcmFnWShkZXN0WSwgYW5pbWF0ZSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKCFpc1Njcm9sbGFibGVWKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkZXN0WSA8IDApIHtcblx0XHRcdFx0XHRkZXN0WSA9IDA7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGVzdFkgPiBkcmFnTWF4WSkge1xuXHRcdFx0XHRcdGRlc3RZID0gZHJhZ01heFk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBhbGxvdyBmb3IgZGV2cyB0byBwcmV2ZW50IHRoZSBKU1AgZnJvbSBiZWluZyBzY3JvbGxlZFxuXHRcdFx0XHR2YXIgd2lsbFNjcm9sbFlFdmVudCA9IG5ldyAkLkV2ZW50KFwianNwLXdpbGwtc2Nyb2xsLXlcIik7XG5cdFx0XHRcdGVsZW0udHJpZ2dlcih3aWxsU2Nyb2xsWUV2ZW50LCBbZGVzdFldKTtcblxuXHRcdFx0XHRpZiAod2lsbFNjcm9sbFlFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB0bXBWZXJ0aWNhbERyYWdQb3NpdGlvbiA9IGRlc3RZIHx8IDA7XG5cblx0XHRcdFx0dmFyIGlzQXRUb3AgPSB0bXBWZXJ0aWNhbERyYWdQb3NpdGlvbiA9PT0gMCxcblx0XHRcdFx0XHRpc0F0Qm90dG9tID0gdG1wVmVydGljYWxEcmFnUG9zaXRpb24gPT0gZHJhZ01heFksXG5cdFx0XHRcdFx0cGVyY2VudFNjcm9sbGVkID0gZGVzdFkvIGRyYWdNYXhZLFxuXHRcdFx0XHRcdGRlc3RUb3AgPSAtcGVyY2VudFNjcm9sbGVkICogKGNvbnRlbnRIZWlnaHQgLSBwYW5lSGVpZ2h0KTtcblxuXHRcdFx0XHQvLyBjYW4ndCBqdXN0IGNoZWNrIGlmKGFuaW1hdGUpIGJlY2F1c2UgZmFsc2UgaXMgYSB2YWxpZCB2YWx1ZSB0aGF0IGNvdWxkIGJlIHBhc3NlZCBpbi4uLlxuXHRcdFx0XHRpZiAoYW5pbWF0ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YW5pbWF0ZSA9IHNldHRpbmdzLmFuaW1hdGVTY3JvbGw7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGFuaW1hdGUpIHtcblx0XHRcdFx0XHRqc3AuYW5pbWF0ZSh2ZXJ0aWNhbERyYWcsICd0b3AnLCBkZXN0WSxcdF9wb3NpdGlvbkRyYWdZLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGVsZW0udHJpZ2dlcignanNwLXVzZXItc2Nyb2xsLXknLCBbLWRlc3RUb3AsIGlzQXRUb3AsIGlzQXRCb3R0b21dKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2ZXJ0aWNhbERyYWcuY3NzKCd0b3AnLCBkZXN0WSk7XG5cdFx0XHRcdFx0X3Bvc2l0aW9uRHJhZ1koZGVzdFkpO1xuXHRcdFx0XHRcdGVsZW0udHJpZ2dlcignanNwLXVzZXItc2Nyb2xsLXknLCBbLWRlc3RUb3AsIGlzQXRUb3AsIGlzQXRCb3R0b21dKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIF9wb3NpdGlvbkRyYWdZKGRlc3RZKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoZGVzdFkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGRlc3RZID0gdmVydGljYWxEcmFnLnBvc2l0aW9uKCkudG9wO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29udGFpbmVyLnNjcm9sbFRvcCgwKTtcblx0XHRcdFx0dmVydGljYWxEcmFnUG9zaXRpb24gPSBkZXN0WSB8fCAwO1xuXG5cdFx0XHRcdHZhciBpc0F0VG9wID0gdmVydGljYWxEcmFnUG9zaXRpb24gPT09IDAsXG5cdFx0XHRcdFx0aXNBdEJvdHRvbSA9IHZlcnRpY2FsRHJhZ1Bvc2l0aW9uID09IGRyYWdNYXhZLFxuXHRcdFx0XHRcdHBlcmNlbnRTY3JvbGxlZCA9IGRlc3RZLyBkcmFnTWF4WSxcblx0XHRcdFx0XHRkZXN0VG9wID0gLXBlcmNlbnRTY3JvbGxlZCAqIChjb250ZW50SGVpZ2h0IC0gcGFuZUhlaWdodCk7XG5cblx0XHRcdFx0aWYgKHdhc0F0VG9wICE9IGlzQXRUb3AgfHwgd2FzQXRCb3R0b20gIT0gaXNBdEJvdHRvbSkge1xuXHRcdFx0XHRcdHdhc0F0VG9wID0gaXNBdFRvcDtcblx0XHRcdFx0XHR3YXNBdEJvdHRvbSA9IGlzQXRCb3R0b207XG5cdFx0XHRcdFx0ZWxlbS50cmlnZ2VyKCdqc3AtYXJyb3ctY2hhbmdlJywgW3dhc0F0VG9wLCB3YXNBdEJvdHRvbSwgd2FzQXRMZWZ0LCB3YXNBdFJpZ2h0XSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR1cGRhdGVWZXJ0aWNhbEFycm93cyhpc0F0VG9wLCBpc0F0Qm90dG9tKTtcblx0XHRcdFx0cGFuZS5jc3MoJ3RvcCcsIGRlc3RUb3ApO1xuXHRcdFx0XHRlbGVtLnRyaWdnZXIoJ2pzcC1zY3JvbGwteScsIFstZGVzdFRvcCwgaXNBdFRvcCwgaXNBdEJvdHRvbV0pLnRyaWdnZXIoJ3Njcm9sbCcpO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBwb3NpdGlvbkRyYWdYKGRlc3RYLCBhbmltYXRlKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoIWlzU2Nyb2xsYWJsZUgpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGRlc3RYIDwgMCkge1xuXHRcdFx0XHRcdGRlc3RYID0gMDtcblx0XHRcdFx0fSBlbHNlIGlmIChkZXN0WCA+IGRyYWdNYXhYKSB7XG5cdFx0XHRcdFx0ZGVzdFggPSBkcmFnTWF4WDtcblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0Ly8gYWxsb3cgZm9yIGRldnMgdG8gcHJldmVudCB0aGUgSlNQIGZyb20gYmVpbmcgc2Nyb2xsZWRcblx0XHRcdFx0dmFyIHdpbGxTY3JvbGxYRXZlbnQgPSBuZXcgJC5FdmVudChcImpzcC13aWxsLXNjcm9sbC14XCIpO1xuXHRcdFx0XHRlbGVtLnRyaWdnZXIod2lsbFNjcm9sbFhFdmVudCwgW2Rlc3RYXSk7XG5cblx0XHRcdFx0aWYgKHdpbGxTY3JvbGxYRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgdG1wSG9yaXpvbnRhbERyYWdQb3NpdGlvbiA9IGRlc3RYIHx8MDtcblxuXHRcdFx0XHR2YXIgaXNBdExlZnQgPSB0bXBIb3Jpem9udGFsRHJhZ1Bvc2l0aW9uID09PSAwLFxuXHRcdFx0XHRcdGlzQXRSaWdodCA9IHRtcEhvcml6b250YWxEcmFnUG9zaXRpb24gPT0gZHJhZ01heFgsXG5cdFx0XHRcdFx0cGVyY2VudFNjcm9sbGVkID0gZGVzdFggLyBkcmFnTWF4WCxcblx0XHRcdFx0XHRkZXN0TGVmdCA9IC1wZXJjZW50U2Nyb2xsZWQgKiAoY29udGVudFdpZHRoIC0gcGFuZVdpZHRoKTtcblxuXHRcdFx0XHRpZiAoYW5pbWF0ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YW5pbWF0ZSA9IHNldHRpbmdzLmFuaW1hdGVTY3JvbGw7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGFuaW1hdGUpIHtcblx0XHRcdFx0XHRqc3AuYW5pbWF0ZShob3Jpem9udGFsRHJhZywgJ2xlZnQnLCBkZXN0WCxcdF9wb3NpdGlvbkRyYWdYLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGVsZW0udHJpZ2dlcignanNwLXVzZXItc2Nyb2xsLXgnLCBbLWRlc3RMZWZ0LCBpc0F0TGVmdCwgaXNBdFJpZ2h0XSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aG9yaXpvbnRhbERyYWcuY3NzKCdsZWZ0JywgZGVzdFgpO1xuXHRcdFx0XHRcdF9wb3NpdGlvbkRyYWdYKGRlc3RYKTtcblx0XHRcdFx0XHRlbGVtLnRyaWdnZXIoJ2pzcC11c2VyLXNjcm9sbC14JywgWy1kZXN0TGVmdCwgaXNBdExlZnQsIGlzQXRSaWdodF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIF9wb3NpdGlvbkRyYWdYKGRlc3RYKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoZGVzdFggPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGRlc3RYID0gaG9yaXpvbnRhbERyYWcucG9zaXRpb24oKS5sZWZ0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29udGFpbmVyLnNjcm9sbFRvcCgwKTtcblx0XHRcdFx0aG9yaXpvbnRhbERyYWdQb3NpdGlvbiA9IGRlc3RYIHx8MDtcblxuXHRcdFx0XHR2YXIgaXNBdExlZnQgPSBob3Jpem9udGFsRHJhZ1Bvc2l0aW9uID09PSAwLFxuXHRcdFx0XHRcdGlzQXRSaWdodCA9IGhvcml6b250YWxEcmFnUG9zaXRpb24gPT0gZHJhZ01heFgsXG5cdFx0XHRcdFx0cGVyY2VudFNjcm9sbGVkID0gZGVzdFggLyBkcmFnTWF4WCxcblx0XHRcdFx0XHRkZXN0TGVmdCA9IC1wZXJjZW50U2Nyb2xsZWQgKiAoY29udGVudFdpZHRoIC0gcGFuZVdpZHRoKTtcblxuXHRcdFx0XHRpZiAod2FzQXRMZWZ0ICE9IGlzQXRMZWZ0IHx8IHdhc0F0UmlnaHQgIT0gaXNBdFJpZ2h0KSB7XG5cdFx0XHRcdFx0d2FzQXRMZWZ0ID0gaXNBdExlZnQ7XG5cdFx0XHRcdFx0d2FzQXRSaWdodCA9IGlzQXRSaWdodDtcblx0XHRcdFx0XHRlbGVtLnRyaWdnZXIoJ2pzcC1hcnJvdy1jaGFuZ2UnLCBbd2FzQXRUb3AsIHdhc0F0Qm90dG9tLCB3YXNBdExlZnQsIHdhc0F0UmlnaHRdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHVwZGF0ZUhvcml6b250YWxBcnJvd3MoaXNBdExlZnQsIGlzQXRSaWdodCk7XG5cdFx0XHRcdHBhbmUuY3NzKCdsZWZ0JywgZGVzdExlZnQpO1xuXHRcdFx0XHRlbGVtLnRyaWdnZXIoJ2pzcC1zY3JvbGwteCcsIFstZGVzdExlZnQsIGlzQXRMZWZ0LCBpc0F0UmlnaHRdKS50cmlnZ2VyKCdzY3JvbGwnKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gdXBkYXRlVmVydGljYWxBcnJvd3MoaXNBdFRvcCwgaXNBdEJvdHRvbSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKHNldHRpbmdzLnNob3dBcnJvd3MpIHtcblx0XHRcdFx0XHRhcnJvd1VwW2lzQXRUb3AgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oJ2pzcERpc2FibGVkJyk7XG5cdFx0XHRcdFx0YXJyb3dEb3duW2lzQXRCb3R0b20gPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oJ2pzcERpc2FibGVkJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gdXBkYXRlSG9yaXpvbnRhbEFycm93cyhpc0F0TGVmdCwgaXNBdFJpZ2h0KVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoc2V0dGluZ3Muc2hvd0Fycm93cykge1xuXHRcdFx0XHRcdGFycm93TGVmdFtpc0F0TGVmdCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXSgnanNwRGlzYWJsZWQnKTtcblx0XHRcdFx0XHRhcnJvd1JpZ2h0W2lzQXRSaWdodCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXSgnanNwRGlzYWJsZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBzY3JvbGxUb1koZGVzdFksIGFuaW1hdGUpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBwZXJjZW50U2Nyb2xsZWQgPSBkZXN0WSAvIChjb250ZW50SGVpZ2h0IC0gcGFuZUhlaWdodCk7XG5cdFx0XHRcdHBvc2l0aW9uRHJhZ1kocGVyY2VudFNjcm9sbGVkICogZHJhZ01heFksIGFuaW1hdGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBzY3JvbGxUb1goZGVzdFgsIGFuaW1hdGUpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBwZXJjZW50U2Nyb2xsZWQgPSBkZXN0WCAvIChjb250ZW50V2lkdGggLSBwYW5lV2lkdGgpO1xuXHRcdFx0XHRwb3NpdGlvbkRyYWdYKHBlcmNlbnRTY3JvbGxlZCAqIGRyYWdNYXhYLCBhbmltYXRlKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gc2Nyb2xsVG9FbGVtZW50KGVsZSwgc3RpY2tUb1RvcCwgYW5pbWF0ZSlcblx0XHRcdHtcblx0XHRcdFx0dmFyIGUsIGVsZUhlaWdodCwgZWxlV2lkdGgsIGVsZVRvcCA9IDAsIGVsZUxlZnQgPSAwLCB2aWV3cG9ydFRvcCwgdmlld3BvcnRMZWZ0LCBtYXhWaXNpYmxlRWxlVG9wLCBtYXhWaXNpYmxlRWxlTGVmdCwgZGVzdFksIGRlc3RYO1xuXG5cdFx0XHRcdC8vIExlZ2FsIGhhc2ggdmFsdWVzIGFyZW4ndCBuZWNlc3NhcmlseSBsZWdhbCBqUXVlcnkgc2VsZWN0b3JzIHNvIHdlIG5lZWQgdG8gY2F0Y2ggYW55XG5cdFx0XHRcdC8vIGVycm9ycyBmcm9tIHRoZSBsb29rdXAuLi5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRlID0gJChlbGUpO1xuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlSGVpZ2h0ID0gZS5vdXRlckhlaWdodCgpO1xuXHRcdFx0XHRlbGVXaWR0aD0gZS5vdXRlcldpZHRoKCk7XG5cblx0XHRcdFx0Y29udGFpbmVyLnNjcm9sbFRvcCgwKTtcblx0XHRcdFx0Y29udGFpbmVyLnNjcm9sbExlZnQoMCk7XG5cblx0XHRcdFx0Ly8gbG9vcCB0aHJvdWdoIHBhcmVudHMgYWRkaW5nIHRoZSBvZmZzZXQgdG9wIG9mIGFueSBlbGVtZW50cyB0aGF0IGFyZSByZWxhdGl2ZWx5IHBvc2l0aW9uZWQgYmV0d2VlblxuXHRcdFx0XHQvLyB0aGUgZm9jdXNlZCBlbGVtZW50IGFuZCB0aGUganNwUGFuZSBzbyB3ZSBjYW4gZ2V0IHRoZSB0cnVlIGRpc3RhbmNlIGZyb20gdGhlIHRvcFxuXHRcdFx0XHQvLyBvZiB0aGUgZm9jdXNlZCBlbGVtZW50IHRvIHRoZSB0b3Agb2YgdGhlIHNjcm9sbHBhbmUuLi5cblx0XHRcdFx0d2hpbGUgKCFlLmlzKCcuanNwUGFuZScpKSB7XG5cdFx0XHRcdFx0ZWxlVG9wICs9IGUucG9zaXRpb24oKS50b3A7XG5cdFx0XHRcdFx0ZWxlTGVmdCArPSBlLnBvc2l0aW9uKCkubGVmdDtcblx0XHRcdFx0XHRlID0gZS5vZmZzZXRQYXJlbnQoKTtcblx0XHRcdFx0XHRpZiAoL15ib2R5fGh0bWwkL2kudGVzdChlWzBdLm5vZGVOYW1lKSkge1xuXHRcdFx0XHRcdFx0Ly8gd2UgZW5kZWQgdXAgdG9vIGhpZ2ggaW4gdGhlIGRvY3VtZW50IHN0cnVjdHVyZS4gUXVpdCFcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2aWV3cG9ydFRvcCA9IGNvbnRlbnRQb3NpdGlvblkoKTtcblx0XHRcdFx0bWF4VmlzaWJsZUVsZVRvcCA9IHZpZXdwb3J0VG9wICsgcGFuZUhlaWdodDtcblx0XHRcdFx0aWYgKGVsZVRvcCA8IHZpZXdwb3J0VG9wIHx8IHN0aWNrVG9Ub3ApIHsgLy8gZWxlbWVudCBpcyBhYm92ZSB2aWV3cG9ydFxuXHRcdFx0XHRcdGRlc3RZID0gZWxlVG9wIC0gc2V0dGluZ3MuaG9yaXpvbnRhbEd1dHRlcjtcblx0XHRcdFx0fSBlbHNlIGlmIChlbGVUb3AgKyBlbGVIZWlnaHQgPiBtYXhWaXNpYmxlRWxlVG9wKSB7IC8vIGVsZW1lbnQgaXMgYmVsb3cgdmlld3BvcnRcblx0XHRcdFx0XHRkZXN0WSA9IGVsZVRvcCAtIHBhbmVIZWlnaHQgKyBlbGVIZWlnaHQgKyBzZXR0aW5ncy5ob3Jpem9udGFsR3V0dGVyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghaXNOYU4oZGVzdFkpKSB7XG5cdFx0XHRcdFx0c2Nyb2xsVG9ZKGRlc3RZLCBhbmltYXRlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZpZXdwb3J0TGVmdCA9IGNvbnRlbnRQb3NpdGlvblgoKTtcblx0ICAgICAgICAgICAgbWF4VmlzaWJsZUVsZUxlZnQgPSB2aWV3cG9ydExlZnQgKyBwYW5lV2lkdGg7XG5cdCAgICAgICAgICAgIGlmIChlbGVMZWZ0IDwgdmlld3BvcnRMZWZ0IHx8IHN0aWNrVG9Ub3ApIHsgLy8gZWxlbWVudCBpcyB0byB0aGUgbGVmdCBvZiB2aWV3cG9ydFxuXHQgICAgICAgICAgICAgICAgZGVzdFggPSBlbGVMZWZ0IC0gc2V0dGluZ3MuaG9yaXpvbnRhbEd1dHRlcjtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVMZWZ0ICsgZWxlV2lkdGggPiBtYXhWaXNpYmxlRWxlTGVmdCkgeyAvLyBlbGVtZW50IGlzIHRvIHRoZSByaWdodCB2aWV3cG9ydFxuXHQgICAgICAgICAgICAgICAgZGVzdFggPSBlbGVMZWZ0IC0gcGFuZVdpZHRoICsgZWxlV2lkdGggKyBzZXR0aW5ncy5ob3Jpem9udGFsR3V0dGVyO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICghaXNOYU4oZGVzdFgpKSB7XG5cdCAgICAgICAgICAgICAgICBzY3JvbGxUb1goZGVzdFgsIGFuaW1hdGUpO1xuXHQgICAgICAgICAgICB9XG5cblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gY29udGVudFBvc2l0aW9uWCgpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiAtcGFuZS5wb3NpdGlvbigpLmxlZnQ7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGNvbnRlbnRQb3NpdGlvblkoKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gLXBhbmUucG9zaXRpb24oKS50b3A7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGlzQ2xvc2VUb0JvdHRvbSgpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBzY3JvbGxhYmxlSGVpZ2h0ID0gY29udGVudEhlaWdodCAtIHBhbmVIZWlnaHQ7XG5cdFx0XHRcdHJldHVybiAoc2Nyb2xsYWJsZUhlaWdodCA+IDIwKSAmJiAoc2Nyb2xsYWJsZUhlaWdodCAtIGNvbnRlbnRQb3NpdGlvblkoKSA8IDEwKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gaXNDbG9zZVRvUmlnaHQoKVxuXHRcdFx0e1xuXHRcdFx0XHR2YXIgc2Nyb2xsYWJsZVdpZHRoID0gY29udGVudFdpZHRoIC0gcGFuZVdpZHRoO1xuXHRcdFx0XHRyZXR1cm4gKHNjcm9sbGFibGVXaWR0aCA+IDIwKSAmJiAoc2Nyb2xsYWJsZVdpZHRoIC0gY29udGVudFBvc2l0aW9uWCgpIDwgMTApO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBpbml0TW91c2V3aGVlbCgpXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnRhaW5lci51bmJpbmQobXdFdmVudCkuYmluZChcblx0XHRcdFx0XHRtd0V2ZW50LFxuXHRcdFx0XHRcdGZ1bmN0aW9uIChldmVudCwgZGVsdGEsIGRlbHRhWCwgZGVsdGFZKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaG9yaXpvbnRhbERyYWdQb3NpdGlvbikgaG9yaXpvbnRhbERyYWdQb3NpdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZlcnRpY2FsRHJhZ1Bvc2l0aW9uKSB2ZXJ0aWNhbERyYWdQb3NpdGlvbiA9IDA7XG5cblx0XHRcdFx0XHRcdHZhciBkWCA9IGhvcml6b250YWxEcmFnUG9zaXRpb24sIGRZID0gdmVydGljYWxEcmFnUG9zaXRpb24sIGZhY3RvciA9IGV2ZW50LmRlbHRhRmFjdG9yIHx8IHNldHRpbmdzLm1vdXNlV2hlZWxTcGVlZDtcblx0XHRcdFx0XHRcdGpzcC5zY3JvbGxCeShkZWx0YVggKiBmYWN0b3IsIC1kZWx0YVkgKiBmYWN0b3IsIGZhbHNlKTtcblx0XHRcdFx0XHRcdC8vIHJldHVybiB0cnVlIGlmIHRoZXJlIHdhcyBubyBtb3ZlbWVudCBzbyByZXN0IG9mIHNjcmVlbiBjYW4gc2Nyb2xsXG5cdFx0XHRcdFx0XHRyZXR1cm4gZFggPT0gaG9yaXpvbnRhbERyYWdQb3NpdGlvbiAmJiBkWSA9PSB2ZXJ0aWNhbERyYWdQb3NpdGlvbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIHJlbW92ZU1vdXNld2hlZWwoKVxuXHRcdFx0e1xuXHRcdFx0XHRjb250YWluZXIudW5iaW5kKG13RXZlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBuaWwoKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGluaXRGb2N1c0hhbmRsZXIoKVxuXHRcdFx0e1xuXHRcdFx0XHRwYW5lLmZpbmQoJzppbnB1dCxhJykudW5iaW5kKCdmb2N1cy5qc3AnKS5iaW5kKFxuXHRcdFx0XHRcdCdmb2N1cy5qc3AnLFxuXHRcdFx0XHRcdGZ1bmN0aW9uKGUpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0c2Nyb2xsVG9FbGVtZW50KGUudGFyZ2V0LCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiByZW1vdmVGb2N1c0hhbmRsZXIoKVxuXHRcdFx0e1xuXHRcdFx0XHRwYW5lLmZpbmQoJzppbnB1dCxhJykudW5iaW5kKCdmb2N1cy5qc3AnKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gaW5pdEtleWJvYXJkTmF2KClcblx0XHRcdHtcblx0XHRcdFx0dmFyIGtleURvd24sIGVsZW1lbnRIYXNTY3JvbGxlZCwgdmFsaWRQYXJlbnRzID0gW107XG5cdFx0XHRcdGlzU2Nyb2xsYWJsZUggJiYgdmFsaWRQYXJlbnRzLnB1c2goaG9yaXpvbnRhbEJhclswXSk7XG5cdFx0XHRcdGlzU2Nyb2xsYWJsZVYgJiYgdmFsaWRQYXJlbnRzLnB1c2godmVydGljYWxCYXJbMF0pO1xuXG5cdFx0XHRcdC8vIElFIGFsc28gZm9jdXNlcyBlbGVtZW50cyB0aGF0IGRvbid0IGhhdmUgdGFiaW5kZXggc2V0LlxuXHRcdFx0XHRwYW5lLmJpbmQoXG5cdFx0XHRcdFx0J2ZvY3VzLmpzcCcsXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGVsZW0uZm9jdXMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0ZWxlbS5hdHRyKCd0YWJpbmRleCcsIDApXG5cdFx0XHRcdFx0LnVuYmluZCgna2V5ZG93bi5qc3Aga2V5cHJlc3MuanNwJylcblx0XHRcdFx0XHQuYmluZChcblx0XHRcdFx0XHRcdCdrZXlkb3duLmpzcCcsXG5cdFx0XHRcdFx0XHRmdW5jdGlvbihlKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRpZiAoZS50YXJnZXQgIT09IHRoaXMgJiYgISh2YWxpZFBhcmVudHMubGVuZ3RoICYmICQoZS50YXJnZXQpLmNsb3Nlc3QodmFsaWRQYXJlbnRzKS5sZW5ndGgpKXtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dmFyIGRYID0gaG9yaXpvbnRhbERyYWdQb3NpdGlvbiwgZFkgPSB2ZXJ0aWNhbERyYWdQb3NpdGlvbjtcblx0XHRcdFx0XHRcdFx0c3dpdGNoKGUua2V5Q29kZSkge1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgNDA6IC8vIGRvd25cblx0XHRcdFx0XHRcdFx0XHRjYXNlIDM4OiAvLyB1cFxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgMzQ6IC8vIHBhZ2UgZG93blxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgMzI6IC8vIHNwYWNlXG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAzMzogLy8gcGFnZSB1cFxuXHRcdFx0XHRcdFx0XHRcdGNhc2UgMzk6IC8vIHJpZ2h0XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAzNzogLy8gbGVmdFxuXHRcdFx0XHRcdFx0XHRcdFx0a2V5RG93biA9IGUua2V5Q29kZTtcblx0XHRcdFx0XHRcdFx0XHRcdGtleURvd25IYW5kbGVyKCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlIDM1OiAvLyBlbmRcblx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFRvWShjb250ZW50SGVpZ2h0IC0gcGFuZUhlaWdodCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRrZXlEb3duID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgMzY6IC8vIGhvbWVcblx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFRvWSgwKTtcblx0XHRcdFx0XHRcdFx0XHRcdGtleURvd24gPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRlbGVtZW50SGFzU2Nyb2xsZWQgPSBlLmtleUNvZGUgPT0ga2V5RG93biAmJiBkWCAhPSBob3Jpem9udGFsRHJhZ1Bvc2l0aW9uIHx8IGRZICE9IHZlcnRpY2FsRHJhZ1Bvc2l0aW9uO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gIWVsZW1lbnRIYXNTY3JvbGxlZDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHQpLmJpbmQoXG5cdFx0XHRcdFx0XHQna2V5cHJlc3MuanNwJywgLy8gRm9yIEZGLyBPU1ggc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSByZXBlYXQga2V5IHByZXNzZXMgaWYgdGhlIEpTUCBzY3JvbGxzLi4uXG5cdFx0XHRcdFx0XHRmdW5jdGlvbihlKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRpZiAoZS5rZXlDb2RlID09IGtleURvd24pIHtcblx0XHRcdFx0XHRcdFx0XHRrZXlEb3duSGFuZGxlcigpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdC8vIElmIHRoZSBrZXlwcmVzcyBpcyBub3QgcmVsYXRlZCB0byB0aGUgYXJlYSwgaWdub3JlIGl0LiBGaXhlcyBwcm9ibGVtIHdpdGggaW5wdXRzIGluc2lkZSBzY3JvbGxlZCBhcmVhLiBDb3BpZWQgZnJvbSBsaW5lIDk1NS5cblx0XHRcdFx0XHRcdFx0aWYgKGUudGFyZ2V0ICE9PSB0aGlzICYmICEodmFsaWRQYXJlbnRzLmxlbmd0aCAmJiAkKGUudGFyZ2V0KS5jbG9zZXN0KHZhbGlkUGFyZW50cykubGVuZ3RoKSl7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiAhZWxlbWVudEhhc1Njcm9sbGVkO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0aWYgKHNldHRpbmdzLmhpZGVGb2N1cykge1xuXHRcdFx0XHRcdGVsZW0uY3NzKCdvdXRsaW5lJywgJ25vbmUnKTtcblx0XHRcdFx0XHRpZiAoJ2hpZGVGb2N1cycgaW4gY29udGFpbmVyWzBdKXtcblx0XHRcdFx0XHRcdGVsZW0uYXR0cignaGlkZUZvY3VzJywgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0uY3NzKCdvdXRsaW5lJywgJycpO1xuXHRcdFx0XHRcdGlmICgnaGlkZUZvY3VzJyBpbiBjb250YWluZXJbMF0pe1xuXHRcdFx0XHRcdFx0ZWxlbS5hdHRyKCdoaWRlRm9jdXMnLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZnVuY3Rpb24ga2V5RG93bkhhbmRsZXIoKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dmFyIGRYID0gaG9yaXpvbnRhbERyYWdQb3NpdGlvbiwgZFkgPSB2ZXJ0aWNhbERyYWdQb3NpdGlvbjtcblx0XHRcdFx0XHRzd2l0Y2goa2V5RG93bikge1xuXHRcdFx0XHRcdFx0Y2FzZSA0MDogLy8gZG93blxuXHRcdFx0XHRcdFx0XHRqc3Auc2Nyb2xsQnlZKHNldHRpbmdzLmtleWJvYXJkU3BlZWQsIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRjYXNlIDM4OiAvLyB1cFxuXHRcdFx0XHRcdFx0XHRqc3Auc2Nyb2xsQnlZKC1zZXR0aW5ncy5rZXlib2FyZFNwZWVkLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzNDogLy8gcGFnZSBkb3duXG5cdFx0XHRcdFx0XHRjYXNlIDMyOiAvLyBzcGFjZVxuXHRcdFx0XHRcdFx0XHRqc3Auc2Nyb2xsQnlZKHBhbmVIZWlnaHQgKiBzZXR0aW5ncy5zY3JvbGxQYWdlUGVyY2VudCwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGNhc2UgMzM6IC8vIHBhZ2UgdXBcblx0XHRcdFx0XHRcdFx0anNwLnNjcm9sbEJ5WSgtcGFuZUhlaWdodCAqIHNldHRpbmdzLnNjcm9sbFBhZ2VQZXJjZW50LCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzOTogLy8gcmlnaHRcblx0XHRcdFx0XHRcdFx0anNwLnNjcm9sbEJ5WChzZXR0aW5ncy5rZXlib2FyZFNwZWVkLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0Y2FzZSAzNzogLy8gbGVmdFxuXHRcdFx0XHRcdFx0XHRqc3Auc2Nyb2xsQnlYKC1zZXR0aW5ncy5rZXlib2FyZFNwZWVkLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1lbnRIYXNTY3JvbGxlZCA9IGRYICE9IGhvcml6b250YWxEcmFnUG9zaXRpb24gfHwgZFkgIT0gdmVydGljYWxEcmFnUG9zaXRpb247XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnRIYXNTY3JvbGxlZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiByZW1vdmVLZXlib2FyZE5hdigpXG5cdFx0XHR7XG5cdFx0XHRcdGVsZW0uYXR0cigndGFiaW5kZXgnLCAnLTEnKVxuXHRcdFx0XHRcdC5yZW1vdmVBdHRyKCd0YWJpbmRleCcpXG5cdFx0XHRcdFx0LnVuYmluZCgna2V5ZG93bi5qc3Aga2V5cHJlc3MuanNwJyk7XG5cblx0XHRcdFx0cGFuZS51bmJpbmQoJy5qc3AnKTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gb2JzZXJ2ZUhhc2goKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAobG9jYXRpb24uaGFzaCAmJiBsb2NhdGlvbi5oYXNoLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHR2YXIgZSxcblx0XHRcdFx0XHRcdHJldHJ5SW50LFxuXHRcdFx0XHRcdFx0aGFzaCA9IGVzY2FwZShsb2NhdGlvbi5oYXNoLnN1YnN0cigxKSkgLy8gaGFzaCBtdXN0IGJlIGVzY2FwZWQgdG8gcHJldmVudCBYU1Ncblx0XHRcdFx0XHRcdDtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0ZSA9ICQoJyMnICsgaGFzaCArICcsIGFbbmFtZT1cIicgKyBoYXNoICsgJ1wiXScpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChlLmxlbmd0aCAmJiBwYW5lLmZpbmQoaGFzaCkpIHtcblx0XHRcdFx0XHRcdC8vIG5hc3R5IHdvcmthcm91bmQgYnV0IGl0IGFwcGVhcnMgdG8gdGFrZSBhIGxpdHRsZSB3aGlsZSBiZWZvcmUgdGhlIGhhc2ggaGFzIGRvbmUgaXRzIHRoaW5nXG5cdFx0XHRcdFx0XHQvLyB0byB0aGUgcmVuZGVyZWQgcGFnZSBzbyB3ZSBqdXN0IHdhaXQgdW50aWwgdGhlIGNvbnRhaW5lcidzIHNjcm9sbFRvcCBoYXMgYmVlbiBtZXNzZWQgdXAuXG5cdFx0XHRcdFx0XHRpZiAoY29udGFpbmVyLnNjcm9sbFRvcCgpID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdHJldHJ5SW50ID0gc2V0SW50ZXJ2YWwoXG5cdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKVxuXHRcdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChjb250YWluZXIuc2Nyb2xsVG9wKCkgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFRvRWxlbWVudChlLCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0JChkb2N1bWVudCkuc2Nyb2xsVG9wKGNvbnRhaW5lci5wb3NpdGlvbigpLnRvcCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwocmV0cnlJbnQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcdFx0NTBcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHNjcm9sbFRvRWxlbWVudChlLCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0JChkb2N1bWVudCkuc2Nyb2xsVG9wKGNvbnRhaW5lci5wb3NpdGlvbigpLnRvcCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGhpamFja0ludGVybmFsTGlua3MoKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBvbmx5IHJlZ2lzdGVyIHRoZSBsaW5rIGhhbmRsZXIgb25jZVxuXHRcdFx0XHRpZiAoJChkb2N1bWVudC5ib2R5KS5kYXRhKCdqc3BIaWphY2snKSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgdGhlIGhhbmRsZXIgd2FzIGJvdW5kXG5cdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuZGF0YSgnanNwSGlqYWNrJywgdHJ1ZSk7XG5cblx0XHRcdFx0Ly8gdXNlIGxpdmUgaGFuZGxlciB0byBhbHNvIGNhcHR1cmUgbmV3bHkgY3JlYXRlZCBsaW5rc1xuXHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLmRlbGVnYXRlKCdhW2hyZWYqPVwiI1wiXScsICdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdFx0Ly8gZG9lcyB0aGUgbGluayBwb2ludCB0byB0aGUgc2FtZSBwYWdlP1xuXHRcdFx0XHRcdC8vIHRoaXMgYWxzbyB0YWtlcyBjYXJlIG9mIGNhc2VzIHdpdGggYSA8YmFzZT4tVGFnIG9yIExpbmtzIG5vdCBzdGFydGluZyB3aXRoIHRoZSBoYXNoICNcblx0XHRcdFx0XHQvLyBlLmcuIDxhIGhyZWY9XCJpbmRleC5odG1sI3Rlc3RcIj4gd2hlbiB0aGUgY3VycmVudCB1cmwgYWxyZWFkeSBpcyBpbmRleC5odG1sXG5cdFx0XHRcdFx0dmFyIGhyZWYgPSB0aGlzLmhyZWYuc3Vic3RyKDAsIHRoaXMuaHJlZi5pbmRleE9mKCcjJykpLFxuXHRcdFx0XHRcdFx0bG9jYXRpb25IcmVmID0gbG9jYXRpb24uaHJlZixcblx0XHRcdFx0XHRcdGhhc2gsXG5cdFx0XHRcdFx0XHRlbGVtZW50LFxuXHRcdFx0XHRcdFx0Y29udGFpbmVyLFxuXHRcdFx0XHRcdFx0anNwLFxuXHRcdFx0XHRcdFx0c2Nyb2xsVG9wLFxuXHRcdFx0XHRcdFx0ZWxlbWVudFRvcDtcblx0XHRcdFx0XHRpZiAobG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJykgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRsb2NhdGlvbkhyZWYgPSBsb2NhdGlvbi5ocmVmLnN1YnN0cigwLCBsb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChocmVmICE9PSBsb2NhdGlvbkhyZWYpIHtcblx0XHRcdFx0XHRcdC8vIHRoZSBsaW5rIHBvaW50cyB0byBhbm90aGVyIHBhZ2Vcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBjaGVjayBpZiBqU2Nyb2xsUGFuZSBzaG91bGQgaGFuZGxlIHRoaXMgY2xpY2sgZXZlbnRcblx0XHRcdFx0XHRoYXNoID0gZXNjYXBlKHRoaXMuaHJlZi5zdWJzdHIodGhpcy5ocmVmLmluZGV4T2YoJyMnKSArIDEpKTtcblxuXHRcdFx0XHRcdC8vIGZpbmQgdGhlIGVsZW1lbnQgb24gdGhlIHBhZ2Vcblx0XHRcdFx0XHRlbGVtZW50O1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRlbGVtZW50ID0gJCgnIycgKyBoYXNoICsgJywgYVtuYW1lPVwiJyArIGhhc2ggKyAnXCJdJyk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0Ly8gaGFzaCBpcyBub3QgYSB2YWxpZCBqUXVlcnkgaWRlbnRpZmllclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghZWxlbWVudC5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdC8vIHRoaXMgbGluayBkb2VzIG5vdCBwb2ludCB0byBhbiBlbGVtZW50IG9uIHRoaXMgcGFnZVxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNvbnRhaW5lciA9IGVsZW1lbnQuY2xvc2VzdCgnLmpzcFNjcm9sbGFibGUnKTtcblx0XHRcdFx0XHRqc3AgPSBjb250YWluZXIuZGF0YSgnanNwJyk7XG5cblx0XHRcdFx0XHQvLyBqc3AgbWlnaHQgYmUgYW5vdGhlciBqc3AgaW5zdGFuY2UgdGhhbiB0aGUgb25lLCB0aGF0IGJvdW5kIHRoaXMgZXZlbnRcblx0XHRcdFx0XHQvLyByZW1lbWJlcjogdGhpcyBldmVudCBpcyBvbmx5IGJvdW5kIG9uY2UgZm9yIGFsbCBpbnN0YW5jZXMuXG5cdFx0XHRcdFx0anNwLnNjcm9sbFRvRWxlbWVudChlbGVtZW50LCB0cnVlKTtcblxuXHRcdFx0XHRcdGlmIChjb250YWluZXJbMF0uc2Nyb2xsSW50b1ZpZXcpIHtcblx0XHRcdFx0XHRcdC8vIGFsc28gc2Nyb2xsIHRvIHRoZSB0b3Agb2YgdGhlIGNvbnRhaW5lciAoaWYgaXQgaXMgbm90IHZpc2libGUpXG5cdFx0XHRcdFx0XHRzY3JvbGxUb3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG5cdFx0XHRcdFx0XHRlbGVtZW50VG9wID0gZWxlbWVudC5vZmZzZXQoKS50b3A7XG5cdFx0XHRcdFx0XHRpZiAoZWxlbWVudFRvcCA8IHNjcm9sbFRvcCB8fCBlbGVtZW50VG9wID4gc2Nyb2xsVG9wICsgJCh3aW5kb3cpLmhlaWdodCgpKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5lclswXS5zY3JvbGxJbnRvVmlldygpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGpzcCBoYW5kbGVkIHRoaXMgZXZlbnQsIHByZXZlbnQgdGhlIGJyb3dzZXIgZGVmYXVsdCAoc2Nyb2xsaW5nIDpQKVxuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbml0IHRvdWNoIG9uIGlQYWQsIGlQaG9uZSwgaVBvZCwgQW5kcm9pZFxuXHRcdFx0ZnVuY3Rpb24gaW5pdFRvdWNoKClcblx0XHRcdHtcblx0XHRcdFx0dmFyIHN0YXJ0WCxcblx0XHRcdFx0XHRzdGFydFksXG5cdFx0XHRcdFx0dG91Y2hTdGFydFgsXG5cdFx0XHRcdFx0dG91Y2hTdGFydFksXG5cdFx0XHRcdFx0bW92ZWQsXG5cdFx0XHRcdFx0bW92aW5nID0gZmFsc2U7XG5cblx0XHRcdFx0Y29udGFpbmVyLnVuYmluZCgndG91Y2hzdGFydC5qc3AgdG91Y2htb3ZlLmpzcCB0b3VjaGVuZC5qc3AgY2xpY2suanNwLXRvdWNoY2xpY2snKS5iaW5kKFxuXHRcdFx0XHRcdCd0b3VjaHN0YXJ0LmpzcCcsXG5cdFx0XHRcdFx0ZnVuY3Rpb24oZSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgdG91Y2ggPSBlLm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcblx0XHRcdFx0XHRcdHN0YXJ0WCA9IGNvbnRlbnRQb3NpdGlvblgoKTtcblx0XHRcdFx0XHRcdHN0YXJ0WSA9IGNvbnRlbnRQb3NpdGlvblkoKTtcblx0XHRcdFx0XHRcdHRvdWNoU3RhcnRYID0gdG91Y2gucGFnZVg7XG5cdFx0XHRcdFx0XHR0b3VjaFN0YXJ0WSA9IHRvdWNoLnBhZ2VZO1xuXHRcdFx0XHRcdFx0bW92ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdG1vdmluZyA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpLmJpbmQoXG5cdFx0XHRcdFx0J3RvdWNobW92ZS5qc3AnLFxuXHRcdFx0XHRcdGZ1bmN0aW9uKGV2KVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlmKCFtb3ZpbmcpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2YXIgdG91Y2hQb3MgPSBldi5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0sXG5cdFx0XHRcdFx0XHRcdGRYID0gaG9yaXpvbnRhbERyYWdQb3NpdGlvbiwgZFkgPSB2ZXJ0aWNhbERyYWdQb3NpdGlvbjtcblxuXHRcdFx0XHRcdFx0anNwLnNjcm9sbFRvKHN0YXJ0WCArIHRvdWNoU3RhcnRYIC0gdG91Y2hQb3MucGFnZVgsIHN0YXJ0WSArIHRvdWNoU3RhcnRZIC0gdG91Y2hQb3MucGFnZVkpO1xuXG5cdFx0XHRcdFx0XHRtb3ZlZCA9IG1vdmVkIHx8IE1hdGguYWJzKHRvdWNoU3RhcnRYIC0gdG91Y2hQb3MucGFnZVgpID4gNSB8fCBNYXRoLmFicyh0b3VjaFN0YXJ0WSAtIHRvdWNoUG9zLnBhZ2VZKSA+IDU7XG5cblx0XHRcdFx0XHRcdC8vIHJldHVybiB0cnVlIGlmIHRoZXJlIHdhcyBubyBtb3ZlbWVudCBzbyByZXN0IG9mIHNjcmVlbiBjYW4gc2Nyb2xsXG5cdFx0XHRcdFx0XHRyZXR1cm4gZFggPT0gaG9yaXpvbnRhbERyYWdQb3NpdGlvbiAmJiBkWSA9PSB2ZXJ0aWNhbERyYWdQb3NpdGlvbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCkuYmluZChcblx0XHRcdFx0XHQndG91Y2hlbmQuanNwJyxcblx0XHRcdFx0XHRmdW5jdGlvbihlKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdG1vdmluZyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0LyppZihtb3ZlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9Ki9cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCkuYmluZChcblx0XHRcdFx0XHQnY2xpY2suanNwLXRvdWNoY2xpY2snLFxuXHRcdFx0XHRcdGZ1bmN0aW9uKGUpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWYobW92ZWQpIHtcblx0XHRcdFx0XHRcdFx0bW92ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gZGVzdHJveSgpe1xuXHRcdFx0XHR2YXIgY3VycmVudFkgPSBjb250ZW50UG9zaXRpb25ZKCksXG5cdFx0XHRcdFx0Y3VycmVudFggPSBjb250ZW50UG9zaXRpb25YKCk7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQ2xhc3MoJ2pzcFNjcm9sbGFibGUnKS51bmJpbmQoJy5qc3AnKTtcblx0XHRcdFx0cGFuZS51bmJpbmQoJy5qc3AnKTtcblx0XHRcdFx0ZWxlbS5yZXBsYWNlV2l0aChvcmlnaW5hbEVsZW1lbnQuYXBwZW5kKHBhbmUuY2hpbGRyZW4oKSkpO1xuXHRcdFx0XHRvcmlnaW5hbEVsZW1lbnQuc2Nyb2xsVG9wKGN1cnJlbnRZKTtcblx0XHRcdFx0b3JpZ2luYWxFbGVtZW50LnNjcm9sbExlZnQoY3VycmVudFgpO1xuXG5cdFx0XHRcdC8vIGNsZWFyIHJlaW5pdGlhbGl6ZSB0aW1lciBpZiBhY3RpdmVcblx0XHRcdFx0aWYgKHJlaW5pdGlhbGlzZUludGVydmFsKSB7XG5cdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChyZWluaXRpYWxpc2VJbnRlcnZhbCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUHVibGljIEFQSVxuXHRcdFx0JC5leHRlbmQoXG5cdFx0XHRcdGpzcCxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vIFJlaW5pdGlhbGlzZXMgdGhlIHNjcm9sbCBwYW5lIChpZiBpdCdzIGludGVybmFsIGRpbWVuc2lvbnMgaGF2ZSBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgaXRcblx0XHRcdFx0XHQvLyB3YXMgaW5pdGlhbGlzZWQpLiBUaGUgc2V0dGluZ3Mgb2JqZWN0IHdoaWNoIGlzIHBhc3NlZCBpbiB3aWxsIG92ZXJyaWRlIGFueSBzZXR0aW5ncyBmcm9tIHRoZVxuXHRcdFx0XHRcdC8vIHByZXZpb3VzIHRpbWUgaXQgd2FzIGluaXRpYWxpc2VkIC0gaWYgeW91IGRvbid0IHBhc3MgYW55IHNldHRpbmdzIHRoZW4gdGhlIG9uZXMgZnJvbSB0aGUgcHJldmlvdXNcblx0XHRcdFx0XHQvLyBpbml0aWFsaXNhdGlvbiB3aWxsIGJlIHVzZWQuXG5cdFx0XHRcdFx0cmVpbml0aWFsaXNlOiBmdW5jdGlvbihzKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHMgPSAkLmV4dGVuZCh7fSwgc2V0dGluZ3MsIHMpO1xuXHRcdFx0XHRcdFx0aW5pdGlhbGlzZShzKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdC8vIFNjcm9sbHMgdGhlIHNwZWNpZmllZCBlbGVtZW50IChhIGpRdWVyeSBvYmplY3QsIERPTSBub2RlIG9yIGpRdWVyeSBzZWxlY3RvciBzdHJpbmcpIGludG8gdmlldyBzb1xuXHRcdFx0XHRcdC8vIHRoYXQgaXQgY2FuIGJlIHNlZW4gd2l0aGluIHRoZSB2aWV3cG9ydC4gSWYgc3RpY2tUb1RvcCBpcyB0cnVlIHRoZW4gdGhlIGVsZW1lbnQgd2lsbCBhcHBlYXIgYXRcblx0XHRcdFx0XHQvLyB0aGUgdG9wIG9mIHRoZSB2aWV3cG9ydCwgaWYgaXQgaXMgZmFsc2UgdGhlbiB0aGUgdmlld3BvcnQgd2lsbCBzY3JvbGwgYXMgbGl0dGxlIGFzIHBvc3NpYmxlIHRvXG5cdFx0XHRcdFx0Ly8gc2hvdyB0aGUgZWxlbWVudC4gWW91IGNhbiBhbHNvIHNwZWNpZnkgaWYgeW91IHdhbnQgYW5pbWF0aW9uIHRvIG9jY3VyLiBJZiB5b3UgZG9uJ3QgcHJvdmlkZSB0aGlzXG5cdFx0XHRcdFx0Ly8gYXJndW1lbnQgdGhlbiB0aGUgYW5pbWF0ZVNjcm9sbCB2YWx1ZSBmcm9tIHRoZSBzZXR0aW5ncyBvYmplY3QgaXMgdXNlZCBpbnN0ZWFkLlxuXHRcdFx0XHRcdHNjcm9sbFRvRWxlbWVudDogZnVuY3Rpb24oZWxlLCBzdGlja1RvVG9wLCBhbmltYXRlKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHNjcm9sbFRvRWxlbWVudChlbGUsIHN0aWNrVG9Ub3AsIGFuaW1hdGUpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Ly8gU2Nyb2xscyB0aGUgcGFuZSBzbyB0aGF0IHRoZSBzcGVjaWZpZWQgY28tb3JkaW5hdGVzIHdpdGhpbiB0aGUgY29udGVudCBhcmUgYXQgdGhlIHRvcCBsZWZ0XG5cdFx0XHRcdFx0Ly8gb2YgdGhlIHZpZXdwb3J0LiBhbmltYXRlIGlzIG9wdGlvbmFsIGFuZCBpZiBub3QgcGFzc2VkIHRoZW4gdGhlIHZhbHVlIG9mIGFuaW1hdGVTY3JvbGwgZnJvbVxuXHRcdFx0XHRcdC8vIHRoZSBzZXR0aW5ncyBvYmplY3QgdGhpcyBqU2Nyb2xsUGFuZSB3YXMgaW5pdGlhbGlzZWQgd2l0aCBpcyB1c2VkLlxuXHRcdFx0XHRcdHNjcm9sbFRvOiBmdW5jdGlvbihkZXN0WCwgZGVzdFksIGFuaW1hdGUpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0c2Nyb2xsVG9YKGRlc3RYLCBhbmltYXRlKTtcblx0XHRcdFx0XHRcdHNjcm9sbFRvWShkZXN0WSwgYW5pbWF0ZSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQvLyBTY3JvbGxzIHRoZSBwYW5lIHNvIHRoYXQgdGhlIHNwZWNpZmllZCBjby1vcmRpbmF0ZSB3aXRoaW4gdGhlIGNvbnRlbnQgaXMgYXQgdGhlIGxlZnQgb2YgdGhlXG5cdFx0XHRcdFx0Ly8gdmlld3BvcnQuIGFuaW1hdGUgaXMgb3B0aW9uYWwgYW5kIGlmIG5vdCBwYXNzZWQgdGhlbiB0aGUgdmFsdWUgb2YgYW5pbWF0ZVNjcm9sbCBmcm9tIHRoZSBzZXR0aW5nc1xuXHRcdFx0XHRcdC8vIG9iamVjdCB0aGlzIGpTY3JvbGxQYW5lIHdhcyBpbml0aWFsaXNlZCB3aXRoIGlzIHVzZWQuXG5cdFx0XHRcdFx0c2Nyb2xsVG9YOiBmdW5jdGlvbihkZXN0WCwgYW5pbWF0ZSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRzY3JvbGxUb1goZGVzdFgsIGFuaW1hdGUpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Ly8gU2Nyb2xscyB0aGUgcGFuZSBzbyB0aGF0IHRoZSBzcGVjaWZpZWQgY28tb3JkaW5hdGUgd2l0aGluIHRoZSBjb250ZW50IGlzIGF0IHRoZSB0b3Agb2YgdGhlXG5cdFx0XHRcdFx0Ly8gdmlld3BvcnQuIGFuaW1hdGUgaXMgb3B0aW9uYWwgYW5kIGlmIG5vdCBwYXNzZWQgdGhlbiB0aGUgdmFsdWUgb2YgYW5pbWF0ZVNjcm9sbCBmcm9tIHRoZSBzZXR0aW5nc1xuXHRcdFx0XHRcdC8vIG9iamVjdCB0aGlzIGpTY3JvbGxQYW5lIHdhcyBpbml0aWFsaXNlZCB3aXRoIGlzIHVzZWQuXG5cdFx0XHRcdFx0c2Nyb2xsVG9ZOiBmdW5jdGlvbihkZXN0WSwgYW5pbWF0ZSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRzY3JvbGxUb1koZGVzdFksIGFuaW1hdGUpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Ly8gU2Nyb2xscyB0aGUgcGFuZSB0byB0aGUgc3BlY2lmaWVkIHBlcmNlbnRhZ2Ugb2YgaXRzIG1heGltdW0gaG9yaXpvbnRhbCBzY3JvbGwgcG9zaXRpb24uIGFuaW1hdGVcblx0XHRcdFx0XHQvLyBpcyBvcHRpb25hbCBhbmQgaWYgbm90IHBhc3NlZCB0aGVuIHRoZSB2YWx1ZSBvZiBhbmltYXRlU2Nyb2xsIGZyb20gdGhlIHNldHRpbmdzIG9iamVjdCB0aGlzXG5cdFx0XHRcdFx0Ly8galNjcm9sbFBhbmUgd2FzIGluaXRpYWxpc2VkIHdpdGggaXMgdXNlZC5cblx0XHRcdFx0XHRzY3JvbGxUb1BlcmNlbnRYOiBmdW5jdGlvbihkZXN0UGVyY2VudFgsIGFuaW1hdGUpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0c2Nyb2xsVG9YKGRlc3RQZXJjZW50WCAqIChjb250ZW50V2lkdGggLSBwYW5lV2lkdGgpLCBhbmltYXRlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdC8vIFNjcm9sbHMgdGhlIHBhbmUgdG8gdGhlIHNwZWNpZmllZCBwZXJjZW50YWdlIG9mIGl0cyBtYXhpbXVtIHZlcnRpY2FsIHNjcm9sbCBwb3NpdGlvbi4gYW5pbWF0ZVxuXHRcdFx0XHRcdC8vIGlzIG9wdGlvbmFsIGFuZCBpZiBub3QgcGFzc2VkIHRoZW4gdGhlIHZhbHVlIG9mIGFuaW1hdGVTY3JvbGwgZnJvbSB0aGUgc2V0dGluZ3Mgb2JqZWN0IHRoaXNcblx0XHRcdFx0XHQvLyBqU2Nyb2xsUGFuZSB3YXMgaW5pdGlhbGlzZWQgd2l0aCBpcyB1c2VkLlxuXHRcdFx0XHRcdHNjcm9sbFRvUGVyY2VudFk6IGZ1bmN0aW9uKGRlc3RQZXJjZW50WSwgYW5pbWF0ZSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRzY3JvbGxUb1koZGVzdFBlcmNlbnRZICogKGNvbnRlbnRIZWlnaHQgLSBwYW5lSGVpZ2h0KSwgYW5pbWF0ZSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQvLyBTY3JvbGxzIHRoZSBwYW5lIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHBpeGVscy4gYW5pbWF0ZSBpcyBvcHRpb25hbCBhbmQgaWYgbm90IHBhc3NlZCB0aGVuXG5cdFx0XHRcdFx0Ly8gdGhlIHZhbHVlIG9mIGFuaW1hdGVTY3JvbGwgZnJvbSB0aGUgc2V0dGluZ3Mgb2JqZWN0IHRoaXMgalNjcm9sbFBhbmUgd2FzIGluaXRpYWxpc2VkIHdpdGggaXMgdXNlZC5cblx0XHRcdFx0XHRzY3JvbGxCeTogZnVuY3Rpb24oZGVsdGFYLCBkZWx0YVksIGFuaW1hdGUpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0anNwLnNjcm9sbEJ5WChkZWx0YVgsIGFuaW1hdGUpO1xuXHRcdFx0XHRcdFx0anNwLnNjcm9sbEJ5WShkZWx0YVksIGFuaW1hdGUpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Ly8gU2Nyb2xscyB0aGUgcGFuZSBieSB0aGUgc3BlY2lmaWVkIGFtb3VudCBvZiBwaXhlbHMuIGFuaW1hdGUgaXMgb3B0aW9uYWwgYW5kIGlmIG5vdCBwYXNzZWQgdGhlblxuXHRcdFx0XHRcdC8vIHRoZSB2YWx1ZSBvZiBhbmltYXRlU2Nyb2xsIGZyb20gdGhlIHNldHRpbmdzIG9iamVjdCB0aGlzIGpTY3JvbGxQYW5lIHdhcyBpbml0aWFsaXNlZCB3aXRoIGlzIHVzZWQuXG5cdFx0XHRcdFx0c2Nyb2xsQnlYOiBmdW5jdGlvbihkZWx0YVgsIGFuaW1hdGUpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dmFyIGRlc3RYID0gY29udGVudFBvc2l0aW9uWCgpICsgTWF0aFtkZWx0YVg8MCA/ICdmbG9vcicgOiAnY2VpbCddKGRlbHRhWCksXG5cdFx0XHRcdFx0XHRcdHBlcmNlbnRTY3JvbGxlZCA9IGRlc3RYIC8gKGNvbnRlbnRXaWR0aCAtIHBhbmVXaWR0aCk7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbkRyYWdYKHBlcmNlbnRTY3JvbGxlZCAqIGRyYWdNYXhYLCBhbmltYXRlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdC8vIFNjcm9sbHMgdGhlIHBhbmUgYnkgdGhlIHNwZWNpZmllZCBhbW91bnQgb2YgcGl4ZWxzLiBhbmltYXRlIGlzIG9wdGlvbmFsIGFuZCBpZiBub3QgcGFzc2VkIHRoZW5cblx0XHRcdFx0XHQvLyB0aGUgdmFsdWUgb2YgYW5pbWF0ZVNjcm9sbCBmcm9tIHRoZSBzZXR0aW5ncyBvYmplY3QgdGhpcyBqU2Nyb2xsUGFuZSB3YXMgaW5pdGlhbGlzZWQgd2l0aCBpcyB1c2VkLlxuXHRcdFx0XHRcdHNjcm9sbEJ5WTogZnVuY3Rpb24oZGVsdGFZLCBhbmltYXRlKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBkZXN0WSA9IGNvbnRlbnRQb3NpdGlvblkoKSArIE1hdGhbZGVsdGFZPDAgPyAnZmxvb3InIDogJ2NlaWwnXShkZWx0YVkpLFxuXHRcdFx0XHRcdFx0XHRwZXJjZW50U2Nyb2xsZWQgPSBkZXN0WSAvIChjb250ZW50SGVpZ2h0IC0gcGFuZUhlaWdodCk7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbkRyYWdZKHBlcmNlbnRTY3JvbGxlZCAqIGRyYWdNYXhZLCBhbmltYXRlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdC8vIFBvc2l0aW9ucyB0aGUgaG9yaXpvbnRhbCBkcmFnIGF0IHRoZSBzcGVjaWZpZWQgeCBwb3NpdGlvbiAoYW5kIHVwZGF0ZXMgdGhlIHZpZXdwb3J0IHRvIHJlZmxlY3Rcblx0XHRcdFx0XHQvLyB0aGlzKS4gYW5pbWF0ZSBpcyBvcHRpb25hbCBhbmQgaWYgbm90IHBhc3NlZCB0aGVuIHRoZSB2YWx1ZSBvZiBhbmltYXRlU2Nyb2xsIGZyb20gdGhlIHNldHRpbmdzXG5cdFx0XHRcdFx0Ly8gb2JqZWN0IHRoaXMgalNjcm9sbFBhbmUgd2FzIGluaXRpYWxpc2VkIHdpdGggaXMgdXNlZC5cblx0XHRcdFx0XHRwb3NpdGlvbkRyYWdYOiBmdW5jdGlvbih4LCBhbmltYXRlKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uRHJhZ1goeCwgYW5pbWF0ZSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQvLyBQb3NpdGlvbnMgdGhlIHZlcnRpY2FsIGRyYWcgYXQgdGhlIHNwZWNpZmllZCB5IHBvc2l0aW9uIChhbmQgdXBkYXRlcyB0aGUgdmlld3BvcnQgdG8gcmVmbGVjdFxuXHRcdFx0XHRcdC8vIHRoaXMpLiBhbmltYXRlIGlzIG9wdGlvbmFsIGFuZCBpZiBub3QgcGFzc2VkIHRoZW4gdGhlIHZhbHVlIG9mIGFuaW1hdGVTY3JvbGwgZnJvbSB0aGUgc2V0dGluZ3Ncblx0XHRcdFx0XHQvLyBvYmplY3QgdGhpcyBqU2Nyb2xsUGFuZSB3YXMgaW5pdGlhbGlzZWQgd2l0aCBpcyB1c2VkLlxuXHRcdFx0XHRcdHBvc2l0aW9uRHJhZ1k6IGZ1bmN0aW9uKHksIGFuaW1hdGUpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cG9zaXRpb25EcmFnWSh5LCBhbmltYXRlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdC8vIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGpTY3JvbGxQYW5lIGlzIHRyeWluZyB0byBhbmltYXRlIHRvIGEgbmV3IHBvc2l0aW9uLiBZb3UgY2FuIG92ZXJyaWRlXG5cdFx0XHRcdFx0Ly8gaXQgaWYgeW91IHdhbnQgdG8gcHJvdmlkZSBhZHZhbmNlZCBhbmltYXRpb24gZnVuY3Rpb25hbGl0eS4gSXQgaXMgcGFzc2VkIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuXHRcdFx0XHRcdC8vICAqIGVsZSAgICAgICAgICAtIHRoZSBlbGVtZW50IHdob3NlIHBvc2l0aW9uIGlzIGJlaW5nIGFuaW1hdGVkXG5cdFx0XHRcdFx0Ly8gICogcHJvcCAgICAgICAgIC0gdGhlIHByb3BlcnR5IHRoYXQgaXMgYmVpbmcgYW5pbWF0ZWRcblx0XHRcdFx0XHQvLyAgKiB2YWx1ZSAgICAgICAgLSB0aGUgdmFsdWUgaXQncyBiZWluZyBhbmltYXRlZCB0b1xuXHRcdFx0XHRcdC8vICAqIHN0ZXBDYWxsYmFjayAtIGEgZnVuY3Rpb24gdGhhdCB5b3UgbXVzdCBleGVjdXRlIGVhY2ggdGltZSB5b3UgdXBkYXRlIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHlcblx0XHRcdFx0XHQvLyAgKiBjb21wbGV0ZUNhbGxiYWNrIC0gYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBoYWQgZmluaXNoZWRcblx0XHRcdFx0XHQvLyBZb3UgY2FuIHVzZSB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiAoYmVsb3cpIGFzIGEgc3RhcnRpbmcgcG9pbnQgZm9yIHlvdXIgb3duIGltcGxlbWVudGF0aW9uLlxuXHRcdFx0XHRcdGFuaW1hdGU6IGZ1bmN0aW9uKGVsZSwgcHJvcCwgdmFsdWUsIHN0ZXBDYWxsYmFjaywgY29tcGxldGVDYWxsYmFjaylcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgcGFyYW1zID0ge307XG5cdFx0XHRcdFx0XHRwYXJhbXNbcHJvcF0gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGVsZS5hbmltYXRlKFxuXHRcdFx0XHRcdFx0XHRwYXJhbXMsXG5cdFx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0XHQnZHVyYXRpb24nXHQ6IHNldHRpbmdzLmFuaW1hdGVEdXJhdGlvbixcblx0XHRcdFx0XHRcdFx0XHQnZWFzaW5nJ1x0OiBzZXR0aW5ncy5hbmltYXRlRWFzZSxcblx0XHRcdFx0XHRcdFx0XHQncXVldWUnXHRcdDogZmFsc2UsXG5cdFx0XHRcdFx0XHRcdFx0J3N0ZXAnXHRcdDogc3RlcENhbGxiYWNrLFxuXHRcdFx0XHRcdFx0XHRcdCdjb21wbGV0ZSdcdDogY29tcGxldGVDYWxsYmFja1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Ly8gUmV0dXJucyB0aGUgY3VycmVudCB4IHBvc2l0aW9uIG9mIHRoZSB2aWV3cG9ydCB3aXRoIHJlZ2FyZHMgdG8gdGhlIGNvbnRlbnQgcGFuZS5cblx0XHRcdFx0XHRnZXRDb250ZW50UG9zaXRpb25YOiBmdW5jdGlvbigpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnRQb3NpdGlvblgoKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdC8vIFJldHVybnMgdGhlIGN1cnJlbnQgeSBwb3NpdGlvbiBvZiB0aGUgdmlld3BvcnQgd2l0aCByZWdhcmRzIHRvIHRoZSBjb250ZW50IHBhbmUuXG5cdFx0XHRcdFx0Z2V0Q29udGVudFBvc2l0aW9uWTogZnVuY3Rpb24oKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50UG9zaXRpb25ZKCk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQvLyBSZXR1cm5zIHRoZSB3aWR0aCBvZiB0aGUgY29udGVudCB3aXRoaW4gdGhlIHNjcm9sbCBwYW5lLlxuXHRcdFx0XHRcdGdldENvbnRlbnRXaWR0aDogZnVuY3Rpb24oKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50V2lkdGg7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQvLyBSZXR1cm5zIHRoZSBoZWlnaHQgb2YgdGhlIGNvbnRlbnQgd2l0aGluIHRoZSBzY3JvbGwgcGFuZS5cblx0XHRcdFx0XHRnZXRDb250ZW50SGVpZ2h0OiBmdW5jdGlvbigpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnRIZWlnaHQ7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQvLyBSZXR1cm5zIHRoZSBob3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSB2aWV3cG9ydCB3aXRoaW4gdGhlIHBhbmUgY29udGVudC5cblx0XHRcdFx0XHRnZXRQZXJjZW50U2Nyb2xsZWRYOiBmdW5jdGlvbigpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cmV0dXJuIGNvbnRlbnRQb3NpdGlvblgoKSAvIChjb250ZW50V2lkdGggLSBwYW5lV2lkdGgpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Ly8gUmV0dXJucyB0aGUgdmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHZpZXdwb3J0IHdpdGhpbiB0aGUgcGFuZSBjb250ZW50LlxuXHRcdFx0XHRcdGdldFBlcmNlbnRTY3JvbGxlZFk6IGZ1bmN0aW9uKClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudFBvc2l0aW9uWSgpIC8gKGNvbnRlbnRIZWlnaHQgLSBwYW5lSGVpZ2h0KTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdC8vIFJldHVybnMgd2hldGhlciBvciBub3QgdGhpcyBzY3JvbGxwYW5lIGhhcyBhIGhvcml6b250YWwgc2Nyb2xsYmFyLlxuXHRcdFx0XHRcdGdldElzU2Nyb2xsYWJsZUg6IGZ1bmN0aW9uKClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaXNTY3JvbGxhYmxlSDtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdC8vIFJldHVybnMgd2hldGhlciBvciBub3QgdGhpcyBzY3JvbGxwYW5lIGhhcyBhIHZlcnRpY2FsIHNjcm9sbGJhci5cblx0XHRcdFx0XHRnZXRJc1Njcm9sbGFibGVWOiBmdW5jdGlvbigpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cmV0dXJuIGlzU2Nyb2xsYWJsZVY7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQvLyBHZXRzIGEgcmVmZXJlbmNlIHRvIHRoZSBjb250ZW50IHBhbmUuIEl0IGlzIGltcG9ydGFudCB0aGF0IHlvdSB1c2UgdGhpcyBtZXRob2QgaWYgeW91IHdhbnQgdG9cblx0XHRcdFx0XHQvLyBlZGl0IHRoZSBjb250ZW50IG9mIHlvdXIgalNjcm9sbFBhbmUgYXMgaWYgeW91IGFjY2VzcyB0aGUgZWxlbWVudCBkaXJlY3RseSB0aGVuIHlvdSBtYXkgaGF2ZSBzb21lXG5cdFx0XHRcdFx0Ly8gcHJvYmxlbXMgKGFzIHlvdXIgb3JpZ2luYWwgZWxlbWVudCBoYXMgaGFkIGFkZGl0aW9uYWwgZWxlbWVudHMgZm9yIHRoZSBzY3JvbGxiYXJzIGV0YyBhZGRlZCBpbnRvXG5cdFx0XHRcdFx0Ly8gaXQpLlxuXHRcdFx0XHRcdGdldENvbnRlbnRQYW5lOiBmdW5jdGlvbigpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cmV0dXJuIHBhbmU7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHQvLyBTY3JvbGxzIHRoaXMgalNjcm9sbFBhbmUgZG93biBhcyBmYXIgYXMgaXQgY2FuIGN1cnJlbnRseSBzY3JvbGwuIElmIGFuaW1hdGUgaXNuJ3QgcGFzc2VkIHRoZW4gdGhlXG5cdFx0XHRcdFx0Ly8gYW5pbWF0ZVNjcm9sbCB2YWx1ZSBmcm9tIHNldHRpbmdzIGlzIHVzZWQgaW5zdGVhZC5cblx0XHRcdFx0XHRzY3JvbGxUb0JvdHRvbTogZnVuY3Rpb24oYW5pbWF0ZSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbkRyYWdZKGRyYWdNYXhZLCBhbmltYXRlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdC8vIEhpamFja3MgdGhlIGxpbmtzIG9uIHRoZSBwYWdlIHdoaWNoIGxpbmsgdG8gY29udGVudCBpbnNpZGUgdGhlIHNjcm9sbHBhbmUuIElmIHlvdSBoYXZlIGNoYW5nZWRcblx0XHRcdFx0XHQvLyB0aGUgY29udGVudCBvZiB5b3VyIHBhZ2UgKGUuZy4gdmlhIEFKQVgpIGFuZCB3YW50IHRvIG1ha2Ugc3VyZSBhbnkgbmV3IGFuY2hvciBsaW5rcyB0byB0aGVcblx0XHRcdFx0XHQvLyBjb250ZW50cyBvZiB5b3VyIHNjcm9sbCBwYW5lIHdpbGwgd29yayB0aGVuIGNhbGwgdGhpcyBmdW5jdGlvbi5cblx0XHRcdFx0XHRoaWphY2tJbnRlcm5hbExpbmtzOiAkLm5vb3AsXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlcyB0aGUgalNjcm9sbFBhbmUgYW5kIHJldHVybnMgdGhlIHBhZ2UgdG8gdGhlIHN0YXRlIGl0IHdhcyBpbiBiZWZvcmUgalNjcm9sbFBhbmUgd2FzXG5cdFx0XHRcdFx0Ly8gaW5pdGlhbGlzZWQuXG5cdFx0XHRcdFx0ZGVzdHJveTogZnVuY3Rpb24oKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0ZGVzdHJveSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0KTtcblxuXHRcdFx0aW5pdGlhbGlzZShzKTtcblx0XHR9XG5cblx0XHQvLyBQbHVnaW5pZnlpbmcgY29kZS4uLlxuXHRcdHNldHRpbmdzID0gJC5leHRlbmQoe30sICQuZm4ualNjcm9sbFBhbmUuZGVmYXVsdHMsIHNldHRpbmdzKTtcblxuXHRcdC8vIEFwcGx5IGRlZmF1bHQgc3BlZWRcblx0XHQkLmVhY2goWydhcnJvd0J1dHRvblNwZWVkJywgJ3RyYWNrQ2xpY2tTcGVlZCcsICdrZXlib2FyZFNwZWVkJ10sIGZ1bmN0aW9uKCkge1xuXHRcdFx0c2V0dGluZ3NbdGhpc10gPSBzZXR0aW5nc1t0aGlzXSB8fCBzZXR0aW5ncy5zcGVlZDtcblx0XHR9KTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goXG5cdFx0XHRmdW5jdGlvbigpXG5cdFx0XHR7XG5cdFx0XHRcdHZhciBlbGVtID0gJCh0aGlzKSwganNwQXBpID0gZWxlbS5kYXRhKCdqc3AnKTtcblx0XHRcdFx0aWYgKGpzcEFwaSkge1xuXHRcdFx0XHRcdGpzcEFwaS5yZWluaXRpYWxpc2Uoc2V0dGluZ3MpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCQoXCJzY3JpcHRcIixlbGVtKS5maWx0ZXIoJ1t0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCJdLDpub3QoW3R5cGVdKScpLnJlbW92ZSgpO1xuXHRcdFx0XHRcdGpzcEFwaSA9IG5ldyBKU2Nyb2xsUGFuZShlbGVtLCBzZXR0aW5ncyk7XG5cdFx0XHRcdFx0ZWxlbS5kYXRhKCdqc3AnLCBqc3BBcGkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0KTtcblx0fTtcblxuXHQkLmZuLmpTY3JvbGxQYW5lLmRlZmF1bHRzID0ge1xuXHRcdHNob3dBcnJvd3NcdFx0XHRcdFx0OiB0cnVlLFxuXHRcdG1haW50YWluUG9zaXRpb25cdFx0XHQ6IHRydWUsXG5cdFx0c3RpY2tUb0JvdHRvbVx0XHRcdFx0OiBmYWxzZSxcblx0XHRzdGlja1RvUmlnaHRcdFx0XHRcdDogZmFsc2UsXG5cdFx0Y2xpY2tPblRyYWNrXHRcdFx0XHQ6IHRydWUsXG5cdFx0YXV0b1JlaW5pdGlhbGlzZVx0XHRcdDogZmFsc2UsXG5cdFx0YXV0b1JlaW5pdGlhbGlzZURlbGF5XHRcdDogNTAwLFxuXHRcdHZlcnRpY2FsRHJhZ01pbkhlaWdodFx0XHQ6IDAsXG5cdFx0dmVydGljYWxEcmFnTWF4SGVpZ2h0XHRcdDogOTk5OTksXG5cdFx0aG9yaXpvbnRhbERyYWdNaW5XaWR0aFx0XHQ6IDAsXG5cdFx0aG9yaXpvbnRhbERyYWdNYXhXaWR0aFx0XHQ6IDk5OTk5LFxuXHRcdGNvbnRlbnRXaWR0aFx0XHRcdFx0OiB1bmRlZmluZWQsXG5cdFx0YW5pbWF0ZVNjcm9sbFx0XHRcdFx0OiB0cnVlLFxuXHRcdGFuaW1hdGVEdXJhdGlvblx0XHRcdFx0OiAzMDAsXG5cdFx0YW5pbWF0ZUVhc2VcdFx0XHRcdFx0OiAnbGluZWFyJyxcblx0XHRoaWphY2tJbnRlcm5hbExpbmtzXHRcdFx0OiBmYWxzZSxcblx0XHR2ZXJ0aWNhbEd1dHRlclx0XHRcdFx0OiAzMCxcblx0XHRob3Jpem9udGFsR3V0dGVyXHRcdFx0OiAzMCxcblx0XHRtb3VzZVdoZWVsU3BlZWRcdFx0XHRcdDogMyxcblx0XHRhcnJvd0J1dHRvblNwZWVkXHRcdFx0OiAwLFxuXHRcdGFycm93UmVwZWF0RnJlcVx0XHRcdFx0OiA1MCxcblx0XHRhcnJvd1Njcm9sbE9uSG92ZXJcdFx0XHQ6IGZhbHNlLFxuXHRcdHRyYWNrQ2xpY2tTcGVlZFx0XHRcdFx0OiAwLFxuXHRcdHRyYWNrQ2xpY2tSZXBlYXRGcmVxXHRcdDogNzAsXG5cdFx0dmVydGljYWxBcnJvd1Bvc2l0aW9uc1x0XHQ6ICdzcGxpdCcsXG5cdFx0aG9yaXpvbnRhbEFycm93UG9zaXRpb25zXHQ6ICdzcGxpdCcsXG5cdFx0ZW5hYmxlS2V5Ym9hcmROYXZpZ2F0aW9uXHQ6IHRydWUsXG5cdFx0aGlkZUZvY3VzXHRcdFx0XHRcdDogZmFsc2UsXG5cdFx0a2V5Ym9hcmRTcGVlZFx0XHRcdFx0OiAwLFxuXHRcdGluaXRpYWxEZWxheSAgICAgICAgICAgICAgICA6IDMwMCwgICAgICAgIC8vIERlbGF5IGJlZm9yZSBzdGFydGluZyByZXBlYXRpbmdcblx0XHRzcGVlZFx0XHRcdFx0XHRcdDogMzAsXHRcdC8vIERlZmF1bHQgc3BlZWQgd2hlbiBvdGhlcnMgZmFsc2V5XG5cdFx0c2Nyb2xsUGFnZVBlcmNlbnRcdFx0XHQ6IC44XHRcdC8vIFBlcmNlbnQgb2YgdmlzaWJsZSBhcmVhIHNjcm9sbGVkIHdoZW4gcGFnZVVwL0Rvd24gb3IgdHJhY2sgYXJlYSBwcmVzc2VkXG5cdH07XG5cbn0pKTtcbiIsIi8qXG4gICAgIF8gXyAgICAgIF8gICAgICAgX1xuIF9fX3wgKF8pIF9fX3wgfCBfXyAgKF8pX19fXG4vIF9ffCB8IHwvIF9ffCB8LyAvICB8IC8gX198XG5cXF9fIFxcIHwgfCAoX198ICAgPCBfIHwgXFxfXyBcXFxufF9fXy9ffF98XFxfX198X3xcXF8oXykvIHxfX18vXG4gICAgICAgICAgICAgICAgICAgfF9fL1xuXG4gVmVyc2lvbjogMS42LjBcbiAgQXV0aG9yOiBLZW4gV2hlZWxlclxuIFdlYnNpdGU6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pb1xuICAgIERvY3M6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pby9zbGlja1xuICAgIFJlcG86IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2tcbiAgSXNzdWVzOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrL2lzc3Vlc1xuXG4gKi9cbiFmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImpxdWVyeVwiXSxhKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1hKHJlcXVpcmUoXCJqcXVlcnlcIikpOmEoalF1ZXJ5KX0oZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGI9d2luZG93LlNsaWNrfHx7fTtiPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYyhjLGQpe3ZhciBmLGU9dGhpcztlLmRlZmF1bHRzPXthY2Nlc3NpYmlsaXR5OiEwLGFkYXB0aXZlSGVpZ2h0OiExLGFwcGVuZEFycm93czphKGMpLGFwcGVuZERvdHM6YShjKSxhcnJvd3M6ITAsYXNOYXZGb3I6bnVsbCxwcmV2QXJyb3c6JzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcm9sZT1cIm5vbmVcIiBjbGFzcz1cInNsaWNrLXByZXZcIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0YWJpbmRleD1cIjBcIiByb2xlPVwiYnV0dG9uXCI+UHJldmlvdXM8L2J1dHRvbj4nLG5leHRBcnJvdzonPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdGFiaW5kZXg9XCIwXCIgcm9sZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLGF1dG9wbGF5OiExLGF1dG9wbGF5U3BlZWQ6M2UzLGNlbnRlck1vZGU6ITEsY2VudGVyUGFkZGluZzpcIjUwcHhcIixjc3NFYXNlOlwiZWFzZVwiLGN1c3RvbVBhZ2luZzpmdW5jdGlvbihiLGMpe3JldHVybiBhKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXJvbGU9XCJub25lXCIgcm9sZT1cImJ1dHRvblwiIHRhYmluZGV4PVwiMFwiIC8+JykudGV4dChjKzEpfSxkb3RzOiExLGRvdHNDbGFzczpcInNsaWNrLWRvdHNcIixkcmFnZ2FibGU6ITAsZWFzaW5nOlwibGluZWFyXCIsZWRnZUZyaWN0aW9uOi4zNSxmYWRlOiExLGZvY3VzT25TZWxlY3Q6ITEsaW5maW5pdGU6ITAsaW5pdGlhbFNsaWRlOjAsbGF6eUxvYWQ6XCJvbmRlbWFuZFwiLG1vYmlsZUZpcnN0OiExLHBhdXNlT25Ib3ZlcjohMCxwYXVzZU9uRm9jdXM6ITAscGF1c2VPbkRvdHNIb3ZlcjohMSxyZXNwb25kVG86XCJ3aW5kb3dcIixyZXNwb25zaXZlOm51bGwscm93czoxLHJ0bDohMSxzbGlkZTpcIlwiLHNsaWRlc1BlclJvdzoxLHNsaWRlc1RvU2hvdzoxLHNsaWRlc1RvU2Nyb2xsOjEsc3BlZWQ6NTAwLHN3aXBlOiEwLHN3aXBlVG9TbGlkZTohMSx0b3VjaE1vdmU6ITAsdG91Y2hUaHJlc2hvbGQ6NSx1c2VDU1M6ITAsdXNlVHJhbnNmb3JtOiEwLHZhcmlhYmxlV2lkdGg6ITEsdmVydGljYWw6ITEsdmVydGljYWxTd2lwaW5nOiExLHdhaXRGb3JBbmltYXRlOiEwLHpJbmRleDoxZTN9LGUuaW5pdGlhbHM9e2FuaW1hdGluZzohMSxkcmFnZ2luZzohMSxhdXRvUGxheVRpbWVyOm51bGwsY3VycmVudERpcmVjdGlvbjowLGN1cnJlbnRMZWZ0Om51bGwsY3VycmVudFNsaWRlOjAsZGlyZWN0aW9uOjEsJGRvdHM6bnVsbCxsaXN0V2lkdGg6bnVsbCxsaXN0SGVpZ2h0Om51bGwsbG9hZEluZGV4OjAsJG5leHRBcnJvdzpudWxsLCRwcmV2QXJyb3c6bnVsbCxzbGlkZUNvdW50Om51bGwsc2xpZGVXaWR0aDpudWxsLCRzbGlkZVRyYWNrOm51bGwsJHNsaWRlczpudWxsLHNsaWRpbmc6ITEsc2xpZGVPZmZzZXQ6MCxzd2lwZUxlZnQ6bnVsbCwkbGlzdDpudWxsLHRvdWNoT2JqZWN0Ont9LHRyYW5zZm9ybXNFbmFibGVkOiExLHVuc2xpY2tlZDohMX0sYS5leHRlbmQoZSxlLmluaXRpYWxzKSxlLmFjdGl2ZUJyZWFrcG9pbnQ9bnVsbCxlLmFuaW1UeXBlPW51bGwsZS5hbmltUHJvcD1udWxsLGUuYnJlYWtwb2ludHM9W10sZS5icmVha3BvaW50U2V0dGluZ3M9W10sZS5jc3NUcmFuc2l0aW9ucz0hMSxlLmZvY3Vzc2VkPSExLGUuaW50ZXJydXB0ZWQ9ITEsZS5oaWRkZW49XCJoaWRkZW5cIixlLnBhdXNlZD0hMCxlLnBvc2l0aW9uUHJvcD1udWxsLGUucmVzcG9uZFRvPW51bGwsZS5yb3dDb3VudD0xLGUuc2hvdWxkQ2xpY2s9ITAsZS4kc2xpZGVyPWEoYyksZS4kc2xpZGVzQ2FjaGU9bnVsbCxlLnRyYW5zZm9ybVR5cGU9bnVsbCxlLnRyYW5zaXRpb25UeXBlPW51bGwsZS52aXNpYmlsaXR5Q2hhbmdlPVwidmlzaWJpbGl0eWNoYW5nZVwiLGUud2luZG93V2lkdGg9MCxlLndpbmRvd1RpbWVyPW51bGwsZj1hKGMpLmRhdGEoXCJzbGlja1wiKXx8e30sZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuZGVmYXVsdHMsZCxmKSxlLmN1cnJlbnRTbGlkZT1lLm9wdGlvbnMuaW5pdGlhbFNsaWRlLGUub3JpZ2luYWxTZXR0aW5ncz1lLm9wdGlvbnMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbj8oZS5oaWRkZW49XCJtb3pIaWRkZW5cIixlLnZpc2liaWxpdHlDaGFuZ2U9XCJtb3p2aXNpYmlsaXR5Y2hhbmdlXCIpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4mJihlLmhpZGRlbj1cIndlYmtpdEhpZGRlblwiLGUudmlzaWJpbGl0eUNoYW5nZT1cIndlYmtpdHZpc2liaWxpdHljaGFuZ2VcIiksZS5hdXRvUGxheT1hLnByb3h5KGUuYXV0b1BsYXksZSksZS5hdXRvUGxheUNsZWFyPWEucHJveHkoZS5hdXRvUGxheUNsZWFyLGUpLGUuYXV0b1BsYXlJdGVyYXRvcj1hLnByb3h5KGUuYXV0b1BsYXlJdGVyYXRvcixlKSxlLmNoYW5nZVNsaWRlPWEucHJveHkoZS5jaGFuZ2VTbGlkZSxlKSxlLmNsaWNrSGFuZGxlcj1hLnByb3h5KGUuY2xpY2tIYW5kbGVyLGUpLGUuc2VsZWN0SGFuZGxlcj1hLnByb3h5KGUuc2VsZWN0SGFuZGxlcixlKSxlLnNldFBvc2l0aW9uPWEucHJveHkoZS5zZXRQb3NpdGlvbixlKSxlLnN3aXBlSGFuZGxlcj1hLnByb3h5KGUuc3dpcGVIYW5kbGVyLGUpLGUuZHJhZ0hhbmRsZXI9YS5wcm94eShlLmRyYWdIYW5kbGVyLGUpLGUua2V5SGFuZGxlcj1hLnByb3h5KGUua2V5SGFuZGxlcixlKSxlLmluc3RhbmNlVWlkPWIrKyxlLmh0bWxFeHByPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLyxlLnJlZ2lzdGVyQnJlYWtwb2ludHMoKSxlLmluaXQoITApfXZhciBiPTA7cmV0dXJuIGN9KCksYi5wcm90b3R5cGUuYWN0aXZhdGVBREE9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2EuJHNsaWRlVHJhY2suZmluZChcIi5zbGljay1hY3RpdmVcIikuYXR0cih7XCJhcmlhLWhpZGRlblwiOlwiZmFsc2VcIn0pLmZpbmQoXCJhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3RcIikuYXR0cih7dGFiaW5kZXg6XCIwXCJ9KX0sYi5wcm90b3R5cGUuYWRkU2xpZGU9Yi5wcm90b3R5cGUuc2xpY2tBZGQ9ZnVuY3Rpb24oYixjLGQpe3ZhciBlPXRoaXM7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBjKWQ9YyxjPW51bGw7ZWxzZSBpZigwPmN8fGM+PWUuc2xpZGVDb3VudClyZXR1cm4hMTtlLnVubG9hZCgpLFwibnVtYmVyXCI9PXR5cGVvZiBjPzA9PT1jJiYwPT09ZS4kc2xpZGVzLmxlbmd0aD9hKGIpLmFwcGVuZFRvKGUuJHNsaWRlVHJhY2spOmQ/YShiKS5pbnNlcnRCZWZvcmUoZS4kc2xpZGVzLmVxKGMpKTphKGIpLmluc2VydEFmdGVyKGUuJHNsaWRlcy5lcShjKSk6ZD09PSEwP2EoYikucHJlcGVuZFRvKGUuJHNsaWRlVHJhY2spOmEoYikuYXBwZW5kVG8oZS4kc2xpZGVUcmFjayksZS4kc2xpZGVzPWUuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKSxlLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCksZS4kc2xpZGVUcmFjay5hcHBlbmQoZS4kc2xpZGVzKSxlLiRzbGlkZXMuZWFjaChmdW5jdGlvbihiLGMpe2EoYykuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixiKX0pLGUuJHNsaWRlc0NhY2hlPWUuJHNsaWRlcyxlLnJlaW5pdCgpfSxiLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztpZigxPT09YS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmYS5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0PT09ITAmJmEub3B0aW9ucy52ZXJ0aWNhbD09PSExKXt2YXIgYj1hLiRzbGlkZXMuZXEoYS5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KCEwKTthLiRsaXN0LmFuaW1hdGUoe2hlaWdodDpifSxhLm9wdGlvbnMuc3BlZWQpfX0sYi5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlPWZ1bmN0aW9uKGIsYyl7dmFyIGQ9e30sZT10aGlzO2UuYW5pbWF0ZUhlaWdodCgpLGUub3B0aW9ucy5ydGw9PT0hMCYmZS5vcHRpb25zLnZlcnRpY2FsPT09ITEmJihiPS1iKSxlLnRyYW5zZm9ybXNFbmFibGVkPT09ITE/ZS5vcHRpb25zLnZlcnRpY2FsPT09ITE/ZS4kc2xpZGVUcmFjay5hbmltYXRlKHtsZWZ0OmJ9LGUub3B0aW9ucy5zcGVlZCxlLm9wdGlvbnMuZWFzaW5nLGMpOmUuJHNsaWRlVHJhY2suYW5pbWF0ZSh7dG9wOmJ9LGUub3B0aW9ucy5zcGVlZCxlLm9wdGlvbnMuZWFzaW5nLGMpOmUuY3NzVHJhbnNpdGlvbnM9PT0hMT8oZS5vcHRpb25zLnJ0bD09PSEwJiYoZS5jdXJyZW50TGVmdD0tZS5jdXJyZW50TGVmdCksYSh7YW5pbVN0YXJ0OmUuY3VycmVudExlZnR9KS5hbmltYXRlKHthbmltU3RhcnQ6Yn0se2R1cmF0aW9uOmUub3B0aW9ucy5zcGVlZCxlYXNpbmc6ZS5vcHRpb25zLmVhc2luZyxzdGVwOmZ1bmN0aW9uKGEpe2E9TWF0aC5jZWlsKGEpLGUub3B0aW9ucy52ZXJ0aWNhbD09PSExPyhkW2UuYW5pbVR5cGVdPVwidHJhbnNsYXRlKFwiK2ErXCJweCwgMHB4KVwiLGUuJHNsaWRlVHJhY2suY3NzKGQpKTooZFtlLmFuaW1UeXBlXT1cInRyYW5zbGF0ZSgwcHgsXCIrYStcInB4KVwiLGUuJHNsaWRlVHJhY2suY3NzKGQpKX0sY29tcGxldGU6ZnVuY3Rpb24oKXtjJiZjLmNhbGwoKX19KSk6KGUuYXBwbHlUcmFuc2l0aW9uKCksYj1NYXRoLmNlaWwoYiksZS5vcHRpb25zLnZlcnRpY2FsPT09ITE/ZFtlLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKFwiK2IrXCJweCwgMHB4LCAwcHgpXCI6ZFtlLmFuaW1UeXBlXT1cInRyYW5zbGF0ZTNkKDBweCxcIitiK1wicHgsIDBweClcIixlLiRzbGlkZVRyYWNrLmNzcyhkKSxjJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5kaXNhYmxlVHJhbnNpdGlvbigpLGMuY2FsbCgpfSxlLm9wdGlvbnMuc3BlZWQpKX0sYi5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0PWZ1bmN0aW9uKCl7dmFyIGI9dGhpcyxjPWIub3B0aW9ucy5hc05hdkZvcjtyZXR1cm4gYyYmbnVsbCE9PWMmJihjPWEoYykubm90KGIuJHNsaWRlcikpLGN9LGIucHJvdG90eXBlLmFzTmF2Rm9yPWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMsZD1jLmdldE5hdlRhcmdldCgpO251bGwhPT1kJiZcIm9iamVjdFwiPT10eXBlb2YgZCYmZC5lYWNoKGZ1bmN0aW9uKCl7dmFyIGM9YSh0aGlzKS5zbGljayhcImdldFNsaWNrXCIpO2MudW5zbGlja2VkfHxjLnNsaWRlSGFuZGxlcihiLCEwKX0pfSxiLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPXt9O2Iub3B0aW9ucy5mYWRlPT09ITE/Y1tiLnRyYW5zaXRpb25UeXBlXT1iLnRyYW5zZm9ybVR5cGUrXCIgXCIrYi5vcHRpb25zLnNwZWVkK1wibXMgXCIrYi5vcHRpb25zLmNzc0Vhc2U6Y1tiLnRyYW5zaXRpb25UeXBlXT1cIm9wYWNpdHkgXCIrYi5vcHRpb25zLnNwZWVkK1wibXMgXCIrYi5vcHRpb25zLmNzc0Vhc2UsYi5vcHRpb25zLmZhZGU9PT0hMT9iLiRzbGlkZVRyYWNrLmNzcyhjKTpiLiRzbGlkZXMuZXEoYSkuY3NzKGMpfSxiLnByb3RvdHlwZS5hdXRvUGxheT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5hdXRvUGxheUNsZWFyKCksYS5zbGlkZUNvdW50PmEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihhLmF1dG9QbGF5VGltZXI9c2V0SW50ZXJ2YWwoYS5hdXRvUGxheUl0ZXJhdG9yLGEub3B0aW9ucy5hdXRvcGxheVNwZWVkKSl9LGIucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2EuYXV0b1BsYXlUaW1lciYmY2xlYXJJbnRlcnZhbChhLmF1dG9QbGF5VGltZXIpfSxiLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxiPWEuY3VycmVudFNsaWRlK2Eub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDthLnBhdXNlZHx8YS5pbnRlcnJ1cHRlZHx8YS5mb2N1c3NlZHx8KGEub3B0aW9ucy5pbmZpbml0ZT09PSExJiYoMT09PWEuZGlyZWN0aW9uJiZhLmN1cnJlbnRTbGlkZSsxPT09YS5zbGlkZUNvdW50LTE/YS5kaXJlY3Rpb249MDowPT09YS5kaXJlY3Rpb24mJihiPWEuY3VycmVudFNsaWRlLWEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxhLmN1cnJlbnRTbGlkZS0xPT09MCYmKGEuZGlyZWN0aW9uPTEpKSksYS5zbGlkZUhhbmRsZXIoYikpfSxiLnByb3RvdHlwZS5idWlsZEFycm93cz1mdW5jdGlvbigpe3ZhciBiPXRoaXM7Yi5vcHRpb25zLmFycm93cz09PSEwJiYoYi4kcHJldkFycm93PWEoYi5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoXCJzbGljay1hcnJvd1wiKSxiLiRuZXh0QXJyb3c9YShiLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcyhcInNsaWNrLWFycm93XCIpLGIuc2xpZGVDb3VudD5iLm9wdGlvbnMuc2xpZGVzVG9TaG93PyhiLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIHRhYmluZGV4XCIpLGIuJG5leHRBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWhpZGRlblwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW4gdGFiaW5kZXhcIiksYi5odG1sRXhwci50ZXN0KGIub3B0aW9ucy5wcmV2QXJyb3cpJiZiLiRwcmV2QXJyb3cucHJlcGVuZFRvKGIub3B0aW9ucy5hcHBlbmRBcnJvd3MpLGIuaHRtbEV4cHIudGVzdChiLm9wdGlvbnMubmV4dEFycm93KSYmYi4kbmV4dEFycm93LmFwcGVuZFRvKGIub3B0aW9ucy5hcHBlbmRBcnJvd3MpLGIub3B0aW9ucy5pbmZpbml0ZSE9PSEwJiZiLiRwcmV2QXJyb3cuYWRkQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSk6Yi4kcHJldkFycm93LmFkZChiLiRuZXh0QXJyb3cpLmFkZENsYXNzKFwic2xpY2staGlkZGVuXCIpLmF0dHIoe1wiYXJpYS1kaXNhYmxlZFwiOlwidHJ1ZVwiLHRhYmluZGV4OlwiLTFcIn0pKX0sYi5wcm90b3R5cGUuYnVpbGREb3RzPWZ1bmN0aW9uKCl7dmFyIGMsZCxiPXRoaXM7aWYoYi5vcHRpb25zLmRvdHM9PT0hMCYmYi5zbGlkZUNvdW50PmIub3B0aW9ucy5zbGlkZXNUb1Nob3cpe2ZvcihiLiRzbGlkZXIuYWRkQ2xhc3MoXCJzbGljay1kb3R0ZWRcIiksZD1hKFwiPHVsIC8+XCIpLmFkZENsYXNzKGIub3B0aW9ucy5kb3RzQ2xhc3MpLGM9MDtjPD1iLmdldERvdENvdW50KCk7Yys9MSlkLmFwcGVuZChhKFwiPGxpIC8+XCIpLmFwcGVuZChiLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcyxiLGMpKSk7Yi4kZG90cz1kLmFwcGVuZFRvKGIub3B0aW9ucy5hcHBlbmREb3RzKSxiLiRkb3RzLmZpbmQoXCJsaVwiKS5maXJzdCgpLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIil9fSxiLnByb3RvdHlwZS5idWlsZE91dD1mdW5jdGlvbigpe3ZhciBiPXRoaXM7Yi4kc2xpZGVzPWIuJHNsaWRlci5jaGlsZHJlbihiLm9wdGlvbnMuc2xpZGUrXCI6bm90KC5zbGljay1jbG9uZWQpXCIpLmFkZENsYXNzKFwic2xpY2stc2xpZGVcIiksYi5zbGlkZUNvdW50PWIuJHNsaWRlcy5sZW5ndGgsYi4kc2xpZGVzLmVhY2goZnVuY3Rpb24oYixjKXthKGMpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsYikuZGF0YShcIm9yaWdpbmFsU3R5bGluZ1wiLGEoYykuYXR0cihcInN0eWxlXCIpfHxcIlwiKX0pLGIuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLXNsaWRlclwiKSxiLiRzbGlkZVRyYWNrPTA9PT1iLnNsaWRlQ291bnQ/YSgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKGIuJHNsaWRlcik6Yi4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKSxiLiRsaXN0PWIuJHNsaWRlVHJhY2sud3JhcCgnPGRpdiBhcmlhLWxpdmU9XCJwb2xpdGVcIiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+JykucGFyZW50KCksYi4kc2xpZGVUcmFjay5jc3MoXCJvcGFjaXR5XCIsMCksKGIub3B0aW9ucy5jZW50ZXJNb2RlPT09ITB8fGIub3B0aW9ucy5zd2lwZVRvU2xpZGU9PT0hMCkmJihiLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw9MSksYShcImltZ1tkYXRhLWxhenldXCIsYi4kc2xpZGVyKS5ub3QoXCJbc3JjXVwiKS5hZGRDbGFzcyhcInNsaWNrLWxvYWRpbmdcIiksYi5zZXR1cEluZmluaXRlKCksYi5idWlsZEFycm93cygpLGIuYnVpbGREb3RzKCksYi51cGRhdGVEb3RzKCksYi5zZXRTbGlkZUNsYXNzZXMoXCJudW1iZXJcIj09dHlwZW9mIGIuY3VycmVudFNsaWRlP2IuY3VycmVudFNsaWRlOjApLGIub3B0aW9ucy5kcmFnZ2FibGU9PT0hMCYmYi4kbGlzdC5hZGRDbGFzcyhcImRyYWdnYWJsZVwiKX0sYi5wcm90b3R5cGUuYnVpbGRSb3dzPWZ1bmN0aW9uKCl7dmFyIGIsYyxkLGUsZixnLGgsYT10aGlzO2lmKGU9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGc9YS4kc2xpZGVyLmNoaWxkcmVuKCksYS5vcHRpb25zLnJvd3M+MSl7Zm9yKGg9YS5vcHRpb25zLnNsaWRlc1BlclJvdyphLm9wdGlvbnMucm93cyxmPU1hdGguY2VpbChnLmxlbmd0aC9oKSxiPTA7Zj5iO2IrKyl7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtmb3IoYz0wO2M8YS5vcHRpb25zLnJvd3M7YysrKXt2YXIgaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2ZvcihkPTA7ZDxhLm9wdGlvbnMuc2xpZGVzUGVyUm93O2QrKyl7dmFyIGs9YipoKyhjKmEub3B0aW9ucy5zbGlkZXNQZXJSb3crZCk7Zy5nZXQoaykmJmouYXBwZW5kQ2hpbGQoZy5nZXQoaykpfWkuYXBwZW5kQ2hpbGQoail9ZS5hcHBlbmRDaGlsZChpKX1hLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQoZSksYS4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNzcyh7d2lkdGg6MTAwL2Eub3B0aW9ucy5zbGlkZXNQZXJSb3crXCIlXCIsZGlzcGxheTpcImlubGluZS1ibG9ja1wifSl9fSxiLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmU9ZnVuY3Rpb24oYixjKXt2YXIgZSxmLGcsZD10aGlzLGg9ITEsaT1kLiRzbGlkZXIud2lkdGgoKSxqPXdpbmRvdy5pbm5lcldpZHRofHxhKHdpbmRvdykud2lkdGgoKTtpZihcIndpbmRvd1wiPT09ZC5yZXNwb25kVG8/Zz1qOlwic2xpZGVyXCI9PT1kLnJlc3BvbmRUbz9nPWk6XCJtaW5cIj09PWQucmVzcG9uZFRvJiYoZz1NYXRoLm1pbihqLGkpKSxkLm9wdGlvbnMucmVzcG9uc2l2ZSYmZC5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoJiZudWxsIT09ZC5vcHRpb25zLnJlc3BvbnNpdmUpe2Y9bnVsbDtmb3IoZSBpbiBkLmJyZWFrcG9pbnRzKWQuYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkoZSkmJihkLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3Q9PT0hMT9nPGQuYnJlYWtwb2ludHNbZV0mJihmPWQuYnJlYWtwb2ludHNbZV0pOmc+ZC5icmVha3BvaW50c1tlXSYmKGY9ZC5icmVha3BvaW50c1tlXSkpO251bGwhPT1mP251bGwhPT1kLmFjdGl2ZUJyZWFrcG9pbnQ/KGYhPT1kLmFjdGl2ZUJyZWFrcG9pbnR8fGMpJiYoZC5hY3RpdmVCcmVha3BvaW50PWYsXCJ1bnNsaWNrXCI9PT1kLmJyZWFrcG9pbnRTZXR0aW5nc1tmXT9kLnVuc2xpY2soZik6KGQub3B0aW9ucz1hLmV4dGVuZCh7fSxkLm9yaWdpbmFsU2V0dGluZ3MsZC5icmVha3BvaW50U2V0dGluZ3NbZl0pLGI9PT0hMCYmKGQuY3VycmVudFNsaWRlPWQub3B0aW9ucy5pbml0aWFsU2xpZGUpLGQucmVmcmVzaChiKSksaD1mKTooZC5hY3RpdmVCcmVha3BvaW50PWYsXCJ1bnNsaWNrXCI9PT1kLmJyZWFrcG9pbnRTZXR0aW5nc1tmXT9kLnVuc2xpY2soZik6KGQub3B0aW9ucz1hLmV4dGVuZCh7fSxkLm9yaWdpbmFsU2V0dGluZ3MsZC5icmVha3BvaW50U2V0dGluZ3NbZl0pLGI9PT0hMCYmKGQuY3VycmVudFNsaWRlPWQub3B0aW9ucy5pbml0aWFsU2xpZGUpLGQucmVmcmVzaChiKSksaD1mKTpudWxsIT09ZC5hY3RpdmVCcmVha3BvaW50JiYoZC5hY3RpdmVCcmVha3BvaW50PW51bGwsZC5vcHRpb25zPWQub3JpZ2luYWxTZXR0aW5ncyxiPT09ITAmJihkLmN1cnJlbnRTbGlkZT1kLm9wdGlvbnMuaW5pdGlhbFNsaWRlKSxkLnJlZnJlc2goYiksaD1mKSxifHxoPT09ITF8fGQuJHNsaWRlci50cmlnZ2VyKFwiYnJlYWtwb2ludFwiLFtkLGhdKX19LGIucHJvdG90eXBlLmNoYW5nZVNsaWRlPWZ1bmN0aW9uKGIsYyl7dmFyIGYsZyxoLGQ9dGhpcyxlPWEoYi5jdXJyZW50VGFyZ2V0KTtzd2l0Y2goZS5pcyhcImFcIikmJmIucHJldmVudERlZmF1bHQoKSxlLmlzKFwibGlcIil8fChlPWUuY2xvc2VzdChcImxpXCIpKSxoPWQuc2xpZGVDb3VudCVkLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPT0wLGY9aD8wOihkLnNsaWRlQ291bnQtZC5jdXJyZW50U2xpZGUpJWQub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxiLmRhdGEubWVzc2FnZSl7Y2FzZVwicHJldmlvdXNcIjpnPTA9PT1mP2Qub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDpkLm9wdGlvbnMuc2xpZGVzVG9TaG93LWYsZC5zbGlkZUNvdW50PmQub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmQuc2xpZGVIYW5kbGVyKGQuY3VycmVudFNsaWRlLWcsITEsYyk7YnJlYWs7Y2FzZVwibmV4dFwiOmc9MD09PWY/ZC5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmYsZC5zbGlkZUNvdW50PmQub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmQuc2xpZGVIYW5kbGVyKGQuY3VycmVudFNsaWRlK2csITEsYyk7YnJlYWs7Y2FzZVwiaW5kZXhcIjp2YXIgaT0wPT09Yi5kYXRhLmluZGV4PzA6Yi5kYXRhLmluZGV4fHxlLmluZGV4KCkqZC5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO2Quc2xpZGVIYW5kbGVyKGQuY2hlY2tOYXZpZ2FibGUoaSksITEsYyksZS5jaGlsZHJlbigpLnRyaWdnZXIoXCJmb2N1c1wiKTticmVhaztkZWZhdWx0OnJldHVybn19LGIucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlPWZ1bmN0aW9uKGEpe3ZhciBjLGQsYj10aGlzO2lmKGM9Yi5nZXROYXZpZ2FibGVJbmRleGVzKCksZD0wLGE+Y1tjLmxlbmd0aC0xXSlhPWNbYy5sZW5ndGgtMV07ZWxzZSBmb3IodmFyIGUgaW4gYyl7aWYoYTxjW2VdKXthPWQ7YnJlYWt9ZD1jW2VdfXJldHVybiBhfSxiLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcztiLm9wdGlvbnMuZG90cyYmbnVsbCE9PWIuJGRvdHMmJmEoXCJsaVwiLGIuJGRvdHMpLm9mZihcImNsaWNrLnNsaWNrXCIsYi5jaGFuZ2VTbGlkZSkub2ZmKFwibW91c2VlbnRlci5zbGlja1wiLGEucHJveHkoYi5pbnRlcnJ1cHQsYiwhMCkpLm9mZihcIm1vdXNlbGVhdmUuc2xpY2tcIixhLnByb3h5KGIuaW50ZXJydXB0LGIsITEpKSxiLiRzbGlkZXIub2ZmKFwiZm9jdXMuc2xpY2sgYmx1ci5zbGlja1wiKSxiLm9wdGlvbnMuYXJyb3dzPT09ITAmJmIuc2xpZGVDb3VudD5iLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoYi4kcHJldkFycm93JiZiLiRwcmV2QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIixiLmNoYW5nZVNsaWRlKSxiLiRuZXh0QXJyb3cmJmIuJG5leHRBcnJvdy5vZmYoXCJjbGljay5zbGlja1wiLGIuY2hhbmdlU2xpZGUpKSxiLiRsaXN0Lm9mZihcInRvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrXCIsYi5zd2lwZUhhbmRsZXIpLGIuJGxpc3Qub2ZmKFwidG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGlja1wiLGIuc3dpcGVIYW5kbGVyKSxiLiRsaXN0Lm9mZihcInRvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2tcIixiLnN3aXBlSGFuZGxlciksYi4kbGlzdC5vZmYoXCJ0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrXCIsYi5zd2lwZUhhbmRsZXIpLGIuJGxpc3Qub2ZmKFwiY2xpY2suc2xpY2tcIixiLmNsaWNrSGFuZGxlciksYShkb2N1bWVudCkub2ZmKGIudmlzaWJpbGl0eUNoYW5nZSxiLnZpc2liaWxpdHkpLGIuY2xlYW5VcFNsaWRlRXZlbnRzKCksYi5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmYi4kbGlzdC5vZmYoXCJrZXlkb3duLnNsaWNrXCIsYi5rZXlIYW5kbGVyKSxiLm9wdGlvbnMuZm9jdXNPblNlbGVjdD09PSEwJiZhKGIuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKFwiY2xpY2suc2xpY2tcIixiLnNlbGVjdEhhbmRsZXIpLGEod2luZG93KS5vZmYoXCJvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay1cIitiLmluc3RhbmNlVWlkLGIub3JpZW50YXRpb25DaGFuZ2UpLGEod2luZG93KS5vZmYoXCJyZXNpemUuc2xpY2suc2xpY2stXCIrYi5pbnN0YW5jZVVpZCxiLnJlc2l6ZSksYShcIltkcmFnZ2FibGUhPXRydWVdXCIsYi4kc2xpZGVUcmFjaykub2ZmKFwiZHJhZ3N0YXJ0XCIsYi5wcmV2ZW50RGVmYXVsdCksYSh3aW5kb3cpLm9mZihcImxvYWQuc2xpY2suc2xpY2stXCIrYi5pbnN0YW5jZVVpZCxiLnNldFBvc2l0aW9uKSxhKGRvY3VtZW50KS5vZmYoXCJyZWFkeS5zbGljay5zbGljay1cIitiLmluc3RhbmNlVWlkLGIuc2V0UG9zaXRpb24pfSxiLnByb3RvdHlwZS5jbGVhblVwU2xpZGVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2IuJGxpc3Qub2ZmKFwibW91c2VlbnRlci5zbGlja1wiLGEucHJveHkoYi5pbnRlcnJ1cHQsYiwhMCkpLGIuJGxpc3Qub2ZmKFwibW91c2VsZWF2ZS5zbGlja1wiLGEucHJveHkoYi5pbnRlcnJ1cHQsYiwhMSkpfSxiLnByb3RvdHlwZS5jbGVhblVwUm93cz1mdW5jdGlvbigpe3ZhciBiLGE9dGhpczthLm9wdGlvbnMucm93cz4xJiYoYj1hLiRzbGlkZXMuY2hpbGRyZW4oKS5jaGlsZHJlbigpLGIucmVtb3ZlQXR0cihcInN0eWxlXCIpLGEuJHNsaWRlci5lbXB0eSgpLmFwcGVuZChiKSl9LGIucHJvdG90eXBlLmNsaWNrSGFuZGxlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzO2Iuc2hvdWxkQ2xpY2s9PT0hMSYmKGEuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksYS5zdG9wUHJvcGFnYXRpb24oKSxhLnByZXZlbnREZWZhdWx0KCkpfSxiLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXM7Yy5hdXRvUGxheUNsZWFyKCksYy50b3VjaE9iamVjdD17fSxjLmNsZWFuVXBFdmVudHMoKSxhKFwiLnNsaWNrLWNsb25lZFwiLGMuJHNsaWRlcikuZGV0YWNoKCksYy4kZG90cyYmYy4kZG90cy5yZW1vdmUoKSxjLiRwcmV2QXJyb3cmJmMuJHByZXZBcnJvdy5sZW5ndGgmJihjLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXhcIikuY3NzKFwiZGlzcGxheVwiLFwiXCIpLGMuaHRtbEV4cHIudGVzdChjLm9wdGlvbnMucHJldkFycm93KSYmYy4kcHJldkFycm93LnJlbW92ZSgpKSxjLiRuZXh0QXJyb3cmJmMuJG5leHRBcnJvdy5sZW5ndGgmJihjLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW5cIikucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXhcIikuY3NzKFwiZGlzcGxheVwiLFwiXCIpLGMuaHRtbEV4cHIudGVzdChjLm9wdGlvbnMubmV4dEFycm93KSYmYy4kbmV4dEFycm93LnJlbW92ZSgpKSxjLiRzbGlkZXMmJihjLiRzbGlkZXMucmVtb3ZlQ2xhc3MoXCJzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudFwiKS5yZW1vdmVBdHRyKFwiYXJpYS1oaWRkZW5cIikucmVtb3ZlQXR0cihcImRhdGEtc2xpY2staW5kZXhcIikuZWFjaChmdW5jdGlvbigpe2EodGhpcykuYXR0cihcInN0eWxlXCIsYSh0aGlzKS5kYXRhKFwib3JpZ2luYWxTdHlsaW5nXCIpKX0pLGMuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxjLiRzbGlkZVRyYWNrLmRldGFjaCgpLGMuJGxpc3QuZGV0YWNoKCksYy4kc2xpZGVyLmFwcGVuZChjLiRzbGlkZXMpKSxjLmNsZWFuVXBSb3dzKCksYy4kc2xpZGVyLnJlbW92ZUNsYXNzKFwic2xpY2stc2xpZGVyXCIpLGMuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWluaXRpYWxpemVkXCIpLGMuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLWRvdHRlZFwiKSxjLnVuc2xpY2tlZD0hMCxifHxjLiRzbGlkZXIudHJpZ2dlcihcImRlc3Ryb3lcIixbY10pfSxiLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9e307Y1tiLnRyYW5zaXRpb25UeXBlXT1cIlwiLGIub3B0aW9ucy5mYWRlPT09ITE/Yi4kc2xpZGVUcmFjay5jc3MoYyk6Yi4kc2xpZGVzLmVxKGEpLmNzcyhjKX0sYi5wcm90b3R5cGUuZmFkZVNsaWRlPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztjLmNzc1RyYW5zaXRpb25zPT09ITE/KGMuJHNsaWRlcy5lcShhKS5jc3Moe3pJbmRleDpjLm9wdGlvbnMuekluZGV4fSksYy4kc2xpZGVzLmVxKGEpLmFuaW1hdGUoe29wYWNpdHk6MX0sYy5vcHRpb25zLnNwZWVkLGMub3B0aW9ucy5lYXNpbmcsYikpOihjLmFwcGx5VHJhbnNpdGlvbihhKSxjLiRzbGlkZXMuZXEoYSkuY3NzKHtvcGFjaXR5OjEsekluZGV4OmMub3B0aW9ucy56SW5kZXh9KSxiJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Yy5kaXNhYmxlVHJhbnNpdGlvbihhKSxiLmNhbGwoKX0sYy5vcHRpb25zLnNwZWVkKSl9LGIucHJvdG90eXBlLmZhZGVTbGlkZU91dD1mdW5jdGlvbihhKXt2YXIgYj10aGlzO2IuY3NzVHJhbnNpdGlvbnM9PT0hMT9iLiRzbGlkZXMuZXEoYSkuYW5pbWF0ZSh7b3BhY2l0eTowLHpJbmRleDpiLm9wdGlvbnMuekluZGV4LTJ9LGIub3B0aW9ucy5zcGVlZCxiLm9wdGlvbnMuZWFzaW5nKTooYi5hcHBseVRyYW5zaXRpb24oYSksYi4kc2xpZGVzLmVxKGEpLmNzcyh7b3BhY2l0eTowLHpJbmRleDpiLm9wdGlvbnMuekluZGV4LTJ9KSl9LGIucHJvdG90eXBlLmZpbHRlclNsaWRlcz1iLnByb3RvdHlwZS5zbGlja0ZpbHRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzO251bGwhPT1hJiYoYi4kc2xpZGVzQ2FjaGU9Yi4kc2xpZGVzLGIudW5sb2FkKCksYi4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLGIuJHNsaWRlc0NhY2hlLmZpbHRlcihhKS5hcHBlbmRUbyhiLiRzbGlkZVRyYWNrKSxiLnJlaW5pdCgpKX0sYi5wcm90b3R5cGUuZm9jdXNIYW5kbGVyPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcztiLiRzbGlkZXIub2ZmKFwiZm9jdXMuc2xpY2sgYmx1ci5zbGlja1wiKS5vbihcImZvY3VzLnNsaWNrIGJsdXIuc2xpY2tcIixcIio6bm90KC5zbGljay1hcnJvdylcIixmdW5jdGlvbihjKXtjLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO3ZhciBkPWEodGhpcyk7c2V0VGltZW91dChmdW5jdGlvbigpe2Iub3B0aW9ucy5wYXVzZU9uRm9jdXMmJihiLmZvY3Vzc2VkPWQuaXMoXCI6Zm9jdXNcIiksYi5hdXRvUGxheSgpKX0sMCl9KX0sYi5wcm90b3R5cGUuZ2V0Q3VycmVudD1iLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7cmV0dXJuIGEuY3VycmVudFNsaWRlfSxiLnByb3RvdHlwZS5nZXREb3RDb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMsYj0wLGM9MCxkPTA7aWYoYS5vcHRpb25zLmluZmluaXRlPT09ITApZm9yKDtiPGEuc2xpZGVDb3VudDspKytkLGI9YythLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwsYys9YS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPD1hLm9wdGlvbnMuc2xpZGVzVG9TaG93P2Eub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDphLm9wdGlvbnMuc2xpZGVzVG9TaG93O2Vsc2UgaWYoYS5vcHRpb25zLmNlbnRlck1vZGU9PT0hMClkPWEuc2xpZGVDb3VudDtlbHNlIGlmKGEub3B0aW9ucy5hc05hdkZvcilmb3IoO2I8YS5zbGlkZUNvdW50OykrK2QsYj1jK2Eub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxjKz1hLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw8PWEub3B0aW9ucy5zbGlkZXNUb1Nob3c/YS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmEub3B0aW9ucy5zbGlkZXNUb1Nob3c7ZWxzZSBkPTErTWF0aC5jZWlsKChhLnNsaWRlQ291bnQtYS5vcHRpb25zLnNsaWRlc1RvU2hvdykvYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtyZXR1cm4gZC0xfSxiLnByb3RvdHlwZS5nZXRMZWZ0PWZ1bmN0aW9uKGEpe3ZhciBjLGQsZixiPXRoaXMsZT0wO3JldHVybiBiLnNsaWRlT2Zmc2V0PTAsZD1iLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCghMCksYi5vcHRpb25zLmluZmluaXRlPT09ITA/KGIuc2xpZGVDb3VudD5iLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoYi5zbGlkZU9mZnNldD1iLnNsaWRlV2lkdGgqYi5vcHRpb25zLnNsaWRlc1RvU2hvdyotMSxlPWQqYi5vcHRpb25zLnNsaWRlc1RvU2hvdyotMSksYi5zbGlkZUNvdW50JWIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCE9PTAmJmErYi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsPmIuc2xpZGVDb3VudCYmYi5zbGlkZUNvdW50PmIub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihhPmIuc2xpZGVDb3VudD8oYi5zbGlkZU9mZnNldD0oYi5vcHRpb25zLnNsaWRlc1RvU2hvdy0oYS1iLnNsaWRlQ291bnQpKSpiLnNsaWRlV2lkdGgqLTEsZT0oYi5vcHRpb25zLnNsaWRlc1RvU2hvdy0oYS1iLnNsaWRlQ291bnQpKSpkKi0xKTooYi5zbGlkZU9mZnNldD1iLnNsaWRlQ291bnQlYi5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKmIuc2xpZGVXaWR0aCotMSxlPWIuc2xpZGVDb3VudCViLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwqZCotMSkpKTphK2Iub3B0aW9ucy5zbGlkZXNUb1Nob3c+Yi5zbGlkZUNvdW50JiYoYi5zbGlkZU9mZnNldD0oYStiLm9wdGlvbnMuc2xpZGVzVG9TaG93LWIuc2xpZGVDb3VudCkqYi5zbGlkZVdpZHRoLGU9KGErYi5vcHRpb25zLnNsaWRlc1RvU2hvdy1iLnNsaWRlQ291bnQpKmQpLGIuc2xpZGVDb3VudDw9Yi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGIuc2xpZGVPZmZzZXQ9MCxlPTApLGIub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJmIub3B0aW9ucy5pbmZpbml0ZT09PSEwP2Iuc2xpZGVPZmZzZXQrPWIuc2xpZGVXaWR0aCpNYXRoLmZsb29yKGIub3B0aW9ucy5zbGlkZXNUb1Nob3cvMiktYi5zbGlkZVdpZHRoOmIub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJihiLnNsaWRlT2Zmc2V0PTAsYi5zbGlkZU9mZnNldCs9Yi5zbGlkZVdpZHRoKk1hdGguZmxvb3IoYi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSksYz1iLm9wdGlvbnMudmVydGljYWw9PT0hMT9hKmIuc2xpZGVXaWR0aCotMStiLnNsaWRlT2Zmc2V0OmEqZCotMStlLGIub3B0aW9ucy52YXJpYWJsZVdpZHRoPT09ITAmJihmPWIuc2xpZGVDb3VudDw9Yi5vcHRpb25zLnNsaWRlc1RvU2hvd3x8Yi5vcHRpb25zLmluZmluaXRlPT09ITE/Yi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShhKTpiLiRzbGlkZVRyYWNrLmNoaWxkcmVuKFwiLnNsaWNrLXNsaWRlXCIpLmVxKGErYi5vcHRpb25zLnNsaWRlc1RvU2hvdyksYz1iLm9wdGlvbnMucnRsPT09ITA/ZlswXT8tMSooYi4kc2xpZGVUcmFjay53aWR0aCgpLWZbMF0ub2Zmc2V0TGVmdC1mLndpZHRoKCkpOjA6ZlswXT8tMSpmWzBdLm9mZnNldExlZnQ6MCxiLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYoZj1iLnNsaWRlQ291bnQ8PWIub3B0aW9ucy5zbGlkZXNUb1Nob3d8fGIub3B0aW9ucy5pbmZpbml0ZT09PSExP2IuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikuZXEoYSk6Yi4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5lcShhK2Iub3B0aW9ucy5zbGlkZXNUb1Nob3crMSksYz1iLm9wdGlvbnMucnRsPT09ITA/ZlswXT8tMSooYi4kc2xpZGVUcmFjay53aWR0aCgpLWZbMF0ub2Zmc2V0TGVmdC1mLndpZHRoKCkpOjA6ZlswXT8tMSpmWzBdLm9mZnNldExlZnQ6MCxjKz0oYi4kbGlzdC53aWR0aCgpLWYub3V0ZXJXaWR0aCgpKS8yKSksY30sYi5wcm90b3R5cGUuZ2V0T3B0aW9uPWIucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7cmV0dXJuIGIub3B0aW9uc1thXX0sYi5wcm90b3R5cGUuZ2V0TmF2aWdhYmxlSW5kZXhlcz1mdW5jdGlvbigpe3ZhciBlLGE9dGhpcyxiPTAsYz0wLGQ9W107Zm9yKGEub3B0aW9ucy5pbmZpbml0ZT09PSExP2U9YS5zbGlkZUNvdW50OihiPS0xKmEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxjPS0xKmEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCxlPTIqYS5zbGlkZUNvdW50KTtlPmI7KWQucHVzaChiKSxiPWMrYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsLGMrPWEub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDw9YS5vcHRpb25zLnNsaWRlc1RvU2hvdz9hLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw6YS5vcHRpb25zLnNsaWRlc1RvU2hvdztyZXR1cm4gZH0sYi5wcm90b3R5cGUuZ2V0U2xpY2s9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sYi5wcm90b3R5cGUuZ2V0U2xpZGVDb3VudD1mdW5jdGlvbigpe3ZhciBjLGQsZSxiPXRoaXM7cmV0dXJuIGU9Yi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMD9iLnNsaWRlV2lkdGgqTWF0aC5mbG9vcihiLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpOjAsYi5vcHRpb25zLnN3aXBlVG9TbGlkZT09PSEwPyhiLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stc2xpZGVcIikuZWFjaChmdW5jdGlvbihjLGYpe3JldHVybiBmLm9mZnNldExlZnQtZSthKGYpLm91dGVyV2lkdGgoKS8yPi0xKmIuc3dpcGVMZWZ0PyhkPWYsITEpOnZvaWQgMH0pLGM9TWF0aC5hYnMoYShkKS5hdHRyKFwiZGF0YS1zbGljay1pbmRleFwiKS1iLmN1cnJlbnRTbGlkZSl8fDEpOmIub3B0aW9ucy5zbGlkZXNUb1Njcm9sbH0sYi5wcm90b3R5cGUuZ29Ubz1iLnByb3RvdHlwZS5zbGlja0dvVG89ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzO2MuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJpbmRleFwiLGluZGV4OnBhcnNlSW50KGEpfX0sYil9LGIucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oYil7dmFyIGM9dGhpczthKGMuJHNsaWRlcikuaGFzQ2xhc3MoXCJzbGljay1pbml0aWFsaXplZFwiKXx8KGEoYy4kc2xpZGVyKS5hZGRDbGFzcyhcInNsaWNrLWluaXRpYWxpemVkXCIpLGMuYnVpbGRSb3dzKCksYy5idWlsZE91dCgpLGMuc2V0UHJvcHMoKSxjLnN0YXJ0TG9hZCgpLGMubG9hZFNsaWRlcigpLGMuaW5pdGlhbGl6ZUV2ZW50cygpLGMudXBkYXRlQXJyb3dzKCksYy51cGRhdGVEb3RzKCksYy5jaGVja1Jlc3BvbnNpdmUoITApLGMuZm9jdXNIYW5kbGVyKCkpLGImJmMuJHNsaWRlci50cmlnZ2VyKFwiaW5pdFwiLFtjXSksYy5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmYy5pbml0QURBKCksYy5vcHRpb25zLmF1dG9wbGF5JiYoYy5wYXVzZWQ9ITEsYy5hdXRvUGxheSgpKX0sYi5wcm90b3R5cGUuaW5pdEFEQT1mdW5jdGlvbigpe3ZhciBiPXRoaXM7Yi4kc2xpZGVzLmFkZChiLiRzbGlkZVRyYWNrLmZpbmQoXCIuc2xpY2stY2xvbmVkXCIpKS5hdHRyKHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsdGFiaW5kZXg6XCItMVwifSkuZmluZChcImEsIGlucHV0LCBidXR0b24sIHNlbGVjdFwiKS5hdHRyKHt0YWJpbmRleDpcIi0xXCJ9KSxiLiRzbGlkZVRyYWNrLmF0dHIoXCJyb2xlXCIsXCJsaXN0Ym94XCIpLGIuJHNsaWRlcy5ub3QoYi4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKSkuZWFjaChmdW5jdGlvbihjKXthKHRoaXMpLmF0dHIoe3JvbGU6XCJvcHRpb25cIixcImFyaWEtZGVzY3JpYmVkYnlcIjpcInNsaWNrLXNsaWRlXCIrYi5pbnN0YW5jZVVpZCtjfSl9KSxudWxsIT09Yi4kZG90cyYmYi4kZG90cy5hdHRyKFwicm9sZVwiLFwidGFibGlzdFwiKS5maW5kKFwibGlcIikuZWFjaChmdW5jdGlvbihjKXthKHRoaXMpLmF0dHIoe3JvbGU6XCJwcmVzZW50YXRpb25cIixcImFyaWEtc2VsZWN0ZWRcIjpcImZhbHNlXCIsXCJhcmlhLWNvbnRyb2xzXCI6XCJuYXZpZ2F0aW9uXCIrYi5pbnN0YW5jZVVpZCtjLGlkOlwic2xpY2stc2xpZGVcIitiLmluc3RhbmNlVWlkK2N9KX0pLmZpcnN0KCkuYXR0cihcImFyaWEtc2VsZWN0ZWRcIixcInRydWVcIikuZW5kKCkuZmluZChcImJ1dHRvblwiKS5hdHRyKFwicm9sZVwiLFwiYnV0dG9uXCIpLmVuZCgpLmNsb3Nlc3QoXCJkaXZcIikuYXR0cihcInJvbGVcIixcInRvb2xiYXJcIiksYi5hY3RpdmF0ZUFEQSgpfSxiLnByb3RvdHlwZS5pbml0QXJyb3dFdmVudHM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2Eub3B0aW9ucy5hcnJvd3M9PT0hMCYmYS5zbGlkZUNvdW50PmEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJihhLiRwcmV2QXJyb3cub2ZmKFwiY2xpY2suc2xpY2tcIikub24oXCJjbGljay5zbGlja1wiLHttZXNzYWdlOlwicHJldmlvdXNcIn0sYS5jaGFuZ2VTbGlkZSksYS4kbmV4dEFycm93Lm9mZihcImNsaWNrLnNsaWNrXCIpLm9uKFwiY2xpY2suc2xpY2tcIix7bWVzc2FnZTpcIm5leHRcIn0sYS5jaGFuZ2VTbGlkZSkpfSxiLnByb3RvdHlwZS5pbml0RG90RXZlbnRzPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcztiLm9wdGlvbnMuZG90cz09PSEwJiZiLnNsaWRlQ291bnQ+Yi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmYShcImxpXCIsYi4kZG90cykub24oXCJjbGljay5zbGlja1wiLHttZXNzYWdlOlwiaW5kZXhcIn0sYi5jaGFuZ2VTbGlkZSksYi5vcHRpb25zLmRvdHM9PT0hMCYmYi5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXI9PT0hMCYmYShcImxpXCIsYi4kZG90cykub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsYS5wcm94eShiLmludGVycnVwdCxiLCEwKSkub24oXCJtb3VzZWxlYXZlLnNsaWNrXCIsYS5wcm94eShiLmludGVycnVwdCxiLCExKSl9LGIucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cz1mdW5jdGlvbigpe3ZhciBiPXRoaXM7Yi5vcHRpb25zLnBhdXNlT25Ib3ZlciYmKGIuJGxpc3Qub24oXCJtb3VzZWVudGVyLnNsaWNrXCIsYS5wcm94eShiLmludGVycnVwdCxiLCEwKSksYi4kbGlzdC5vbihcIm1vdXNlbGVhdmUuc2xpY2tcIixhLnByb3h5KGIuaW50ZXJydXB0LGIsITEpKSl9LGIucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHM9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2IuaW5pdEFycm93RXZlbnRzKCksYi5pbml0RG90RXZlbnRzKCksYi5pbml0U2xpZGVFdmVudHMoKSxiLiRsaXN0Lm9uKFwidG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2tcIix7YWN0aW9uOlwic3RhcnRcIn0sYi5zd2lwZUhhbmRsZXIpLGIuJGxpc3Qub24oXCJ0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrXCIse2FjdGlvbjpcIm1vdmVcIn0sYi5zd2lwZUhhbmRsZXIpLGIuJGxpc3Qub24oXCJ0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrXCIse2FjdGlvbjpcImVuZFwifSxiLnN3aXBlSGFuZGxlciksYi4kbGlzdC5vbihcInRvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2tcIix7YWN0aW9uOlwiZW5kXCJ9LGIuc3dpcGVIYW5kbGVyKSxiLiRsaXN0Lm9uKFwiY2xpY2suc2xpY2tcIixiLmNsaWNrSGFuZGxlciksYShkb2N1bWVudCkub24oYi52aXNpYmlsaXR5Q2hhbmdlLGEucHJveHkoYi52aXNpYmlsaXR5LGIpKSxiLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwJiZiLiRsaXN0Lm9uKFwia2V5ZG93bi5zbGlja1wiLGIua2V5SGFuZGxlciksYi5vcHRpb25zLmZvY3VzT25TZWxlY3Q9PT0hMCYmYShiLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKFwiY2xpY2suc2xpY2tcIixiLnNlbGVjdEhhbmRsZXIpLGEod2luZG93KS5vbihcIm9yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLVwiK2IuaW5zdGFuY2VVaWQsYS5wcm94eShiLm9yaWVudGF0aW9uQ2hhbmdlLGIpKSxhKHdpbmRvdykub24oXCJyZXNpemUuc2xpY2suc2xpY2stXCIrYi5pbnN0YW5jZVVpZCxhLnByb3h5KGIucmVzaXplLGIpKSxhKFwiW2RyYWdnYWJsZSE9dHJ1ZV1cIixiLiRzbGlkZVRyYWNrKS5vbihcImRyYWdzdGFydFwiLGIucHJldmVudERlZmF1bHQpLGEod2luZG93KS5vbihcImxvYWQuc2xpY2suc2xpY2stXCIrYi5pbnN0YW5jZVVpZCxiLnNldFBvc2l0aW9uKSxhKGRvY3VtZW50KS5vbihcInJlYWR5LnNsaWNrLnNsaWNrLVwiK2IuaW5zdGFuY2VVaWQsYi5zZXRQb3NpdGlvbil9LGIucHJvdG90eXBlLmluaXRVST1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5vcHRpb25zLmFycm93cz09PSEwJiZhLnNsaWRlQ291bnQ+YS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGEuJHByZXZBcnJvdy5zaG93KCksYS4kbmV4dEFycm93LnNob3coKSksYS5vcHRpb25zLmRvdHM9PT0hMCYmYS5zbGlkZUNvdW50PmEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmEuJGRvdHMuc2hvdygpfSxiLnByb3RvdHlwZS5rZXlIYW5kbGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7YS50YXJnZXQudGFnTmFtZS5tYXRjaChcIlRFWFRBUkVBfElOUFVUfFNFTEVDVFwiKXx8KDM3PT09YS5rZXlDb2RlJiZiLm9wdGlvbnMuYWNjZXNzaWJpbGl0eT09PSEwP2IuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6Yi5vcHRpb25zLnJ0bD09PSEwP1wibmV4dFwiOlwicHJldmlvdXNcIn19KTozOT09PWEua2V5Q29kZSYmYi5vcHRpb25zLmFjY2Vzc2liaWxpdHk9PT0hMCYmYi5jaGFuZ2VTbGlkZSh7ZGF0YTp7bWVzc2FnZTpiLm9wdGlvbnMucnRsPT09ITA/XCJwcmV2aW91c1wiOlwibmV4dFwifX0pKX0sYi5wcm90b3R5cGUubGF6eUxvYWQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBnKGMpe2EoXCJpbWdbZGF0YS1sYXp5XVwiLGMpLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1hKHRoaXMpLGQ9YSh0aGlzKS5hdHRyKFwiZGF0YS1sYXp5XCIpLGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtlLm9ubG9hZD1mdW5jdGlvbigpe2MuYW5pbWF0ZSh7b3BhY2l0eTowfSwxMDAsZnVuY3Rpb24oKXtjLmF0dHIoXCJzcmNcIixkKS5hbmltYXRlKHtvcGFjaXR5OjF9LDIwMCxmdW5jdGlvbigpe2MucmVtb3ZlQXR0cihcImRhdGEtbGF6eVwiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9KSxiLiRzbGlkZXIudHJpZ2dlcihcImxhenlMb2FkZWRcIixbYixjLGRdKX0pfSxlLm9uZXJyb3I9ZnVuY3Rpb24oKXtjLnJlbW92ZUF0dHIoXCJkYXRhLWxhenlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLmFkZENsYXNzKFwic2xpY2stbGF6eWxvYWQtZXJyb3JcIiksYi4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZEVycm9yXCIsW2IsYyxkXSl9LGUuc3JjPWR9KX12YXIgYyxkLGUsZixiPXRoaXM7Yi5vcHRpb25zLmNlbnRlck1vZGU9PT0hMD9iLm9wdGlvbnMuaW5maW5pdGU9PT0hMD8oZT1iLmN1cnJlbnRTbGlkZSsoYi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKzEpLGY9ZStiLm9wdGlvbnMuc2xpZGVzVG9TaG93KzIpOihlPU1hdGgubWF4KDAsYi5jdXJyZW50U2xpZGUtKGIub3B0aW9ucy5zbGlkZXNUb1Nob3cvMisxKSksZj0yKyhiLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIrMSkrYi5jdXJyZW50U2xpZGUpOihlPWIub3B0aW9ucy5pbmZpbml0ZT9iLm9wdGlvbnMuc2xpZGVzVG9TaG93K2IuY3VycmVudFNsaWRlOmIuY3VycmVudFNsaWRlLGY9TWF0aC5jZWlsKGUrYi5vcHRpb25zLnNsaWRlc1RvU2hvdyksYi5vcHRpb25zLmZhZGU9PT0hMCYmKGU+MCYmZS0tLGY8PWIuc2xpZGVDb3VudCYmZisrKSksYz1iLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKS5zbGljZShlLGYpLGcoYyksYi5zbGlkZUNvdW50PD1iLm9wdGlvbnMuc2xpZGVzVG9TaG93PyhkPWIuJHNsaWRlci5maW5kKFwiLnNsaWNrLXNsaWRlXCIpLGcoZCkpOmIuY3VycmVudFNsaWRlPj1iLnNsaWRlQ291bnQtYi5vcHRpb25zLnNsaWRlc1RvU2hvdz8oZD1iLiRzbGlkZXIuZmluZChcIi5zbGljay1jbG9uZWRcIikuc2xpY2UoMCxiLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxnKGQpKTowPT09Yi5jdXJyZW50U2xpZGUmJihkPWIuJHNsaWRlci5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5zbGljZSgtMSpiLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxnKGQpKX0sYi5wcm90b3R5cGUubG9hZFNsaWRlcj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5zZXRQb3NpdGlvbigpLGEuJHNsaWRlVHJhY2suY3NzKHtvcGFjaXR5OjF9KSxhLiRzbGlkZXIucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLGEuaW5pdFVJKCksXCJwcm9ncmVzc2l2ZVwiPT09YS5vcHRpb25zLmxhenlMb2FkJiZhLnByb2dyZXNzaXZlTGF6eUxvYWQoKX0sYi5wcm90b3R5cGUubmV4dD1iLnByb3RvdHlwZS5zbGlja05leHQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2EuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJuZXh0XCJ9fSl9LGIucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczthLmNoZWNrUmVzcG9uc2l2ZSgpLGEuc2V0UG9zaXRpb24oKX0sYi5wcm90b3R5cGUucGF1c2U9Yi5wcm90b3R5cGUuc2xpY2tQYXVzZT1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5hdXRvUGxheUNsZWFyKCksYS5wYXVzZWQ9ITB9LGIucHJvdG90eXBlLnBsYXk9Yi5wcm90b3R5cGUuc2xpY2tQbGF5PWZ1bmN0aW9uKCl7dmFyIGE9dGhpczthLmF1dG9QbGF5KCksYS5vcHRpb25zLmF1dG9wbGF5PSEwLGEucGF1c2VkPSExLGEuZm9jdXNzZWQ9ITEsYS5pbnRlcnJ1cHRlZD0hMX0sYi5wcm90b3R5cGUucG9zdFNsaWRlPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7Yi51bnNsaWNrZWR8fChiLiRzbGlkZXIudHJpZ2dlcihcImFmdGVyQ2hhbmdlXCIsW2IsYV0pLGIuYW5pbWF0aW5nPSExLGIuc2V0UG9zaXRpb24oKSxiLnN3aXBlTGVmdD1udWxsLGIub3B0aW9ucy5hdXRvcGxheSYmYi5hdXRvUGxheSgpLGIub3B0aW9ucy5hY2Nlc3NpYmlsaXR5PT09ITAmJmIuaW5pdEFEQSgpKX0sYi5wcm90b3R5cGUucHJldj1iLnByb3RvdHlwZS5zbGlja1ByZXY9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2EuY2hhbmdlU2xpZGUoe2RhdGE6e21lc3NhZ2U6XCJwcmV2aW91c1wifX0pfSxiLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbihhKXthLnByZXZlbnREZWZhdWx0KCl9LGIucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQ9ZnVuY3Rpb24oYil7Yj1ifHwxO3ZhciBlLGYsZyxjPXRoaXMsZD1hKFwiaW1nW2RhdGEtbGF6eV1cIixjLiRzbGlkZXIpO2QubGVuZ3RoPyhlPWQuZmlyc3QoKSxmPWUuYXR0cihcImRhdGEtbGF6eVwiKSxnPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiksZy5vbmxvYWQ9ZnVuY3Rpb24oKXtlLmF0dHIoXCJzcmNcIixmKS5yZW1vdmVBdHRyKFwiZGF0YS1sYXp5XCIpLnJlbW92ZUNsYXNzKFwic2xpY2stbG9hZGluZ1wiKSxjLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQ9PT0hMCYmYy5zZXRQb3NpdGlvbigpLGMuJHNsaWRlci50cmlnZ2VyKFwibGF6eUxvYWRlZFwiLFtjLGUsZl0pLGMucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpfSxnLm9uZXJyb3I9ZnVuY3Rpb24oKXszPmI/c2V0VGltZW91dChmdW5jdGlvbigpe2MucHJvZ3Jlc3NpdmVMYXp5TG9hZChiKzEpfSw1MDApOihlLnJlbW92ZUF0dHIoXCJkYXRhLWxhenlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1sb2FkaW5nXCIpLmFkZENsYXNzKFwic2xpY2stbGF6eWxvYWQtZXJyb3JcIiksYy4kc2xpZGVyLnRyaWdnZXIoXCJsYXp5TG9hZEVycm9yXCIsW2MsZSxmXSksYy5wcm9ncmVzc2l2ZUxhenlMb2FkKCkpfSxnLnNyYz1mKTpjLiRzbGlkZXIudHJpZ2dlcihcImFsbEltYWdlc0xvYWRlZFwiLFtjXSl9LGIucHJvdG90eXBlLnJlZnJlc2g9ZnVuY3Rpb24oYil7dmFyIGQsZSxjPXRoaXM7ZT1jLnNsaWRlQ291bnQtYy5vcHRpb25zLnNsaWRlc1RvU2hvdywhYy5vcHRpb25zLmluZmluaXRlJiZjLmN1cnJlbnRTbGlkZT5lJiYoYy5jdXJyZW50U2xpZGU9ZSksYy5zbGlkZUNvdW50PD1jLm9wdGlvbnMuc2xpZGVzVG9TaG93JiYoYy5jdXJyZW50U2xpZGU9MCksZD1jLmN1cnJlbnRTbGlkZSxjLmRlc3Ryb3koITApLGEuZXh0ZW5kKGMsYy5pbml0aWFscyx7Y3VycmVudFNsaWRlOmR9KSxjLmluaXQoKSxifHxjLmNoYW5nZVNsaWRlKHtkYXRhOnttZXNzYWdlOlwiaW5kZXhcIixpbmRleDpkfX0sITEpfSxiLnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzPWZ1bmN0aW9uKCl7dmFyIGMsZCxlLGI9dGhpcyxmPWIub3B0aW9ucy5yZXNwb25zaXZlfHxudWxsO2lmKFwiYXJyYXlcIj09PWEudHlwZShmKSYmZi5sZW5ndGgpe2IucmVzcG9uZFRvPWIub3B0aW9ucy5yZXNwb25kVG98fFwid2luZG93XCI7Zm9yKGMgaW4gZilpZihlPWIuYnJlYWtwb2ludHMubGVuZ3RoLTEsZD1mW2NdLmJyZWFrcG9pbnQsZi5oYXNPd25Qcm9wZXJ0eShjKSl7Zm9yKDtlPj0wOyliLmJyZWFrcG9pbnRzW2VdJiZiLmJyZWFrcG9pbnRzW2VdPT09ZCYmYi5icmVha3BvaW50cy5zcGxpY2UoZSwxKSxlLS07Yi5icmVha3BvaW50cy5wdXNoKGQpLGIuYnJlYWtwb2ludFNldHRpbmdzW2RdPWZbY10uc2V0dGluZ3N9Yi5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGIub3B0aW9ucy5tb2JpbGVGaXJzdD9hLWM6Yy1hfSl9fSxiLnByb3RvdHlwZS5yZWluaXQ9ZnVuY3Rpb24oKXt2YXIgYj10aGlzO2IuJHNsaWRlcz1iLiRzbGlkZVRyYWNrLmNoaWxkcmVuKGIub3B0aW9ucy5zbGlkZSkuYWRkQ2xhc3MoXCJzbGljay1zbGlkZVwiKSxiLnNsaWRlQ291bnQ9Yi4kc2xpZGVzLmxlbmd0aCxiLmN1cnJlbnRTbGlkZT49Yi5zbGlkZUNvdW50JiYwIT09Yi5jdXJyZW50U2xpZGUmJihiLmN1cnJlbnRTbGlkZT1iLmN1cnJlbnRTbGlkZS1iLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpLGIuc2xpZGVDb3VudDw9Yi5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGIuY3VycmVudFNsaWRlPTApLGIucmVnaXN0ZXJCcmVha3BvaW50cygpLGIuc2V0UHJvcHMoKSxiLnNldHVwSW5maW5pdGUoKSxiLmJ1aWxkQXJyb3dzKCksYi51cGRhdGVBcnJvd3MoKSxiLmluaXRBcnJvd0V2ZW50cygpLGIuYnVpbGREb3RzKCksYi51cGRhdGVEb3RzKCksYi5pbml0RG90RXZlbnRzKCksYi5jbGVhblVwU2xpZGVFdmVudHMoKSxiLmluaXRTbGlkZUV2ZW50cygpLGIuY2hlY2tSZXNwb25zaXZlKCExLCEwKSxiLm9wdGlvbnMuZm9jdXNPblNlbGVjdD09PSEwJiZhKGIuJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oXCJjbGljay5zbGlja1wiLGIuc2VsZWN0SGFuZGxlciksYi5zZXRTbGlkZUNsYXNzZXMoXCJudW1iZXJcIj09dHlwZW9mIGIuY3VycmVudFNsaWRlP2IuY3VycmVudFNsaWRlOjApLGIuc2V0UG9zaXRpb24oKSxiLmZvY3VzSGFuZGxlcigpLGIucGF1c2VkPSFiLm9wdGlvbnMuYXV0b3BsYXksYi5hdXRvUGxheSgpLGIuJHNsaWRlci50cmlnZ2VyKFwicmVJbml0XCIsW2JdKX0sYi5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKCl7dmFyIGI9dGhpczthKHdpbmRvdykud2lkdGgoKSE9PWIud2luZG93V2lkdGgmJihjbGVhclRpbWVvdXQoYi53aW5kb3dEZWxheSksYi53aW5kb3dEZWxheT13aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2Iud2luZG93V2lkdGg9YSh3aW5kb3cpLndpZHRoKCksYi5jaGVja1Jlc3BvbnNpdmUoKSxiLnVuc2xpY2tlZHx8Yi5zZXRQb3NpdGlvbigpfSw1MCkpfSxiLnByb3RvdHlwZS5yZW1vdmVTbGlkZT1iLnByb3RvdHlwZS5zbGlja1JlbW92ZT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcztyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGE/KGI9YSxhPWI9PT0hMD8wOmQuc2xpZGVDb3VudC0xKTphPWI9PT0hMD8tLWE6YSxkLnNsaWRlQ291bnQ8MXx8MD5hfHxhPmQuc2xpZGVDb3VudC0xPyExOihkLnVubG9hZCgpLGM9PT0hMD9kLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCkucmVtb3ZlKCk6ZC4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmVxKGEpLnJlbW92ZSgpLGQuJHNsaWRlcz1kLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSksZC4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpLGQuJHNsaWRlVHJhY2suYXBwZW5kKGQuJHNsaWRlcyksZC4kc2xpZGVzQ2FjaGU9ZC4kc2xpZGVzLHZvaWQgZC5yZWluaXQoKSl9LGIucHJvdG90eXBlLnNldENTUz1mdW5jdGlvbihhKXt2YXIgZCxlLGI9dGhpcyxjPXt9O2Iub3B0aW9ucy5ydGw9PT0hMCYmKGE9LWEpLGQ9XCJsZWZ0XCI9PWIucG9zaXRpb25Qcm9wP01hdGguY2VpbChhKStcInB4XCI6XCIwcHhcIixlPVwidG9wXCI9PWIucG9zaXRpb25Qcm9wP01hdGguY2VpbChhKStcInB4XCI6XCIwcHhcIixjW2IucG9zaXRpb25Qcm9wXT1hLGIudHJhbnNmb3Jtc0VuYWJsZWQ9PT0hMT9iLiRzbGlkZVRyYWNrLmNzcyhjKTooYz17fSxiLmNzc1RyYW5zaXRpb25zPT09ITE/KGNbYi5hbmltVHlwZV09XCJ0cmFuc2xhdGUoXCIrZCtcIiwgXCIrZStcIilcIixiLiRzbGlkZVRyYWNrLmNzcyhjKSk6KGNbYi5hbmltVHlwZV09XCJ0cmFuc2xhdGUzZChcIitkK1wiLCBcIitlK1wiLCAwcHgpXCIsYi4kc2xpZGVUcmFjay5jc3MoYykpKX0sYi5wcm90b3R5cGUuc2V0RGltZW5zaW9ucz1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5vcHRpb25zLnZlcnRpY2FsPT09ITE/YS5vcHRpb25zLmNlbnRlck1vZGU9PT0hMCYmYS4kbGlzdC5jc3Moe3BhZGRpbmc6XCIwcHggXCIrYS5vcHRpb25zLmNlbnRlclBhZGRpbmd9KTooYS4kbGlzdC5oZWlnaHQoYS4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQoITApKmEub3B0aW9ucy5zbGlkZXNUb1Nob3cpLGEub3B0aW9ucy5jZW50ZXJNb2RlPT09ITAmJmEuJGxpc3QuY3NzKHtwYWRkaW5nOmEub3B0aW9ucy5jZW50ZXJQYWRkaW5nK1wiIDBweFwifSkpLGEubGlzdFdpZHRoPWEuJGxpc3Qud2lkdGgoKSxhLmxpc3RIZWlnaHQ9YS4kbGlzdC5oZWlnaHQoKSxhLm9wdGlvbnMudmVydGljYWw9PT0hMSYmYS5vcHRpb25zLnZhcmlhYmxlV2lkdGg9PT0hMT8oYS5zbGlkZVdpZHRoPU1hdGguY2VpbChhLmxpc3RXaWR0aC9hLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxhLiRzbGlkZVRyYWNrLndpZHRoKE1hdGguY2VpbChhLnNsaWRlV2lkdGgqYS4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS5sZW5ndGgpKSk6YS5vcHRpb25zLnZhcmlhYmxlV2lkdGg9PT0hMD9hLiRzbGlkZVRyYWNrLndpZHRoKDVlMyphLnNsaWRlQ291bnQpOihhLnNsaWRlV2lkdGg9TWF0aC5jZWlsKGEubGlzdFdpZHRoKSxhLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoYS4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQoITApKmEuJHNsaWRlVHJhY2suY2hpbGRyZW4oXCIuc2xpY2stc2xpZGVcIikubGVuZ3RoKSkpO3ZhciBiPWEuJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgoITApLWEuJHNsaWRlcy5maXJzdCgpLndpZHRoKCk7YS5vcHRpb25zLnZhcmlhYmxlV2lkdGg9PT0hMSYmYS4kc2xpZGVUcmFjay5jaGlsZHJlbihcIi5zbGljay1zbGlkZVwiKS53aWR0aChhLnNsaWRlV2lkdGgtYil9LGIucHJvdG90eXBlLnNldEZhZGU9ZnVuY3Rpb24oKXt2YXIgYyxiPXRoaXM7Yi4kc2xpZGVzLmVhY2goZnVuY3Rpb24oZCxlKXtjPWIuc2xpZGVXaWR0aCpkKi0xLGIub3B0aW9ucy5ydGw9PT0hMD9hKGUpLmNzcyh7cG9zaXRpb246XCJyZWxhdGl2ZVwiLHJpZ2h0OmMsdG9wOjAsekluZGV4OmIub3B0aW9ucy56SW5kZXgtMixvcGFjaXR5OjB9KTphKGUpLmNzcyh7cG9zaXRpb246XCJyZWxhdGl2ZVwiLGxlZnQ6Yyx0b3A6MCx6SW5kZXg6Yi5vcHRpb25zLnpJbmRleC0yLG9wYWNpdHk6MH0pfSksYi4kc2xpZGVzLmVxKGIuY3VycmVudFNsaWRlKS5jc3Moe3pJbmRleDpiLm9wdGlvbnMuekluZGV4LTEsb3BhY2l0eToxfSl9LGIucHJvdG90eXBlLnNldEhlaWdodD1mdW5jdGlvbigpe3ZhciBhPXRoaXM7aWYoMT09PWEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmEub3B0aW9ucy5hZGFwdGl2ZUhlaWdodD09PSEwJiZhLm9wdGlvbnMudmVydGljYWw9PT0hMSl7dmFyIGI9YS4kc2xpZGVzLmVxKGEuY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCghMCk7YS4kbGlzdC5jc3MoXCJoZWlnaHRcIixiKX19LGIucHJvdG90eXBlLnNldE9wdGlvbj1iLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbj1mdW5jdGlvbigpe3ZhciBjLGQsZSxmLGgsYj10aGlzLGc9ITE7aWYoXCJvYmplY3RcIj09PWEudHlwZShhcmd1bWVudHNbMF0pPyhlPWFyZ3VtZW50c1swXSxnPWFyZ3VtZW50c1sxXSxoPVwibXVsdGlwbGVcIik6XCJzdHJpbmdcIj09PWEudHlwZShhcmd1bWVudHNbMF0pJiYoZT1hcmd1bWVudHNbMF0sZj1hcmd1bWVudHNbMV0sZz1hcmd1bWVudHNbMl0sXCJyZXNwb25zaXZlXCI9PT1hcmd1bWVudHNbMF0mJlwiYXJyYXlcIj09PWEudHlwZShhcmd1bWVudHNbMV0pP2g9XCJyZXNwb25zaXZlXCI6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGFyZ3VtZW50c1sxXSYmKGg9XCJzaW5nbGVcIikpLFwic2luZ2xlXCI9PT1oKWIub3B0aW9uc1tlXT1mO2Vsc2UgaWYoXCJtdWx0aXBsZVwiPT09aClhLmVhY2goZSxmdW5jdGlvbihhLGMpe2Iub3B0aW9uc1thXT1jfSk7ZWxzZSBpZihcInJlc3BvbnNpdmVcIj09PWgpZm9yKGQgaW4gZilpZihcImFycmF5XCIhPT1hLnR5cGUoYi5vcHRpb25zLnJlc3BvbnNpdmUpKWIub3B0aW9ucy5yZXNwb25zaXZlPVtmW2RdXTtlbHNle2ZvcihjPWIub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aC0xO2M+PTA7KWIub3B0aW9ucy5yZXNwb25zaXZlW2NdLmJyZWFrcG9pbnQ9PT1mW2RdLmJyZWFrcG9pbnQmJmIub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShjLDEpLGMtLTtiLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKGZbZF0pfWcmJihiLnVubG9hZCgpLGIucmVpbml0KCkpfSxiLnByb3RvdHlwZS5zZXRQb3NpdGlvbj1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5zZXREaW1lbnNpb25zKCksYS5zZXRIZWlnaHQoKSxhLm9wdGlvbnMuZmFkZT09PSExP2Euc2V0Q1NTKGEuZ2V0TGVmdChhLmN1cnJlbnRTbGlkZSkpOmEuc2V0RmFkZSgpLGEuJHNsaWRlci50cmlnZ2VyKFwic2V0UG9zaXRpb25cIixbYV0pfSxiLnByb3RvdHlwZS5zZXRQcm9wcz1mdW5jdGlvbigpe3ZhciBhPXRoaXMsYj1kb2N1bWVudC5ib2R5LnN0eWxlO2EucG9zaXRpb25Qcm9wPWEub3B0aW9ucy52ZXJ0aWNhbD09PSEwP1widG9wXCI6XCJsZWZ0XCIsXCJ0b3BcIj09PWEucG9zaXRpb25Qcm9wP2EuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpOmEuJHNsaWRlci5yZW1vdmVDbGFzcyhcInNsaWNrLXZlcnRpY2FsXCIpLCh2b2lkIDAhPT1iLldlYmtpdFRyYW5zaXRpb258fHZvaWQgMCE9PWIuTW96VHJhbnNpdGlvbnx8dm9pZCAwIT09Yi5tc1RyYW5zaXRpb24pJiZhLm9wdGlvbnMudXNlQ1NTPT09ITAmJihhLmNzc1RyYW5zaXRpb25zPSEwKSxhLm9wdGlvbnMuZmFkZSYmKFwibnVtYmVyXCI9PXR5cGVvZiBhLm9wdGlvbnMuekluZGV4P2Eub3B0aW9ucy56SW5kZXg8MyYmKGEub3B0aW9ucy56SW5kZXg9Myk6YS5vcHRpb25zLnpJbmRleD1hLmRlZmF1bHRzLnpJbmRleCksdm9pZCAwIT09Yi5PVHJhbnNmb3JtJiYoYS5hbmltVHlwZT1cIk9UcmFuc2Zvcm1cIixhLnRyYW5zZm9ybVR5cGU9XCItby10cmFuc2Zvcm1cIixhLnRyYW5zaXRpb25UeXBlPVwiT1RyYW5zaXRpb25cIix2b2lkIDA9PT1iLnBlcnNwZWN0aXZlUHJvcGVydHkmJnZvaWQgMD09PWIud2Via2l0UGVyc3BlY3RpdmUmJihhLmFuaW1UeXBlPSExKSksdm9pZCAwIT09Yi5Nb3pUcmFuc2Zvcm0mJihhLmFuaW1UeXBlPVwiTW96VHJhbnNmb3JtXCIsYS50cmFuc2Zvcm1UeXBlPVwiLW1vei10cmFuc2Zvcm1cIixhLnRyYW5zaXRpb25UeXBlPVwiTW96VHJhbnNpdGlvblwiLHZvaWQgMD09PWIucGVyc3BlY3RpdmVQcm9wZXJ0eSYmdm9pZCAwPT09Yi5Nb3pQZXJzcGVjdGl2ZSYmKGEuYW5pbVR5cGU9ITEpKSx2b2lkIDAhPT1iLndlYmtpdFRyYW5zZm9ybSYmKGEuYW5pbVR5cGU9XCJ3ZWJraXRUcmFuc2Zvcm1cIixhLnRyYW5zZm9ybVR5cGU9XCItd2Via2l0LXRyYW5zZm9ybVwiLGEudHJhbnNpdGlvblR5cGU9XCJ3ZWJraXRUcmFuc2l0aW9uXCIsdm9pZCAwPT09Yi5wZXJzcGVjdGl2ZVByb3BlcnR5JiZ2b2lkIDA9PT1iLndlYmtpdFBlcnNwZWN0aXZlJiYoYS5hbmltVHlwZT0hMSkpLHZvaWQgMCE9PWIubXNUcmFuc2Zvcm0mJihhLmFuaW1UeXBlPVwibXNUcmFuc2Zvcm1cIixhLnRyYW5zZm9ybVR5cGU9XCItbXMtdHJhbnNmb3JtXCIsYS50cmFuc2l0aW9uVHlwZT1cIm1zVHJhbnNpdGlvblwiLHZvaWQgMD09PWIubXNUcmFuc2Zvcm0mJihhLmFuaW1UeXBlPSExKSksdm9pZCAwIT09Yi50cmFuc2Zvcm0mJmEuYW5pbVR5cGUhPT0hMSYmKGEuYW5pbVR5cGU9XCJ0cmFuc2Zvcm1cIixhLnRyYW5zZm9ybVR5cGU9XCJ0cmFuc2Zvcm1cIixhLnRyYW5zaXRpb25UeXBlPVwidHJhbnNpdGlvblwiKSxhLnRyYW5zZm9ybXNFbmFibGVkPWEub3B0aW9ucy51c2VUcmFuc2Zvcm0mJm51bGwhPT1hLmFuaW1UeXBlJiZhLmFuaW1UeXBlIT09ITF9LGIucHJvdG90eXBlLnNldFNsaWRlQ2xhc3Nlcz1mdW5jdGlvbihhKXt2YXIgYyxkLGUsZixiPXRoaXM7ZD1iLiRzbGlkZXIuZmluZChcIi5zbGljay1zbGlkZVwiKS5yZW1vdmVDbGFzcyhcInNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudFwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIiksYi4kc2xpZGVzLmVxKGEpLmFkZENsYXNzKFwic2xpY2stY3VycmVudFwiKSxiLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwPyhjPU1hdGguZmxvb3IoYi5vcHRpb25zLnNsaWRlc1RvU2hvdy8yKSxiLm9wdGlvbnMuaW5maW5pdGU9PT0hMCYmKGE+PWMmJmE8PWIuc2xpZGVDb3VudC0xLWM/Yi4kc2xpZGVzLnNsaWNlKGEtYyxhK2MrMSkuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTooZT1iLm9wdGlvbnMuc2xpZGVzVG9TaG93K2EsXG5kLnNsaWNlKGUtYysxLGUrYysyKS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKSwwPT09YT9kLmVxKGQubGVuZ3RoLTEtYi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIik6YT09PWIuc2xpZGVDb3VudC0xJiZkLmVxKGIub3B0aW9ucy5zbGlkZXNUb1Nob3cpLmFkZENsYXNzKFwic2xpY2stY2VudGVyXCIpKSxiLiRzbGlkZXMuZXEoYSkuYWRkQ2xhc3MoXCJzbGljay1jZW50ZXJcIikpOmE+PTAmJmE8PWIuc2xpZGVDb3VudC1iLm9wdGlvbnMuc2xpZGVzVG9TaG93P2IuJHNsaWRlcy5zbGljZShhLGErYi5vcHRpb25zLnNsaWRlc1RvU2hvdykuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTpkLmxlbmd0aDw9Yi5vcHRpb25zLnNsaWRlc1RvU2hvdz9kLmFkZENsYXNzKFwic2xpY2stYWN0aXZlXCIpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwiZmFsc2VcIik6KGY9Yi5zbGlkZUNvdW50JWIub3B0aW9ucy5zbGlkZXNUb1Nob3csZT1iLm9wdGlvbnMuaW5maW5pdGU9PT0hMD9iLm9wdGlvbnMuc2xpZGVzVG9TaG93K2E6YSxiLm9wdGlvbnMuc2xpZGVzVG9TaG93PT1iLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwmJmIuc2xpZGVDb3VudC1hPGIub3B0aW9ucy5zbGlkZXNUb1Nob3c/ZC5zbGljZShlLShiLm9wdGlvbnMuc2xpZGVzVG9TaG93LWYpLGUrZikuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKTpkLnNsaWNlKGUsZStiLm9wdGlvbnMuc2xpZGVzVG9TaG93KS5hZGRDbGFzcyhcInNsaWNrLWFjdGl2ZVwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpKSxcIm9uZGVtYW5kXCI9PT1iLm9wdGlvbnMubGF6eUxvYWQmJmIubGF6eUxvYWQoKX0sYi5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZT1mdW5jdGlvbigpe3ZhciBjLGQsZSxiPXRoaXM7aWYoYi5vcHRpb25zLmZhZGU9PT0hMCYmKGIub3B0aW9ucy5jZW50ZXJNb2RlPSExKSxiLm9wdGlvbnMuaW5maW5pdGU9PT0hMCYmYi5vcHRpb25zLmZhZGU9PT0hMSYmKGQ9bnVsbCxiLnNsaWRlQ291bnQ+Yi5vcHRpb25zLnNsaWRlc1RvU2hvdykpe2ZvcihlPWIub3B0aW9ucy5jZW50ZXJNb2RlPT09ITA/Yi5vcHRpb25zLnNsaWRlc1RvU2hvdysxOmIub3B0aW9ucy5zbGlkZXNUb1Nob3csYz1iLnNsaWRlQ291bnQ7Yz5iLnNsaWRlQ291bnQtZTtjLT0xKWQ9Yy0xLGEoYi4kc2xpZGVzW2RdKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixkLWIuc2xpZGVDb3VudCkucHJlcGVuZFRvKGIuJHNsaWRlVHJhY2spLmFkZENsYXNzKFwic2xpY2stY2xvbmVkXCIpO2ZvcihjPTA7ZT5jO2MrPTEpZD1jLGEoYi4kc2xpZGVzW2RdKS5jbG9uZSghMCkuYXR0cihcImlkXCIsXCJcIikuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIixkK2Iuc2xpZGVDb3VudCkuYXBwZW5kVG8oYi4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoXCJzbGljay1jbG9uZWRcIik7Yi4kc2xpZGVUcmFjay5maW5kKFwiLnNsaWNrLWNsb25lZFwiKS5maW5kKFwiW2lkXVwiKS5lYWNoKGZ1bmN0aW9uKCl7YSh0aGlzKS5hdHRyKFwiaWRcIixcIlwiKX0pfX0sYi5wcm90b3R5cGUuaW50ZXJydXB0PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXM7YXx8Yi5hdXRvUGxheSgpLGIuaW50ZXJydXB0ZWQ9YX0sYi5wcm90b3R5cGUuc2VsZWN0SGFuZGxlcj1mdW5jdGlvbihiKXt2YXIgYz10aGlzLGQ9YShiLnRhcmdldCkuaXMoXCIuc2xpY2stc2xpZGVcIik/YShiLnRhcmdldCk6YShiLnRhcmdldCkucGFyZW50cyhcIi5zbGljay1zbGlkZVwiKSxlPXBhcnNlSW50KGQuYXR0cihcImRhdGEtc2xpY2staW5kZXhcIikpO3JldHVybiBlfHwoZT0wKSxjLnNsaWRlQ291bnQ8PWMub3B0aW9ucy5zbGlkZXNUb1Nob3c/KGMuc2V0U2xpZGVDbGFzc2VzKGUpLHZvaWQgYy5hc05hdkZvcihlKSk6dm9pZCBjLnNsaWRlSGFuZGxlcihlKX0sYi5wcm90b3R5cGUuc2xpZGVIYW5kbGVyPWZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxqLGg9bnVsbCxpPXRoaXM7cmV0dXJuIGI9Ynx8ITEsaS5hbmltYXRpbmc9PT0hMCYmaS5vcHRpb25zLndhaXRGb3JBbmltYXRlPT09ITB8fGkub3B0aW9ucy5mYWRlPT09ITAmJmkuY3VycmVudFNsaWRlPT09YXx8aS5zbGlkZUNvdW50PD1pLm9wdGlvbnMuc2xpZGVzVG9TaG93P3ZvaWQgMDooYj09PSExJiZpLmFzTmF2Rm9yKGEpLGQ9YSxoPWkuZ2V0TGVmdChkKSxnPWkuZ2V0TGVmdChpLmN1cnJlbnRTbGlkZSksaS5jdXJyZW50TGVmdD1udWxsPT09aS5zd2lwZUxlZnQ/ZzppLnN3aXBlTGVmdCxpLm9wdGlvbnMuaW5maW5pdGU9PT0hMSYmaS5vcHRpb25zLmNlbnRlck1vZGU9PT0hMSYmKDA+YXx8YT5pLmdldERvdENvdW50KCkqaS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKT92b2lkKGkub3B0aW9ucy5mYWRlPT09ITEmJihkPWkuY3VycmVudFNsaWRlLGMhPT0hMD9pLmFuaW1hdGVTbGlkZShnLGZ1bmN0aW9uKCl7aS5wb3N0U2xpZGUoZCl9KTppLnBvc3RTbGlkZShkKSkpOmkub3B0aW9ucy5pbmZpbml0ZT09PSExJiZpLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYoMD5hfHxhPmkuc2xpZGVDb3VudC1pLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpP3ZvaWQoaS5vcHRpb25zLmZhZGU9PT0hMSYmKGQ9aS5jdXJyZW50U2xpZGUsYyE9PSEwP2kuYW5pbWF0ZVNsaWRlKGcsZnVuY3Rpb24oKXtpLnBvc3RTbGlkZShkKX0pOmkucG9zdFNsaWRlKGQpKSk6KGkub3B0aW9ucy5hdXRvcGxheSYmY2xlYXJJbnRlcnZhbChpLmF1dG9QbGF5VGltZXIpLGU9MD5kP2kuc2xpZGVDb3VudCVpLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwhPT0wP2kuc2xpZGVDb3VudC1pLnNsaWRlQ291bnQlaS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOmkuc2xpZGVDb3VudCtkOmQ+PWkuc2xpZGVDb3VudD9pLnNsaWRlQ291bnQlaS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIT09MD8wOmQtaS5zbGlkZUNvdW50OmQsaS5hbmltYXRpbmc9ITAsaS4kc2xpZGVyLnRyaWdnZXIoXCJiZWZvcmVDaGFuZ2VcIixbaSxpLmN1cnJlbnRTbGlkZSxlXSksZj1pLmN1cnJlbnRTbGlkZSxpLmN1cnJlbnRTbGlkZT1lLGkuc2V0U2xpZGVDbGFzc2VzKGkuY3VycmVudFNsaWRlKSxpLm9wdGlvbnMuYXNOYXZGb3ImJihqPWkuZ2V0TmF2VGFyZ2V0KCksaj1qLnNsaWNrKFwiZ2V0U2xpY2tcIiksai5zbGlkZUNvdW50PD1qLm9wdGlvbnMuc2xpZGVzVG9TaG93JiZqLnNldFNsaWRlQ2xhc3NlcyhpLmN1cnJlbnRTbGlkZSkpLGkudXBkYXRlRG90cygpLGkudXBkYXRlQXJyb3dzKCksaS5vcHRpb25zLmZhZGU9PT0hMD8oYyE9PSEwPyhpLmZhZGVTbGlkZU91dChmKSxpLmZhZGVTbGlkZShlLGZ1bmN0aW9uKCl7aS5wb3N0U2xpZGUoZSl9KSk6aS5wb3N0U2xpZGUoZSksdm9pZCBpLmFuaW1hdGVIZWlnaHQoKSk6dm9pZChjIT09ITA/aS5hbmltYXRlU2xpZGUoaCxmdW5jdGlvbigpe2kucG9zdFNsaWRlKGUpfSk6aS5wb3N0U2xpZGUoZSkpKSl9LGIucHJvdG90eXBlLnN0YXJ0TG9hZD1mdW5jdGlvbigpe3ZhciBhPXRoaXM7YS5vcHRpb25zLmFycm93cz09PSEwJiZhLnNsaWRlQ291bnQ+YS5vcHRpb25zLnNsaWRlc1RvU2hvdyYmKGEuJHByZXZBcnJvdy5oaWRlKCksYS4kbmV4dEFycm93LmhpZGUoKSksYS5vcHRpb25zLmRvdHM9PT0hMCYmYS5zbGlkZUNvdW50PmEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmEuJGRvdHMuaGlkZSgpLGEuJHNsaWRlci5hZGRDbGFzcyhcInNsaWNrLWxvYWRpbmdcIil9LGIucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZT10aGlzO3JldHVybiBhPWUudG91Y2hPYmplY3Quc3RhcnRYLWUudG91Y2hPYmplY3QuY3VyWCxiPWUudG91Y2hPYmplY3Quc3RhcnRZLWUudG91Y2hPYmplY3QuY3VyWSxjPU1hdGguYXRhbjIoYixhKSxkPU1hdGgucm91bmQoMTgwKmMvTWF0aC5QSSksMD5kJiYoZD0zNjAtTWF0aC5hYnMoZCkpLDQ1Pj1kJiZkPj0wP2Uub3B0aW9ucy5ydGw9PT0hMT9cImxlZnRcIjpcInJpZ2h0XCI6MzYwPj1kJiZkPj0zMTU/ZS5vcHRpb25zLnJ0bD09PSExP1wibGVmdFwiOlwicmlnaHRcIjpkPj0xMzUmJjIyNT49ZD9lLm9wdGlvbnMucnRsPT09ITE/XCJyaWdodFwiOlwibGVmdFwiOmUub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmc9PT0hMD9kPj0zNSYmMTM1Pj1kP1wiZG93blwiOlwidXBcIjpcInZlcnRpY2FsXCJ9LGIucHJvdG90eXBlLnN3aXBlRW5kPWZ1bmN0aW9uKGEpe3ZhciBjLGQsYj10aGlzO2lmKGIuZHJhZ2dpbmc9ITEsYi5pbnRlcnJ1cHRlZD0hMSxiLnNob3VsZENsaWNrPWIudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+MTA/ITE6ITAsdm9pZCAwPT09Yi50b3VjaE9iamVjdC5jdXJYKXJldHVybiExO2lmKGIudG91Y2hPYmplY3QuZWRnZUhpdD09PSEwJiZiLiRzbGlkZXIudHJpZ2dlcihcImVkZ2VcIixbYixiLnN3aXBlRGlyZWN0aW9uKCldKSxiLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPj1iLnRvdWNoT2JqZWN0Lm1pblN3aXBlKXtzd2l0Y2goZD1iLnN3aXBlRGlyZWN0aW9uKCkpe2Nhc2VcImxlZnRcIjpjYXNlXCJkb3duXCI6Yz1iLm9wdGlvbnMuc3dpcGVUb1NsaWRlP2IuY2hlY2tOYXZpZ2FibGUoYi5jdXJyZW50U2xpZGUrYi5nZXRTbGlkZUNvdW50KCkpOmIuY3VycmVudFNsaWRlK2IuZ2V0U2xpZGVDb3VudCgpLGIuY3VycmVudERpcmVjdGlvbj0wO2JyZWFrO2Nhc2VcInJpZ2h0XCI6Y2FzZVwidXBcIjpjPWIub3B0aW9ucy5zd2lwZVRvU2xpZGU/Yi5jaGVja05hdmlnYWJsZShiLmN1cnJlbnRTbGlkZS1iLmdldFNsaWRlQ291bnQoKSk6Yi5jdXJyZW50U2xpZGUtYi5nZXRTbGlkZUNvdW50KCksYi5jdXJyZW50RGlyZWN0aW9uPTF9XCJ2ZXJ0aWNhbFwiIT1kJiYoYi5zbGlkZUhhbmRsZXIoYyksYi50b3VjaE9iamVjdD17fSxiLiRzbGlkZXIudHJpZ2dlcihcInN3aXBlXCIsW2IsZF0pKX1lbHNlIGIudG91Y2hPYmplY3Quc3RhcnRYIT09Yi50b3VjaE9iamVjdC5jdXJYJiYoYi5zbGlkZUhhbmRsZXIoYi5jdXJyZW50U2xpZGUpLGIudG91Y2hPYmplY3Q9e30pfSxiLnByb3RvdHlwZS5zd2lwZUhhbmRsZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcztpZighKGIub3B0aW9ucy5zd2lwZT09PSExfHxcIm9udG91Y2hlbmRcImluIGRvY3VtZW50JiZiLm9wdGlvbnMuc3dpcGU9PT0hMXx8Yi5vcHRpb25zLmRyYWdnYWJsZT09PSExJiYtMSE9PWEudHlwZS5pbmRleE9mKFwibW91c2VcIikpKXN3aXRjaChiLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50PWEub3JpZ2luYWxFdmVudCYmdm9pZCAwIT09YS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM/YS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoOjEsYi50b3VjaE9iamVjdC5taW5Td2lwZT1iLmxpc3RXaWR0aC9iLm9wdGlvbnMudG91Y2hUaHJlc2hvbGQsYi5vcHRpb25zLnZlcnRpY2FsU3dpcGluZz09PSEwJiYoYi50b3VjaE9iamVjdC5taW5Td2lwZT1iLmxpc3RIZWlnaHQvYi5vcHRpb25zLnRvdWNoVGhyZXNob2xkKSxhLmRhdGEuYWN0aW9uKXtjYXNlXCJzdGFydFwiOmIuc3dpcGVTdGFydChhKTticmVhaztjYXNlXCJtb3ZlXCI6Yi5zd2lwZU1vdmUoYSk7YnJlYWs7Y2FzZVwiZW5kXCI6Yi5zd2lwZUVuZChhKX19LGIucHJvdG90eXBlLnN3aXBlTW92ZT1mdW5jdGlvbihhKXt2YXIgZCxlLGYsZyxoLGI9dGhpcztyZXR1cm4gaD12b2lkIDAhPT1hLm9yaWdpbmFsRXZlbnQ/YS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM6bnVsbCwhYi5kcmFnZ2luZ3x8aCYmMSE9PWgubGVuZ3RoPyExOihkPWIuZ2V0TGVmdChiLmN1cnJlbnRTbGlkZSksYi50b3VjaE9iamVjdC5jdXJYPXZvaWQgMCE9PWg/aFswXS5wYWdlWDphLmNsaWVudFgsYi50b3VjaE9iamVjdC5jdXJZPXZvaWQgMCE9PWg/aFswXS5wYWdlWTphLmNsaWVudFksYi50b3VjaE9iamVjdC5zd2lwZUxlbmd0aD1NYXRoLnJvdW5kKE1hdGguc3FydChNYXRoLnBvdyhiLnRvdWNoT2JqZWN0LmN1clgtYi50b3VjaE9iamVjdC5zdGFydFgsMikpKSxiLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITAmJihiLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoPU1hdGgucm91bmQoTWF0aC5zcXJ0KE1hdGgucG93KGIudG91Y2hPYmplY3QuY3VyWS1iLnRvdWNoT2JqZWN0LnN0YXJ0WSwyKSkpKSxlPWIuc3dpcGVEaXJlY3Rpb24oKSxcInZlcnRpY2FsXCIhPT1lPyh2b2lkIDAhPT1hLm9yaWdpbmFsRXZlbnQmJmIudG91Y2hPYmplY3Quc3dpcGVMZW5ndGg+NCYmYS5wcmV2ZW50RGVmYXVsdCgpLGc9KGIub3B0aW9ucy5ydGw9PT0hMT8xOi0xKSooYi50b3VjaE9iamVjdC5jdXJYPmIudG91Y2hPYmplY3Quc3RhcnRYPzE6LTEpLGIub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmc9PT0hMCYmKGc9Yi50b3VjaE9iamVjdC5jdXJZPmIudG91Y2hPYmplY3Quc3RhcnRZPzE6LTEpLGY9Yi50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCxiLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITEsYi5vcHRpb25zLmluZmluaXRlPT09ITEmJigwPT09Yi5jdXJyZW50U2xpZGUmJlwicmlnaHRcIj09PWV8fGIuY3VycmVudFNsaWRlPj1iLmdldERvdENvdW50KCkmJlwibGVmdFwiPT09ZSkmJihmPWIudG91Y2hPYmplY3Quc3dpcGVMZW5ndGgqYi5vcHRpb25zLmVkZ2VGcmljdGlvbixiLnRvdWNoT2JqZWN0LmVkZ2VIaXQ9ITApLGIub3B0aW9ucy52ZXJ0aWNhbD09PSExP2Iuc3dpcGVMZWZ0PWQrZipnOmIuc3dpcGVMZWZ0PWQrZiooYi4kbGlzdC5oZWlnaHQoKS9iLmxpc3RXaWR0aCkqZyxiLm9wdGlvbnMudmVydGljYWxTd2lwaW5nPT09ITAmJihiLnN3aXBlTGVmdD1kK2YqZyksYi5vcHRpb25zLmZhZGU9PT0hMHx8Yi5vcHRpb25zLnRvdWNoTW92ZT09PSExPyExOmIuYW5pbWF0aW5nPT09ITA/KGIuc3dpcGVMZWZ0PW51bGwsITEpOnZvaWQgYi5zZXRDU1MoYi5zd2lwZUxlZnQpKTp2b2lkIDApfSxiLnByb3RvdHlwZS5zd2lwZVN0YXJ0PWZ1bmN0aW9uKGEpe3ZhciBjLGI9dGhpcztyZXR1cm4gYi5pbnRlcnJ1cHRlZD0hMCwxIT09Yi50b3VjaE9iamVjdC5maW5nZXJDb3VudHx8Yi5zbGlkZUNvdW50PD1iLm9wdGlvbnMuc2xpZGVzVG9TaG93PyhiLnRvdWNoT2JqZWN0PXt9LCExKToodm9pZCAwIT09YS5vcmlnaW5hbEV2ZW50JiZ2b2lkIDAhPT1hLm9yaWdpbmFsRXZlbnQudG91Y2hlcyYmKGM9YS5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0pLGIudG91Y2hPYmplY3Quc3RhcnRYPWIudG91Y2hPYmplY3QuY3VyWD12b2lkIDAhPT1jP2MucGFnZVg6YS5jbGllbnRYLGIudG91Y2hPYmplY3Quc3RhcnRZPWIudG91Y2hPYmplY3QuY3VyWT12b2lkIDAhPT1jP2MucGFnZVk6YS5jbGllbnRZLHZvaWQoYi5kcmFnZ2luZz0hMCkpfSxiLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcz1iLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztudWxsIT09YS4kc2xpZGVzQ2FjaGUmJihhLnVubG9hZCgpLGEuJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKSxhLiRzbGlkZXNDYWNoZS5hcHBlbmRUbyhhLiRzbGlkZVRyYWNrKSxhLnJlaW5pdCgpKX0sYi5wcm90b3R5cGUudW5sb2FkPWZ1bmN0aW9uKCl7dmFyIGI9dGhpczthKFwiLnNsaWNrLWNsb25lZFwiLGIuJHNsaWRlcikucmVtb3ZlKCksYi4kZG90cyYmYi4kZG90cy5yZW1vdmUoKSxiLiRwcmV2QXJyb3cmJmIuaHRtbEV4cHIudGVzdChiLm9wdGlvbnMucHJldkFycm93KSYmYi4kcHJldkFycm93LnJlbW92ZSgpLGIuJG5leHRBcnJvdyYmYi5odG1sRXhwci50ZXN0KGIub3B0aW9ucy5uZXh0QXJyb3cpJiZiLiRuZXh0QXJyb3cucmVtb3ZlKCksYi4kc2xpZGVzLnJlbW92ZUNsYXNzKFwic2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudFwiKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIikuY3NzKFwid2lkdGhcIixcIlwiKX0sYi5wcm90b3R5cGUudW5zbGljaz1mdW5jdGlvbihhKXt2YXIgYj10aGlzO2IuJHNsaWRlci50cmlnZ2VyKFwidW5zbGlja1wiLFtiLGFdKSxiLmRlc3Ryb3koKX0sYi5wcm90b3R5cGUudXBkYXRlQXJyb3dzPWZ1bmN0aW9uKCl7dmFyIGIsYT10aGlzO2I9TWF0aC5mbG9vcihhLm9wdGlvbnMuc2xpZGVzVG9TaG93LzIpLGEub3B0aW9ucy5hcnJvd3M9PT0hMCYmYS5zbGlkZUNvdW50PmEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJiFhLm9wdGlvbnMuaW5maW5pdGUmJihhLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoXCJzbGljay1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwiZmFsc2VcIiksYS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpLDA9PT1hLmN1cnJlbnRTbGlkZT8oYS4kcHJldkFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksYS4kbmV4dEFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKTphLmN1cnJlbnRTbGlkZT49YS5zbGlkZUNvdW50LWEub3B0aW9ucy5zbGlkZXNUb1Nob3cmJmEub3B0aW9ucy5jZW50ZXJNb2RlPT09ITE/KGEuJG5leHRBcnJvdy5hZGRDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLGEuJHByZXZBcnJvdy5yZW1vdmVDbGFzcyhcInNsaWNrLWRpc2FibGVkXCIpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJmYWxzZVwiKSk6YS5jdXJyZW50U2xpZGU+PWEuc2xpZGVDb3VudC0xJiZhLm9wdGlvbnMuY2VudGVyTW9kZT09PSEwJiYoYS4kbmV4dEFycm93LmFkZENsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcInRydWVcIiksYS4kcHJldkFycm93LnJlbW92ZUNsYXNzKFwic2xpY2stZGlzYWJsZWRcIikuYXR0cihcImFyaWEtZGlzYWJsZWRcIixcImZhbHNlXCIpKSl9LGIucHJvdG90eXBlLnVwZGF0ZURvdHM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO251bGwhPT1hLiRkb3RzJiYoYS4kZG90cy5maW5kKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLGEuJGRvdHMuZmluZChcImxpXCIpLmVxKE1hdGguZmxvb3IoYS5jdXJyZW50U2xpZGUvYS5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkuYWRkQ2xhc3MoXCJzbGljay1hY3RpdmVcIikuYXR0cihcImFyaWEtaGlkZGVuXCIsXCJmYWxzZVwiKSl9LGIucHJvdG90eXBlLnZpc2liaWxpdHk9ZnVuY3Rpb24oKXt2YXIgYT10aGlzO2Eub3B0aW9ucy5hdXRvcGxheSYmKGRvY3VtZW50W2EuaGlkZGVuXT9hLmludGVycnVwdGVkPSEwOmEuaW50ZXJydXB0ZWQ9ITEpfSxhLmZuLnNsaWNrPWZ1bmN0aW9uKCl7dmFyIGYsZyxhPXRoaXMsYz1hcmd1bWVudHNbMF0sZD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSksZT1hLmxlbmd0aDtmb3IoZj0wO2U+ZjtmKyspaWYoXCJvYmplY3RcIj09dHlwZW9mIGN8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBjP2FbZl0uc2xpY2s9bmV3IGIoYVtmXSxjKTpnPWFbZl0uc2xpY2tbY10uYXBwbHkoYVtmXS5zbGljayxkKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZylyZXR1cm4gZztyZXR1cm4gYX19KTsiLCIvL2Fib3V0IHRhYnNcclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICAgJCgnI2FydGljbGUtYWJvdXQgLnRhYnMgbGknKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xyXG4gICAgICAgIHZhciB0YWIgPSAkKHRoaXMpLmRhdGEoJ3NlY3Rpb24nKTtcclxuICAgICAgICAkKCcjYXJ0aWNsZS1hYm91dCAudGFicyBsaScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkKCcjYXJ0aWNsZS1hYm91dCAuc2VjdGlvbicpLmhpZGUoKTtcclxuICAgICAgICAkKCcjYWJvdXQtJyt0YWIpLnNob3coKTtcclxuICAgICAgICAkKCcjYWJvdXQtJyt0YWIpLmNoaWxkcmVuKCcuc2Nyb2xsLXBhbmUnKS5qU2Nyb2xsUGFuZSh7c2hvd0Fycm93czogdHJ1ZX0pLnJlaW5pdGlhbGlzZSgpO1xyXG4gICAgfSk7XHJcbn0pOyIsIiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgYm9keSA9ICQoXCJodG1sLCBib2R5XCIpLFxuICAgICAgICBtZW51QnV0dG9uID0gJChcIi5qcy1tZW51LWJ1dHRvblwiKSxcbiAgICAgICAgbGFuZ0J1dHRvbiA9ICQoXCIuanMtbGFuZy1idXR0b25cIiksXG4gICAgICAgIGFycm93TW9iaWxlQnV0dG9uID0gJChcIi5qcy1hcnJvdy1tb2JpbGVcIiksXG4gICAgICAgIGFycm93TW9iaWxlRmlyc3RCdXR0b24gPSAkKFwiLmpzLWFycm93LW1vYmlsZS1maXJzdFwiKSxcbiAgICAgICAgYXJyb3dEZXNrdG9wQnV0dG9uID0gJChcIi5qcy1hcnJvdy1kZXNrdG9wXCIpLFxuICAgICAgICBhcnRpY2xlcyA9ICQoXCIubWFpbl9fY29udGVudHMgPiAuYXJ0aWNsZVwiKSxcbiAgICAgICAgbmF2TGluayA9ICQoXCIuanMtbmF2LWxpbmtcIiksXG4gICAgICAgIG1haW5OYXYgPSAkKFwiLm5hdi0tbWFpbiA+IC5uYXYtLWl0ZW1cIiksXG4gICAgICAgIGFycm93UHJldiA9ICQoXCIuaWNvbi1hcnJvdy0tcHJldlwiKSxcbiAgICAgICAgYXJyb3dOZXh0ID0gJChcIi5pY29uLWFycm93LS1uZXh0XCIpLFxuICAgICAgICBzY3JvbGxDb250YWluZXIgPSAkKFwiLnNjcm9sbC1jb250YWluZXJcIiksXG4gICAgICAgIGFjdGl2ZUluZGV4ID0gMCxcbiAgICAgICAgc2Nyb2xsUGFuZSA9ICQoXCIuc2Nyb2xsLXBhbmVcIik7XG5cblxuXG4gICAgZnVuY3Rpb24gbWFrZVBhZ2VBY3RpdmVCeUluZGV4KCl7XG4gICAgYXJ0aWNsZXMucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7ICAgICAgXG4gICAgICAgIGFydGljbGVzLmVxKGFjdGl2ZUluZGV4KS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgYXJ0aWNsZXMuZXEoYWN0aXZlSW5kZXgpLmZpbmQoJy5zY3JvbGwtcGFuZScpLmpTY3JvbGxQYW5lKHtzaG93QXJyb3dzOiB0cnVlfSk7XG5cbiAgICAgICAgbmF2TGluay5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgbmF2TGluay5lcShhY3RpdmVJbmRleCkuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICAgIGJvZHkucmVtb3ZlQ2xhc3MoXCJtZW51LW9wZW5cIikuYWRkQ2xhc3MoXCJhcnRpY2xlLWFjdGl2ZVwiKTtcblxuICAgICAgICBhcnJvd1ByZXYucmVtb3ZlQ2xhc3MoXCJoaWRlXCIpO1xuICAgICAgICBpZiAoYWN0aXZlSW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIGFycm93UHJldi5hZGRDbGFzcyhcImhpZGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgYXJyb3dOZXh0LnJlbW92ZUNsYXNzKFwiaGlkZVwiKTtcbiAgICAgICAgaWYgKGFjdGl2ZUluZGV4ICsgMSA+PSBhcnRpY2xlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFycm93TmV4dC5hZGRDbGFzcyhcImhpZGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvL0hpZGUgdGhlIGZpcnN0IGxvYWQgbW9iaWxlIHZpZXcgYXJyb3dcbiAgICAgICAgYXJyb3dNb2JpbGVGaXJzdEJ1dHRvbi5oaWRlKCk7XG5cbiAgICAgICAgLy9XZSBuZWVkIHRvIHJlLWluaXRpYWxpc2UganNjcm9sbHBhbmUgaWYgdGhpcyBpcyBwYW5lbCBoYXMgb25lXG4gICAgICAgIC8vJChwYWdlSUQpLmZpbmQoXCIuc2Nyb2xsLXBhbmVcIikualNjcm9sbFBhbmUoKTtcblxuICAgIH1cblxuICAgIG1lbnVCdXR0b24ub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJvZHkudG9nZ2xlQ2xhc3MoXCJtZW51LW9wZW5cIik7XG4gICAgICAgIGlmIChib2R5Lmhhc0NsYXNzKFwibWVudS1vcGVuXCIpKSB7XG4gICAgICAgICAgICBib2R5LnJlbW92ZUNsYXNzKFwibGFuZy1vcGVuXCIpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBsYW5nQnV0dG9uLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBib2R5LnRvZ2dsZUNsYXNzKFwibGFuZy1vcGVuXCIpO1xuICAgICAgICBpZiAoISBib2R5Lmhhc0NsYXNzKFwibWVudS1vcGVuXCIpKSB7XG4gICAgICAgICAgICBib2R5LmFkZENsYXNzKFwibWVudS1vcGVuXCIpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBuYXZMaW5rLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBhY3RpdmVMaW5rID0gJCh0aGlzKS5wYXJlbnQoKTtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBtYWluTmF2LmluZGV4KGFjdGl2ZUxpbmspO1xuXG4gICAgICAgIG1ha2VQYWdlQWN0aXZlQnlJbmRleCgpO1xuXG4gICAgICAgIGJvZHkucmVtb3ZlQ2xhc3MoXCJtZW51LW9wZW5cIikuYWRkQ2xhc3MoXCJhcnRpY2xlLWFjdGl2ZVwiKS5zY3JvbGxUb3AoMCk7XG5cbiAgICB9KTtcblxuICAgIGFycm93TW9iaWxlQnV0dG9uLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBhcnJvd0hyZWYgPSAkKHRoaXMpLmF0dHIoXCJocmVmXCIpLFxuICAgICAgICAgICAgYXJyb3dUYXJnZXQgPSAkKGFycm93SHJlZik7XG5cbiAgICAgICAgbmF2TGluay5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgJChcImFbaHJlZj0nXCIrYXJyb3dIcmVmK1wiJ11cIikuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG5cbiAgICAgICAgLy9BcnJvdyBkb3duIGNsaWNrIChtb2JpbGUgLSB0YWJsZXQpXG4gICAgICAgIGJvZHkuYW5pbWF0ZSh7XG4gICAgICAgICAgICBzY3JvbGxUb3A6IGFycm93VGFyZ2V0Lm9mZnNldCgpLnRvcFxuICAgICAgICB9LCAzMDApO1xuXG4gICAgfSk7XG5cbiAgICBhcnJvd01vYmlsZUZpcnN0QnV0dG9uLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBhcnJvd0hyZWYgPSAkKHRoaXMpLmF0dHIoXCJocmVmXCIpLFxuICAgICAgICAgICAgYXJyb3dUYXJnZXQgPSAkKGFycm93SHJlZik7XG5cbiAgICAgICAgbmF2TGluay5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgICAgICAgJChcImFbaHJlZj0nXCIrYXJyb3dIcmVmK1wiJ11cIikuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG5cbiAgICAgICAgYWN0aXZlSW5kZXggPSAwO1xuICAgICAgICBtYWtlUGFnZUFjdGl2ZUJ5SW5kZXgoKTtcblxuICAgICAgICAvL0Fycm93IGRvd24gY2xpY2sgKG1vYmlsZSAtIHRhYmxldClcbiAgICAgICAgYm9keS5hbmltYXRlKHtcbiAgICAgICAgICAgIHNjcm9sbFRvcDogYXJyb3dUYXJnZXQub2Zmc2V0KCkudG9wXG4gICAgICAgIH0sIDMwMCk7XG5cbiAgICB9KTtcblxuICAgIGFycm93RGVza3RvcEJ1dHRvbi5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCl7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSAkKHRoaXMpLmRhdGEoXCJkaXJlY3Rpb25cIiksXG4gICAgICAgICAgICBhY3RpdmVBcnRpY2xlID0gJChcIi5hcnRpY2xlLmFjdGl2ZVwiKTtcblxuICAgICAgICBhY3RpdmVJbmRleCA9IGFydGljbGVzLmluZGV4KGFjdGl2ZUFydGljbGUpO1xuXG4gICAgICAgIGlmKCBkaXJlY3Rpb24gPT09IFwibmV4dFwiICl7XG4gICAgICAgICAgICBpZiAoYWN0aXZlSW5kZXggKyAxID49IGFydGljbGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZUluZGV4ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlSW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiggZGlyZWN0aW9uID09PSBcInByZXZcIiApe1xuICAgICAgICAgICAgaWYgKGFjdGl2ZUluZGV4ID4gMCApIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVJbmRleC0tO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBtYWtlUGFnZUFjdGl2ZUJ5SW5kZXgoKTtcbiAgICB9KTtcblxuICAgIGFycm93UHJldi5hZGRDbGFzcyhcImhpZGVcIik7XG5cbiAgICAvLyAvL0hpZGUgb24gZmlyc3QgbG9hZFxuICAgIC8vIGFycm93QnV0dG9uLmZpcnN0KCkuc2libGluZ3MoXCIuanMtYXJyb3ctZG93blwiKS5oaWRlKCk7XG4gICAgLy8gJChcIi5hcnRpY2xlXCIpLmZpcnN0KCkuc2libGluZ3MoXCIuYXJ0aWNsZVwiKS5oaWRlKCk7XG5cbiAgICBmdW5jdGlvbiBjaGVja1dpbmRvd1dpZHRoKCl7XG4gICAgICAgIGlmIChhY3RpdmVJbmRleCA9PT0gMCkge1xuXG4gICAgICAgICAgICBpZiggJCh3aW5kb3cpLndpZHRoKCkgPD0gMTAyNCApIHtcblxuICAgICAgICAgICAgICAgIHZhciBhcGlzID0gW107XG4gICAgICAgICAgICAgICAgYXBpcy5wdXNoKHNjcm9sbFBhbmUualNjcm9sbFBhbmUoKS5kYXRhKCkuanNwKTtcbiAgICAgICAgICAgICAgICBpZiAoYXBpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvL3Njcm9sbENvbnRhaW5lci5lbXB0eSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vc2Nyb2xsUGFuZS5qU2Nyb2xsUGFuZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFmdGVyU2l6ZTtcbiAgICAvLyB3aW5kb3cub25yZXNpemUgPSBmdW5jdGlvbigpe1xuICAgIC8vICAgICBjbGVhclRpbWVvdXQoYWZ0ZXJTaXplKTtcbiAgICAvLyAgICAgYWZ0ZXJTaXplID0gc2V0VGltZW91dChjaGVja1dpbmRvd1dpZHRoLCAyMDApO1xuICAgIC8vIH07XG59KTsiLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIGJvZHkgPSAkKFwiaHRtbCwgYm9keVwiKSxcbiAgICAgICAgc2xpZGVzID0gJChcIiNzbGlkZXNcIiksXG4gICAgICAgIG1vZGFsQnV0dG9uID0gJChcIi5qcy1nYWxsZXJ5LW9wZW5cIiksXG4gICAgICAgIG1vZGFsQ2xvc2VCdXR0b24gPSAkKFwiLmpzLWdhbGxlcnktY2xvc2VcIik7XG5cbiAgICBmdW5jdGlvbiBnZXRTbGlkZXJTZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvdHM6IHRydWVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzbGlkZXMuc2xpY2soZ2V0U2xpZGVyU2V0dGluZ3MoKSk7XG5cbiAgICBmdW5jdGlvbiBidWlsZEltYWdlU2xpZGUoc2xpZGVUaXRsZSwgc2xpZGVTcmMpIHtcbiAgICAgICAgdmFyIGZpZ2NhcHRpb24gPSAkKFwiPGZpZ2NhcHRpb24vPlwiLCB7XG4gICAgICAgICAgICAgICAgdGV4dDogc2xpZGVUaXRsZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpbWcgPSAkKFwiPGltZz5cIiwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBcInNsaWRlX19pbWFnZVwiLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBzbGlkZVRpdGxlLFxuICAgICAgICAgICAgICAgIHNyYzogc2xpZGVTcmNcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcGljdHVyZSA9ICQoXCI8cGljdHVyZS8+XCIsIHtcbiAgICAgICAgICAgICAgICBjbGFzczogXCJzbGlkZVwiXG4gICAgICAgICAgICB9KS5hcHBlbmQoaW1nLCBmaWdjYXB0aW9uKSxcbiAgICAgICAgICAgIGFUYWcgPSAkKFwiPGEvPlwiLCB7XG4gICAgICAgICAgICAgICAgaHJlZjogc2xpZGVTcmMsXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwic2xpZGUtLWxpbmtcIixcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCJcbiAgICAgICAgICAgIH0pLmFwcGVuZChwaWN0dXJlKTtcbiAgICAgICAgcmV0dXJuICQoXCI8bGkvPlwiLCB7XG4gICAgICAgICAgICBjbGFzczogXCJsaXN0IGxpc3QtLXNsaWRlc1wiXG4gICAgICAgIH0pLmFwcGVuZChhVGFnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWlsZFlUU2xpZGUoc2xpZGVUaXRsZSwgc2xpZGVTcmMpIHtcbiAgICAgICAgdmFyIGlmcmFtZSA9ICQoXCI8aWZyYW1lLz5cIiwge1xuICAgICAgICAgICAgICAgIGZyYW1lYm9yZGVyOiAwLFxuICAgICAgICAgICAgICAgIHNyYzogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9cIiArIHNsaWRlU3JjICsgXCI/cmVsPTBcIixcbiAgICAgICAgICAgICAgICBhbGxvd2Z1bGxzY3JlZW46IHRydWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZGl2ID0gJChcIjxkaXYvPlwiLCB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IFwieW91dHViZVwiXG4gICAgICAgICAgICB9KS5hcHBlbmQoaWZyYW1lKTtcbiAgICAgICAgLy88aWZyYW1lIHdpZHRoPVwiMzIwXCIgaGVpZ2h0PVwiMTgwXCIgc3JjPVwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvMFUtQzZyM3RzdUk/cmVsPTBcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+XG4gICAgICAgIHJldHVybiAkKFwiPGxpLz5cIiwge1xuICAgICAgICAgICAgY2xhc3M6IFwibGlzdCBsaXN0LS1zbGlkZXNcIlxuICAgICAgICB9KS5hcHBlbmQoZGl2KTtcbiAgICB9XG5cbiAgICBtb2RhbEJ1dHRvbi5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdhbGxlcnlUeXBlID0gJCh0aGlzKS5kYXRhKFwidHlwZVwiKSxcbiAgICAgICAgICAgIGdhbGxlcnkgPSAkKHRoaXMpLmRhdGEoXCJ0YXJnZXRcIik7XG4gICAgICAgIGlmIChnYWxsZXJ5VHlwZSA9PT0gXCJ2aWRlb3NcIiB8fCBnYWxsZXJ5VHlwZSA9PT0gXCJpbWFnZXNcIil7XG4gICAgICAgICAgICBib2R5LmFkZENsYXNzKFwibW9kYWwtb3BlblwiKTtcbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgIHVybDogXCIvaG9tZS5qc29uXCIsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ2FsbGVyeURhdGEgPSBkYXRhW2dhbGxlcnldO1xuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlcy5zbGljayhcInVuc2xpY2tcIik7IC8qIE9OTFkgcmVtb3ZlIHRoZSBjbGFzc2VzIGFuZCBoYW5kbGVycyBhZGRlZCBvbiBpbml0aWFsaXplICovXG4gICAgICAgICAgICAgICAgICAgICQoXCIubGlzdC0tc2xpZGVzXCIpLnJlbW92ZSgpOyAvKiBSZW1vdmUgY3VycmVudCBzbGlkZXMgZWxlbWVudHMsIGluIGNhc2UgdGhhdCB5b3Ugd2FudCB0byBzaG93IG5ldyBzbGlkZXMuICovXG4gICAgICAgICAgICAgICAgICAgIGlmICggZ2FsbGVyeVR5cGUgPT09IFwiaW1hZ2VzXCIgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZ2FsbGVyeURhdGEsIGZ1bmN0aW9uKCBpbmRleCwgc2xpZGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzLmFwcGVuZChidWlsZEltYWdlU2xpZGUoc2xpZGUudGl0bGUsIHNsaWRlLnNyYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGdhbGxlcnlUeXBlID09PSBcInZpZGVvc1wiICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGdhbGxlcnlEYXRhLCBmdW5jdGlvbiggaW5kZXgsIHNsaWRlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlcy5hcHBlbmQoYnVpbGRZVFNsaWRlKHNsaWRlLnRpdGxlLCBzbGlkZS5zcmMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzLnNsaWNrKGdldFNsaWRlclNldHRpbmdzKCkpOyAvKiBJbml0aWFsaXplIHRoZSBzbGljayBhZ2FpbiAqL1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIG1vZGFsQ2xvc2VCdXR0b24ub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGJvZHkucmVtb3ZlQ2xhc3MoXCJtb2RhbC1vcGVuXCIpO1xuICAgICAgICBzbGlkZXMuc2xpY2soXCJ1bnNsaWNrXCIpO1xuICAgICAgICAkKFwiLmxpc3QtLXNsaWRlc1wiKS5yZW1vdmUoKTtcbiAgICB9KTtcblxuXG59KTtcblxuIiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBzb3VuZCA9ICQoXCIuanMtc291bmRcIiksXG4gICAgICAgIHNvdW5kQ29udGFpbmVyID0gJChcIiNhbWJpYW5jZVwiKTtcblxuICAgIHNvdW5kLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChzb3VuZENvbnRhaW5lclswXS5wYXVzZWQpIHtcbiAgICAgICAgICAgIHNvdW5kQ29udGFpbmVyWzBdLnBsYXkoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdW5kQ29udGFpbmVyWzBdLnBhdXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgIH0pO1xuXG59KTsiLCIkKFwiaW1nLnN2Z1wiKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyICRpbWcgPSAkKHRoaXMpO1xuICAgIHZhciBpbWdJRCA9ICRpbWcuYXR0cihcImlkXCIpO1xuICAgIHZhciBpbWdDbGFzcyA9ICRpbWcuYXR0cihcImNsYXNzXCIpO1xuICAgIHZhciBpbWdVUkwgPSAkaW1nLmF0dHIoXCJzcmNcIik7XG5cbiAgICAkLmdldChpbWdVUkwsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBTVkcgdGFnLCBpZ25vcmUgdGhlIHJlc3RcbiAgICAgICAgdmFyICRzdmcgPSAkKGRhdGEpLmZpbmQoXCJzdmdcIik7XG5cbiAgICAgICAgLy8gQWRkIHJlcGxhY2VkIGltYWdlXCJzIElEIHRvIHRoZSBuZXcgU1ZHXG4gICAgICAgIGlmKHR5cGVvZiBpbWdJRCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgJHN2ZyA9ICRzdmcuYXR0cihcImlkXCIsIGltZ0lEKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgcmVwbGFjZWQgaW1hZ2VcInMgY2xhc3NlcyB0byB0aGUgbmV3IFNWR1xuICAgICAgICBpZih0eXBlb2YgaW1nQ2xhc3MgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICRzdmcgPSAkc3ZnLmF0dHIoXCJjbGFzc1wiLCBpbWdDbGFzcytcIiByZXBsYWNlZC1zdmdcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgYW55IGludmFsaWQgWE1MIHRhZ3MgYXMgcGVyIGh0dHA6Ly92YWxpZGF0b3IudzMub3JnXG4gICAgICAgICRzdmcgPSAkc3ZnLnJlbW92ZUF0dHIoXCJ4bWxuczphXCIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgaW1hZ2Ugd2l0aCBuZXcgU1ZHXG4gICAgICAgICRpbWcucmVwbGFjZVdpdGgoJHN2Zyk7XG5cbiAgICB9LCBcInhtbFwiKTtcblxufSk7Il19
